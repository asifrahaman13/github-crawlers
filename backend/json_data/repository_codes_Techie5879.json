{
    "ai_semantic_search": {
        "README.md": {
            "code": "# BrainQuery - AI Semantic Search\nDo you have difficulty finding relevant research papers? BrainQuery to the rescue! It employs AI Semantic Search to find hidden meaning behind searches and uses that to search through the abstracts of papers from the arXiv database - a large open-access archive of scientific material. (and yes, it has dark mode too!)\n\nIt even includes multi language support using OpenAI translation, which makes searches possible in any language.\n## Technologies Used:\n\n### Frontend:\n- ReactJS\n- Tailwind CSS\n\n### Backend:\n- Flask API\n- OpenAI API (for Text Embeddings and Translation)\n- Pinecone (Vector Database)\n\n## Screenshots:\n![Dark page](/images/dark.jpg?raw=true \"Dark Page\")\n\n### Example Query: \"minimum resource quantum computation increase\"\n![Query1](/images/query1.png?raw=true \"Query1\")\n\n### Example Query (German): \"I-V-Eigenschaften von MgB2\" (translation: I-V properties of MgB2)\n![Query2](/images/query2.png?raw=true \"Query2\")\n\n### Example Query (Bengali): \"\u09ae\u09bf\u09a8 \u09b0\u09bf\u09b8\u09cb\u09b0\u09cd\u09b8 \u0995\u09cb\u09af\u09bc\u09be\u09a8\u09cd\u099f\u09be\u09ae \u0995\u09ae\u09cd\u09aa\u09bf\u0989\u099f\u09c7\u09b6\u09a8 \u09ac\u09c3\u09a6\u09cd\u09a7\u09bf\" (translation: min resource quantum computation increase)\n![Query3](/images/query3.png?raw=true \"Query3\")\n\n## How It Works: \nThe dataset consists of the arXiv Dataset (https://www.kaggle.com/datasets/Cornell-University/arxiv), of which, the first 15000 entries have been used for this project (due to Pinecone Restrictions). The embeddings for the abstract of each article were created (using OpenAI's ada-002 model), which has a dimensionality of 1536. These embeddings were then indexed in the Pincone Vector Database.\nFor Queries, this project uses OpenAI's translation (text completion via text-davinci-003 model) and embeddings (ada-002 model) to first translate given query into English and then embed it. A query is then made to the Pinecone database, which computes the top 5 items with consine similarity and returns the results as per ranking (most similar first), which is then displayed using the React frontend."
        },
        "app.py": {
            "code": "from dotenv import load_dotenv\r\nfrom flask import Flask, request\r\nimport os\r\nimport openai\r\nimport pinecone\r\nimport json\r\n\r\napp = Flask(__name__)\r\n\r\nfinal = {}\r\n\r\n# Loading environment variables\r\nload_dotenv()\r\nOPENAI_KEY = os.getenv(\"OPENAI_KEY\")\r\nPINECONE_KEY = os.getenv(\"PINECONE_KEY\")\r\n\r\nopenai.api_key = OPENAI_KEY\r\n\r\n# Selecting ada-002 model for text embeddings\r\nMODEL = \"text-embedding-ada-002\"\r\n\r\n# Initialize pinecone connection\r\npinecone.init(\r\n    api_key=PINECONE_KEY,\r\n    environment=\"us-west1-gcp\"  # find next to api key in   console\r\n)\r\n\r\n# Select index name and connect to index\r\nindex_name = 'semantic-search'\r\nindex = pinecone.Index(index_name)\r\n\r\n\r\n@app.route('/predictor', methods=[\"POST\"])\r\ndef predict():\r\n    query = request.get_json()\r\n    # Translation API call\r\n    response = openai.Completion.create(\r\n        model=\"text-davinci-003\",\r\n        prompt=\"Translate this to English (if already in english, just return input text): \" + query,\r\n        temperature=0.3,\r\n        max_tokens=15,\r\n        top_p=1.0,\r\n        frequency_penalty=0.0,\r\n        presence_penalty=0.0\r\n    )\r\n\r\n    # Created embeddings for translated text\r\n    \r\n    xq = openai.Embedding.create(input=response['choices'][0]['text'], engine=MODEL)['data'][0]['embedding']\r\n    res = index.query([xq], top_k=5, include_metadata=True)\r\n    \r\n    for i in range(len(res['matches'])):\r\n        final[i] = res['matches'][i]['id']\r\n\r\n    json_obj = json.dumps(final)\r\n    \r\n    return json_obj"
        },
        "index.html": {
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Web site created using create-react-app\"/>\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />    \n    <title>BrainQuery</title>\n  </head>\n  <body>\n    <div id=\"root\"></div> \n  </body>\n</html>\n"
        },
        "robots.txt": {
            "code": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n"
        }
    },
    "ClearSkies": {
        "README.md": {
            "code": "# ClearSkies\n## Clear Skies: Predicting and Preventing Air Pollution\n\nAir Pollution has been a long standing problem - specially in some urban cities of India. ClearSkies is a web app which aims to serve as a hub for getting education info, news, and serve predictions about Air Quality using a machine learning model\n\n## Technologies Used:\n\n### Frontend:\n- ReactJS\n- CSS\n\n### Backend: (Planned, for serving Predictions and News)\n- Django API\n- Integrating News API for serving News regarding Air Pollution\n\n### Model Training:\n- XGBoost\n\n# Screenshots\n\n### Home Page:\n![Home page](/assets/home.png?raw=true \"Home Page\")\n\n### Educational Page (In progress):\n![Edu page](/assets/placeholder_edu.png?raw=true \"Edu Page\")\n\n### News Page (In progress):\n![News page](/assets/placeholder_news.png?raw=true \"Home Page\")\n\n\n### Predictions Page (In progress):\n![Predictions page](/assets/placeholder_form.png?raw=true \"Home Page\")\n\n"
        },
        "model.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import pandas as pd\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df = pd.read_csv(\\\"./dataset/city_day.csv\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"      <th>AQI_Bucket</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>133.36</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-02</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>34.06</td>\\n\",\n       \"      <td>3.68</td>\\n\",\n       \"      <td>5.50</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-03</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>30.70</td>\\n\",\n       \"      <td>6.80</td>\\n\",\n       \"      <td>16.40</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-04</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>36.08</td>\\n\",\n       \"      <td>4.43</td>\\n\",\n       \"      <td>10.14</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-05</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>39.31</td>\\n\",\n       \"      <td>7.01</td>\\n\",\n       \"      <td>18.89</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>95</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-06</td>\\n\",\n       \"      <td>120.96</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>4.23</td>\\n\",\n       \"      <td>20.86</td>\\n\",\n       \"      <td>25.02</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>4.23</td>\\n\",\n       \"      <td>35.54</td>\\n\",\n       \"      <td>35.66</td>\\n\",\n       \"      <td>6.05</td>\\n\",\n       \"      <td>15.85</td>\\n\",\n       \"      <td>1.68</td>\\n\",\n       \"      <td>303.0</td>\\n\",\n       \"      <td>Very Poor</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>96</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-07</td>\\n\",\n       \"      <td>138.63</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>5.65</td>\\n\",\n       \"      <td>25.47</td>\\n\",\n       \"      <td>30.67</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>5.65</td>\\n\",\n       \"      <td>87.43</td>\\n\",\n       \"      <td>29.77</td>\\n\",\n       \"      <td>11.25</td>\\n\",\n       \"      <td>24.67</td>\\n\",\n       \"      <td>3.12</td>\\n\",\n       \"      <td>314.0</td>\\n\",\n       \"      <td>Very Poor</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>97</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-08</td>\\n\",\n       \"      <td>144.36</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>15.82</td>\\n\",\n       \"      <td>30.69</td>\\n\",\n       \"      <td>46.10</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>15.82</td>\\n\",\n       \"      <td>66.39</td>\\n\",\n       \"      <td>27.34</td>\\n\",\n       \"      <td>17.22</td>\\n\",\n       \"      <td>49.56</td>\\n\",\n       \"      <td>7.71</td>\\n\",\n       \"      <td>378.0</td>\\n\",\n       \"      <td>Very Poor</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>98</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-09</td>\\n\",\n       \"      <td>85.03</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>3.30</td>\\n\",\n       \"      <td>26.70</td>\\n\",\n       \"      <td>27.41</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>3.30</td>\\n\",\n       \"      <td>59.16</td>\\n\",\n       \"      <td>35.89</td>\\n\",\n       \"      <td>7.58</td>\\n\",\n       \"      <td>29.19</td>\\n\",\n       \"      <td>4.08</td>\\n\",\n       \"      <td>415.0</td>\\n\",\n       \"      <td>Severe</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>99</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-10</td>\\n\",\n       \"      <td>134.60</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>5.90</td>\\n\",\n       \"      <td>26.27</td>\\n\",\n       \"      <td>28.70</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>5.90</td>\\n\",\n       \"      <td>34.53</td>\\n\",\n       \"      <td>7.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>100 rows \u00d7 16 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         City        Date   PM2.5  PM10     NO    NO2    NOx  NH3     CO  \\\\\\n\",\n       \"0   Ahmedabad  2015-01-01     NaN   NaN   0.92  18.22  17.15  NaN   0.92   \\n\",\n       \"1   Ahmedabad  2015-01-02     NaN   NaN   0.97  15.69  16.46  NaN   0.97   \\n\",\n       \"2   Ahmedabad  2015-01-03     NaN   NaN  17.40  19.30  29.70  NaN  17.40   \\n\",\n       \"3   Ahmedabad  2015-01-04     NaN   NaN   1.70  18.48  17.97  NaN   1.70   \\n\",\n       \"4   Ahmedabad  2015-01-05     NaN   NaN  22.10  21.42  37.76  NaN  22.10   \\n\",\n       \"..        ...         ...     ...   ...    ...    ...    ...  ...    ...   \\n\",\n       \"95  Ahmedabad  2015-04-06  120.96   NaN   4.23  20.86  25.02  NaN   4.23   \\n\",\n       \"96  Ahmedabad  2015-04-07  138.63   NaN   5.65  25.47  30.67  NaN   5.65   \\n\",\n       \"97  Ahmedabad  2015-04-08  144.36   NaN  15.82  30.69  46.10  NaN  15.82   \\n\",\n       \"98  Ahmedabad  2015-04-09   85.03   NaN   3.30  26.70  27.41  NaN   3.30   \\n\",\n       \"99  Ahmedabad  2015-04-10  134.60   NaN   5.90  26.27  28.70  NaN   5.90   \\n\",\n       \"\\n\",\n       \"      SO2      O3  Benzene  Toluene  Xylene    AQI AQI_Bucket  \\n\",\n       \"0   27.64  133.36     0.00     0.02    0.00    NaN        NaN  \\n\",\n       \"1   24.55   34.06     3.68     5.50    3.77    NaN        NaN  \\n\",\n       \"2   29.07   30.70     6.80    16.40    2.25    NaN        NaN  \\n\",\n       \"3   18.59   36.08     4.43    10.14    1.00    NaN        NaN  \\n\",\n       \"4   39.33   39.31     7.01    18.89    2.78    NaN        NaN  \\n\",\n       \"..    ...     ...      ...      ...     ...    ...        ...  \\n\",\n       \"95  35.54   35.66     6.05    15.85    1.68  303.0  Very Poor  \\n\",\n       \"96  87.43   29.77    11.25    24.67    3.12  314.0  Very Poor  \\n\",\n       \"97  66.39   27.34    17.22    49.56    7.71  378.0  Very Poor  \\n\",\n       \"98  59.16   35.89     7.58    29.19    4.08  415.0     Severe  \\n\",\n       \"99  34.53    7.00     0.00     0.00    0.00    NaN        NaN  \\n\",\n       \"\\n\",\n       \"[100 rows x 16 columns]\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.head(100)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(29531, 16)\"\n      ]\n     },\n     \"execution_count\": 4,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>count</th>\\n\",\n       \"      <td>24933.000000</td>\\n\",\n       \"      <td>18391.000000</td>\\n\",\n       \"      <td>25949.000000</td>\\n\",\n       \"      <td>25946.000000</td>\\n\",\n       \"      <td>25346.000000</td>\\n\",\n       \"      <td>19203.000000</td>\\n\",\n       \"      <td>27472.000000</td>\\n\",\n       \"      <td>25677.000000</td>\\n\",\n       \"      <td>25509.000000</td>\\n\",\n       \"      <td>23908.000000</td>\\n\",\n       \"      <td>21490.000000</td>\\n\",\n       \"      <td>11422.000000</td>\\n\",\n       \"      <td>24850.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>mean</th>\\n\",\n       \"      <td>67.450578</td>\\n\",\n       \"      <td>118.127103</td>\\n\",\n       \"      <td>17.574730</td>\\n\",\n       \"      <td>28.560659</td>\\n\",\n       \"      <td>32.309123</td>\\n\",\n       \"      <td>23.483476</td>\\n\",\n       \"      <td>2.248598</td>\\n\",\n       \"      <td>14.531977</td>\\n\",\n       \"      <td>34.491430</td>\\n\",\n       \"      <td>3.280840</td>\\n\",\n       \"      <td>8.700972</td>\\n\",\n       \"      <td>3.070128</td>\\n\",\n       \"      <td>166.463581</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>std</th>\\n\",\n       \"      <td>64.661449</td>\\n\",\n       \"      <td>90.605110</td>\\n\",\n       \"      <td>22.785846</td>\\n\",\n       \"      <td>24.474746</td>\\n\",\n       \"      <td>31.646011</td>\\n\",\n       \"      <td>25.684275</td>\\n\",\n       \"      <td>6.962884</td>\\n\",\n       \"      <td>18.133775</td>\\n\",\n       \"      <td>21.694928</td>\\n\",\n       \"      <td>15.811136</td>\\n\",\n       \"      <td>19.969164</td>\\n\",\n       \"      <td>6.323247</td>\\n\",\n       \"      <td>140.696585</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>min</th>\\n\",\n       \"      <td>0.040000</td>\\n\",\n       \"      <td>0.010000</td>\\n\",\n       \"      <td>0.020000</td>\\n\",\n       \"      <td>0.010000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.010000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.010000</td>\\n\",\n       \"      <td>0.010000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>13.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25%</th>\\n\",\n       \"      <td>28.820000</td>\\n\",\n       \"      <td>56.255000</td>\\n\",\n       \"      <td>5.630000</td>\\n\",\n       \"      <td>11.750000</td>\\n\",\n       \"      <td>12.820000</td>\\n\",\n       \"      <td>8.580000</td>\\n\",\n       \"      <td>0.510000</td>\\n\",\n       \"      <td>5.670000</td>\\n\",\n       \"      <td>18.860000</td>\\n\",\n       \"      <td>0.120000</td>\\n\",\n       \"      <td>0.600000</td>\\n\",\n       \"      <td>0.140000</td>\\n\",\n       \"      <td>81.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>50%</th>\\n\",\n       \"      <td>48.570000</td>\\n\",\n       \"      <td>95.680000</td>\\n\",\n       \"      <td>9.890000</td>\\n\",\n       \"      <td>21.690000</td>\\n\",\n       \"      <td>23.520000</td>\\n\",\n       \"      <td>15.850000</td>\\n\",\n       \"      <td>0.890000</td>\\n\",\n       \"      <td>9.160000</td>\\n\",\n       \"      <td>30.840000</td>\\n\",\n       \"      <td>1.070000</td>\\n\",\n       \"      <td>2.970000</td>\\n\",\n       \"      <td>0.980000</td>\\n\",\n       \"      <td>118.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>75%</th>\\n\",\n       \"      <td>80.590000</td>\\n\",\n       \"      <td>149.745000</td>\\n\",\n       \"      <td>19.950000</td>\\n\",\n       \"      <td>37.620000</td>\\n\",\n       \"      <td>40.127500</td>\\n\",\n       \"      <td>30.020000</td>\\n\",\n       \"      <td>1.450000</td>\\n\",\n       \"      <td>15.220000</td>\\n\",\n       \"      <td>45.570000</td>\\n\",\n       \"      <td>3.080000</td>\\n\",\n       \"      <td>9.150000</td>\\n\",\n       \"      <td>3.350000</td>\\n\",\n       \"      <td>208.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>max</th>\\n\",\n       \"      <td>949.990000</td>\\n\",\n       \"      <td>1000.000000</td>\\n\",\n       \"      <td>390.680000</td>\\n\",\n       \"      <td>362.210000</td>\\n\",\n       \"      <td>467.630000</td>\\n\",\n       \"      <td>352.890000</td>\\n\",\n       \"      <td>175.810000</td>\\n\",\n       \"      <td>193.860000</td>\\n\",\n       \"      <td>257.730000</td>\\n\",\n       \"      <td>455.030000</td>\\n\",\n       \"      <td>454.850000</td>\\n\",\n       \"      <td>170.370000</td>\\n\",\n       \"      <td>2049.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"              PM2.5          PM10            NO           NO2           NOx  \\\\\\n\",\n       \"count  24933.000000  18391.000000  25949.000000  25946.000000  25346.000000   \\n\",\n       \"mean      67.450578    118.127103     17.574730     28.560659     32.309123   \\n\",\n       \"std       64.661449     90.605110     22.785846     24.474746     31.646011   \\n\",\n       \"min        0.040000      0.010000      0.020000      0.010000      0.000000   \\n\",\n       \"25%       28.820000     56.255000      5.630000     11.750000     12.820000   \\n\",\n       \"50%       48.570000     95.680000      9.890000     21.690000     23.520000   \\n\",\n       \"75%       80.590000    149.745000     19.950000     37.620000     40.127500   \\n\",\n       \"max      949.990000   1000.000000    390.680000    362.210000    467.630000   \\n\",\n       \"\\n\",\n       \"                NH3            CO           SO2            O3       Benzene  \\\\\\n\",\n       \"count  19203.000000  27472.000000  25677.000000  25509.000000  23908.000000   \\n\",\n       \"mean      23.483476      2.248598     14.531977     34.491430      3.280840   \\n\",\n       \"std       25.684275      6.962884     18.133775     21.694928     15.811136   \\n\",\n       \"min        0.010000      0.000000      0.010000      0.010000      0.000000   \\n\",\n       \"25%        8.580000      0.510000      5.670000     18.860000      0.120000   \\n\",\n       \"50%       15.850000      0.890000      9.160000     30.840000      1.070000   \\n\",\n       \"75%       30.020000      1.450000     15.220000     45.570000      3.080000   \\n\",\n       \"max      352.890000    175.810000    193.860000    257.730000    455.030000   \\n\",\n       \"\\n\",\n       \"            Toluene        Xylene           AQI  \\n\",\n       \"count  21490.000000  11422.000000  24850.000000  \\n\",\n       \"mean       8.700972      3.070128    166.463581  \\n\",\n       \"std       19.969164      6.323247    140.696585  \\n\",\n       \"min        0.000000      0.000000     13.000000  \\n\",\n       \"25%        0.600000      0.140000     81.000000  \\n\",\n       \"50%        2.970000      0.980000    118.000000  \\n\",\n       \"75%        9.150000      3.350000    208.000000  \\n\",\n       \"max      454.850000    170.370000   2049.000000  \"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.describe()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"<class 'pandas.core.frame.DataFrame'>\\n\",\n      \"RangeIndex: 29531 entries, 0 to 29530\\n\",\n      \"Data columns (total 16 columns):\\n\",\n      \" #   Column      Non-Null Count  Dtype  \\n\",\n      \"---  ------      --------------  -----  \\n\",\n      \" 0   City        29531 non-null  object \\n\",\n      \" 1   Date        29531 non-null  object \\n\",\n      \" 2   PM2.5       24933 non-null  float64\\n\",\n      \" 3   PM10        18391 non-null  float64\\n\",\n      \" 4   NO          25949 non-null  float64\\n\",\n      \" 5   NO2         25946 non-null  float64\\n\",\n      \" 6   NOx         25346 non-null  float64\\n\",\n      \" 7   NH3         19203 non-null  float64\\n\",\n      \" 8   CO          27472 non-null  float64\\n\",\n      \" 9   SO2         25677 non-null  float64\\n\",\n      \" 10  O3          25509 non-null  float64\\n\",\n      \" 11  Benzene     23908 non-null  float64\\n\",\n      \" 12  Toluene     21490 non-null  float64\\n\",\n      \" 13  Xylene      11422 non-null  float64\\n\",\n      \" 14  AQI         24850 non-null  float64\\n\",\n      \" 15  AQI_Bucket  24850 non-null  object \\n\",\n      \"dtypes: float64(13), object(3)\\n\",\n      \"memory usage: 3.6+ MB\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"df.info()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"City              0\\n\",\n       \"Date              0\\n\",\n       \"PM2.5          4598\\n\",\n       \"PM10          11140\\n\",\n       \"NO             3582\\n\",\n       \"NO2            3585\\n\",\n       \"NOx            4185\\n\",\n       \"NH3           10328\\n\",\n       \"CO             2059\\n\",\n       \"SO2            3854\\n\",\n       \"O3             4022\\n\",\n       \"Benzene        5623\\n\",\n       \"Toluene        8041\\n\",\n       \"Xylene        18109\\n\",\n       \"AQI            4681\\n\",\n       \"AQI_Bucket     4681\\n\",\n       \"dtype: int64\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.isnull().sum()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"mis_val = df.isnull().sum()\\n\",\n    \"        \\n\",\n    \"# Percentage of missing values\\n\",\n    \"mis_val_percent = 100 * df.isnull().sum() / len(df)\\n\",\n    \"\\n\",\n    \"# Make a table with the results\\n\",\n    \"mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\\n\",\n    \"\\n\",\n    \"# Rename the columns\\n\",\n    \"mis_val_table_ren_columns = mis_val_table.rename(\\n\",\n    \"columns = {0 : 'Missing Values', 1 : '% of Total Values'})\\n\",\n    \"\\n\",\n    \"# Sort the table by percentage of missing descending\\n\",\n    \"mis_val_table_ren_columns = mis_val_table_ren_columns[\\n\",\n    \"    mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\\n\",\n    \"'% of Total Values', ascending=False).round(1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Missing Values</th>\\n\",\n       \"      <th>% of Total Values</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <td>18109</td>\\n\",\n       \"      <td>61.3</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <td>11140</td>\\n\",\n       \"      <td>37.7</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <td>10328</td>\\n\",\n       \"      <td>35.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <td>8041</td>\\n\",\n       \"      <td>27.2</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <td>5623</td>\\n\",\n       \"      <td>19.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"      <td>4681</td>\\n\",\n       \"      <td>15.9</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>AQI_Bucket</th>\\n\",\n       \"      <td>4681</td>\\n\",\n       \"      <td>15.9</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <td>4598</td>\\n\",\n       \"      <td>15.6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <td>4185</td>\\n\",\n       \"      <td>14.2</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <td>4022</td>\\n\",\n       \"      <td>13.6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <td>3854</td>\\n\",\n       \"      <td>13.1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <td>3585</td>\\n\",\n       \"      <td>12.1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <td>3582</td>\\n\",\n       \"      <td>12.1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <td>2059</td>\\n\",\n       \"      <td>7.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"            Missing Values  % of Total Values\\n\",\n       \"Xylene               18109               61.3\\n\",\n       \"PM10                 11140               37.7\\n\",\n       \"NH3                  10328               35.0\\n\",\n       \"Toluene               8041               27.2\\n\",\n       \"Benzene               5623               19.0\\n\",\n       \"AQI                   4681               15.9\\n\",\n       \"AQI_Bucket            4681               15.9\\n\",\n       \"PM2.5                 4598               15.6\\n\",\n       \"NOx                   4185               14.2\\n\",\n       \"O3                    4022               13.6\\n\",\n       \"SO2                   3854               13.1\\n\",\n       \"NO2                   3585               12.1\\n\",\n       \"NO                    3582               12.1\\n\",\n       \"CO                    2059                7.0\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"mis_val_table_ren_columns\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Lot of data missing in certain columns, so we need to impute. Handling missing values in subsequent cells using Linear Interpolation\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df.interpolate(limit_direction='both', inplace=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"      <th>AQI_Bucket</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-01</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>133.36</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-02</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>34.06</td>\\n\",\n       \"      <td>3.68</td>\\n\",\n       \"      <td>5.50</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-03</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>30.70</td>\\n\",\n       \"      <td>6.80</td>\\n\",\n       \"      <td>16.40</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-04</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>36.08</td>\\n\",\n       \"      <td>4.43</td>\\n\",\n       \"      <td>10.14</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-05</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>39.31</td>\\n\",\n       \"      <td>7.01</td>\\n\",\n       \"      <td>18.89</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>95</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-06</td>\\n\",\n       \"      <td>120.96</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>4.23</td>\\n\",\n       \"      <td>20.86</td>\\n\",\n       \"      <td>25.02</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>4.23</td>\\n\",\n       \"      <td>35.54</td>\\n\",\n       \"      <td>35.66</td>\\n\",\n       \"      <td>6.05</td>\\n\",\n       \"      <td>15.85</td>\\n\",\n       \"      <td>1.68</td>\\n\",\n       \"      <td>303.0</td>\\n\",\n       \"      <td>Very Poor</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>96</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-07</td>\\n\",\n       \"      <td>138.63</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>5.65</td>\\n\",\n       \"      <td>25.47</td>\\n\",\n       \"      <td>30.67</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>5.65</td>\\n\",\n       \"      <td>87.43</td>\\n\",\n       \"      <td>29.77</td>\\n\",\n       \"      <td>11.25</td>\\n\",\n       \"      <td>24.67</td>\\n\",\n       \"      <td>3.12</td>\\n\",\n       \"      <td>314.0</td>\\n\",\n       \"      <td>Very Poor</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>97</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-08</td>\\n\",\n       \"      <td>144.36</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>15.82</td>\\n\",\n       \"      <td>30.69</td>\\n\",\n       \"      <td>46.10</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>15.82</td>\\n\",\n       \"      <td>66.39</td>\\n\",\n       \"      <td>27.34</td>\\n\",\n       \"      <td>17.22</td>\\n\",\n       \"      <td>49.56</td>\\n\",\n       \"      <td>7.71</td>\\n\",\n       \"      <td>378.0</td>\\n\",\n       \"      <td>Very Poor</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>98</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-09</td>\\n\",\n       \"      <td>85.03</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>3.30</td>\\n\",\n       \"      <td>26.70</td>\\n\",\n       \"      <td>27.41</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>3.30</td>\\n\",\n       \"      <td>59.16</td>\\n\",\n       \"      <td>35.89</td>\\n\",\n       \"      <td>7.58</td>\\n\",\n       \"      <td>29.19</td>\\n\",\n       \"      <td>4.08</td>\\n\",\n       \"      <td>415.0</td>\\n\",\n       \"      <td>Severe</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>99</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-04-10</td>\\n\",\n       \"      <td>134.60</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>5.90</td>\\n\",\n       \"      <td>26.27</td>\\n\",\n       \"      <td>28.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>5.90</td>\\n\",\n       \"      <td>34.53</td>\\n\",\n       \"      <td>7.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>270.5</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>100 rows \u00d7 16 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         City        Date   PM2.5    PM10     NO    NO2    NOx    NH3     CO  \\\\\\n\",\n       \"0   Ahmedabad  2015-01-01   73.24  141.54   0.92  18.22  17.15  26.64   0.92   \\n\",\n       \"1   Ahmedabad  2015-01-02   73.24  141.54   0.97  15.69  16.46  26.64   0.97   \\n\",\n       \"2   Ahmedabad  2015-01-03   73.24  141.54  17.40  19.30  29.70  26.64  17.40   \\n\",\n       \"3   Ahmedabad  2015-01-04   73.24  141.54   1.70  18.48  17.97  26.64   1.70   \\n\",\n       \"4   Ahmedabad  2015-01-05   73.24  141.54  22.10  21.42  37.76  26.64  22.10   \\n\",\n       \"..        ...         ...     ...     ...    ...    ...    ...    ...    ...   \\n\",\n       \"95  Ahmedabad  2015-04-06  120.96  141.54   4.23  20.86  25.02  26.64   4.23   \\n\",\n       \"96  Ahmedabad  2015-04-07  138.63  141.54   5.65  25.47  30.67  26.64   5.65   \\n\",\n       \"97  Ahmedabad  2015-04-08  144.36  141.54  15.82  30.69  46.10  26.64  15.82   \\n\",\n       \"98  Ahmedabad  2015-04-09   85.03  141.54   3.30  26.70  27.41  26.64   3.30   \\n\",\n       \"99  Ahmedabad  2015-04-10  134.60  141.54   5.90  26.27  28.70  26.64   5.90   \\n\",\n       \"\\n\",\n       \"      SO2      O3  Benzene  Toluene  Xylene    AQI AQI_Bucket  \\n\",\n       \"0   27.64  133.36     0.00     0.02    0.00  209.0        NaN  \\n\",\n       \"1   24.55   34.06     3.68     5.50    3.77  209.0        NaN  \\n\",\n       \"2   29.07   30.70     6.80    16.40    2.25  209.0        NaN  \\n\",\n       \"3   18.59   36.08     4.43    10.14    1.00  209.0        NaN  \\n\",\n       \"4   39.33   39.31     7.01    18.89    2.78  209.0        NaN  \\n\",\n       \"..    ...     ...      ...      ...     ...    ...        ...  \\n\",\n       \"95  35.54   35.66     6.05    15.85    1.68  303.0  Very Poor  \\n\",\n       \"96  87.43   29.77    11.25    24.67    3.12  314.0  Very Poor  \\n\",\n       \"97  66.39   27.34    17.22    49.56    7.71  378.0  Very Poor  \\n\",\n       \"98  59.16   35.89     7.58    29.19    4.08  415.0     Severe  \\n\",\n       \"99  34.53    7.00     0.00     0.00    0.00  270.5        NaN  \\n\",\n       \"\\n\",\n       \"[100 rows x 16 columns]\"\n      ]\n     },\n     \"execution_count\": 11,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.head(100)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df['Vehicular Pollution'] = df['PM2.5'] + df['PM10'] + df['NO'] + df['NO2'] + df['NOx'] + df['NH3'] + df['CO']\\n\",\n    \"df['Industrial Pollution'] = df['SO2']+df['O3']+df['Benzene']+df['Toluene']+df['Xylene']\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"      <th>AQI_Bucket</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-01</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>133.36</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>278.63</td>\\n\",\n       \"      <td>161.02</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-02</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>34.06</td>\\n\",\n       \"      <td>3.68</td>\\n\",\n       \"      <td>5.50</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>275.51</td>\\n\",\n       \"      <td>71.56</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-03</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>30.70</td>\\n\",\n       \"      <td>6.80</td>\\n\",\n       \"      <td>16.40</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>325.22</td>\\n\",\n       \"      <td>85.22</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-04</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>36.08</td>\\n\",\n       \"      <td>4.43</td>\\n\",\n       \"      <td>10.14</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>281.27</td>\\n\",\n       \"      <td>70.24</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-05</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>39.31</td>\\n\",\n       \"      <td>7.01</td>\\n\",\n       \"      <td>18.89</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>344.80</td>\\n\",\n       \"      <td>107.32</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"        City        Date  PM2.5    PM10     NO    NO2    NOx    NH3     CO  \\\\\\n\",\n       \"0  Ahmedabad  2015-01-01  73.24  141.54   0.92  18.22  17.15  26.64   0.92   \\n\",\n       \"1  Ahmedabad  2015-01-02  73.24  141.54   0.97  15.69  16.46  26.64   0.97   \\n\",\n       \"2  Ahmedabad  2015-01-03  73.24  141.54  17.40  19.30  29.70  26.64  17.40   \\n\",\n       \"3  Ahmedabad  2015-01-04  73.24  141.54   1.70  18.48  17.97  26.64   1.70   \\n\",\n       \"4  Ahmedabad  2015-01-05  73.24  141.54  22.10  21.42  37.76  26.64  22.10   \\n\",\n       \"\\n\",\n       \"     SO2      O3  Benzene  Toluene  Xylene    AQI AQI_Bucket  \\\\\\n\",\n       \"0  27.64  133.36     0.00     0.02    0.00  209.0        NaN   \\n\",\n       \"1  24.55   34.06     3.68     5.50    3.77  209.0        NaN   \\n\",\n       \"2  29.07   30.70     6.80    16.40    2.25  209.0        NaN   \\n\",\n       \"3  18.59   36.08     4.43    10.14    1.00  209.0        NaN   \\n\",\n       \"4  39.33   39.31     7.01    18.89    2.78  209.0        NaN   \\n\",\n       \"\\n\",\n       \"   Vehicular Pollution  Industrial Pollution  \\n\",\n       \"0               278.63                161.02  \\n\",\n       \"1               275.51                 71.56  \\n\",\n       \"2               325.22                 85.22  \\n\",\n       \"3               281.27                 70.24  \\n\",\n       \"4               344.80                107.32  \"\n      ]\n     },\n     \"execution_count\": 13,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"C:\\\\Users\\\\techi\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_4260\\\\666924950.py:10: SettingWithCopyWarning: \\n\",\n      \"A value is trying to be set on a copy of a slice from a DataFrame\\n\",\n      \"\\n\",\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\n      \"  df['AQI_Bucket'][ind] = 'Poor'\\n\",\n      \"C:\\\\Users\\\\techi\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_4260\\\\666924950.py:12: SettingWithCopyWarning: \\n\",\n      \"A value is trying to be set on a copy of a slice from a DataFrame\\n\",\n      \"\\n\",\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\n      \"  df['AQI_Bucket'][ind] = 'Very Poor'\\n\",\n      \"C:\\\\Users\\\\techi\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_4260\\\\666924950.py:14: SettingWithCopyWarning: \\n\",\n      \"A value is trying to be set on a copy of a slice from a DataFrame\\n\",\n      \"\\n\",\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\n      \"  df['AQI_Bucket'][ind] = 'Severe'\\n\",\n      \"C:\\\\Users\\\\techi\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_4260\\\\666924950.py:8: SettingWithCopyWarning: \\n\",\n      \"A value is trying to be set on a copy of a slice from a DataFrame\\n\",\n      \"\\n\",\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\n      \"  df['AQI_Bucket'][ind] = 'Moderate'\\n\",\n      \"C:\\\\Users\\\\techi\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_4260\\\\666924950.py:6: SettingWithCopyWarning: \\n\",\n      \"A value is trying to be set on a copy of a slice from a DataFrame\\n\",\n      \"\\n\",\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\n      \"  df['AQI_Bucket'][ind] = 'Satisfactory'\\n\",\n      \"C:\\\\Users\\\\techi\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_4260\\\\666924950.py:4: SettingWithCopyWarning: \\n\",\n      \"A value is trying to be set on a copy of a slice from a DataFrame\\n\",\n      \"\\n\",\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\n      \"  df['AQI_Bucket'][ind] = 'Good'\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"for ind in df.index:\\n\",\n    \"\\n\",\n    \"    if (df['AQI'][ind] >= 0 and df['AQI'][ind] <= 50):\\n\",\n    \"        df['AQI_Bucket'][ind] = 'Good'\\n\",\n    \"    elif (df['AQI'][ind] >= 51 and df['AQI'][ind] <= 100):\\n\",\n    \"        df['AQI_Bucket'][ind] = 'Satisfactory'\\n\",\n    \"    elif (df['AQI'][ind] >= 101 and df['AQI'][ind] <= 200):\\n\",\n    \"        df['AQI_Bucket'][ind] = 'Moderate'\\n\",\n    \"    elif (df['AQI'][ind] >= 201 and df['AQI'][ind] <= 300):\\n\",\n    \"        df['AQI_Bucket'][ind] = 'Poor'\\n\",\n    \"    elif (df['AQI'][ind] >= 301 and df['AQI'][ind] <= 400):\\n\",\n    \"        df['AQI_Bucket'][ind] = 'Very Poor'\\n\",\n    \"    else:\\n\",\n    \"        df['AQI_Bucket'][ind] = 'Severe'\\n\",\n    \"    \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"      <th>AQI_Bucket</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-01</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>133.36</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>278.63</td>\\n\",\n       \"      <td>161.02</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-02</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>34.06</td>\\n\",\n       \"      <td>3.68</td>\\n\",\n       \"      <td>5.50</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>275.51</td>\\n\",\n       \"      <td>71.56</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-03</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>30.70</td>\\n\",\n       \"      <td>6.80</td>\\n\",\n       \"      <td>16.40</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>325.22</td>\\n\",\n       \"      <td>85.22</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-04</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>36.08</td>\\n\",\n       \"      <td>4.43</td>\\n\",\n       \"      <td>10.14</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>281.27</td>\\n\",\n       \"      <td>70.24</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-05</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>39.31</td>\\n\",\n       \"      <td>7.01</td>\\n\",\n       \"      <td>18.89</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>344.80</td>\\n\",\n       \"      <td>107.32</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"        City        Date  PM2.5    PM10     NO    NO2    NOx    NH3     CO  \\\\\\n\",\n       \"0  Ahmedabad  2015-01-01  73.24  141.54   0.92  18.22  17.15  26.64   0.92   \\n\",\n       \"1  Ahmedabad  2015-01-02  73.24  141.54   0.97  15.69  16.46  26.64   0.97   \\n\",\n       \"2  Ahmedabad  2015-01-03  73.24  141.54  17.40  19.30  29.70  26.64  17.40   \\n\",\n       \"3  Ahmedabad  2015-01-04  73.24  141.54   1.70  18.48  17.97  26.64   1.70   \\n\",\n       \"4  Ahmedabad  2015-01-05  73.24  141.54  22.10  21.42  37.76  26.64  22.10   \\n\",\n       \"\\n\",\n       \"     SO2      O3  Benzene  Toluene  Xylene    AQI AQI_Bucket  \\\\\\n\",\n       \"0  27.64  133.36     0.00     0.02    0.00  209.0       Poor   \\n\",\n       \"1  24.55   34.06     3.68     5.50    3.77  209.0       Poor   \\n\",\n       \"2  29.07   30.70     6.80    16.40    2.25  209.0       Poor   \\n\",\n       \"3  18.59   36.08     4.43    10.14    1.00  209.0       Poor   \\n\",\n       \"4  39.33   39.31     7.01    18.89    2.78  209.0       Poor   \\n\",\n       \"\\n\",\n       \"   Vehicular Pollution  Industrial Pollution  \\n\",\n       \"0               278.63                161.02  \\n\",\n       \"1               275.51                 71.56  \\n\",\n       \"2               325.22                 85.22  \\n\",\n       \"3               281.27                 70.24  \\n\",\n       \"4               344.80                107.32  \"\n      ]\n     },\n     \"execution_count\": 15,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"City                    0\\n\",\n       \"Date                    0\\n\",\n       \"PM2.5                   0\\n\",\n       \"PM10                    0\\n\",\n       \"NO                      0\\n\",\n       \"NO2                     0\\n\",\n       \"NOx                     0\\n\",\n       \"NH3                     0\\n\",\n       \"CO                      0\\n\",\n       \"SO2                     0\\n\",\n       \"O3                      0\\n\",\n       \"Benzene                 0\\n\",\n       \"Toluene                 0\\n\",\n       \"Xylene                  0\\n\",\n       \"AQI                     0\\n\",\n       \"AQI_Bucket              0\\n\",\n       \"Vehicular Pollution     0\\n\",\n       \"Industrial Pollution    0\\n\",\n       \"dtype: int64\"\n      ]\n     },\n     \"execution_count\": 16,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.isnull().sum()\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Feature Engineering:\\n\",\n    \"\\n\",\n    \"We have already created Vehicular and Industrial pollution features. We will further create Organic, Inorganic, and Particulate Matter as features by combining already existing columns\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"      <th>AQI_Bucket</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"      <th>Organic Pollutants</th>\\n\",\n       \"      <th>Inorganic Pollutants</th>\\n\",\n       \"      <th>Particulate Matter</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-01</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>278.63</td>\\n\",\n       \"      <td>161.02</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>224.85</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-02</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>3.68</td>\\n\",\n       \"      <td>5.50</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>275.51</td>\\n\",\n       \"      <td>71.56</td>\\n\",\n       \"      <td>12.95</td>\\n\",\n       \"      <td>119.34</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-03</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>6.80</td>\\n\",\n       \"      <td>16.40</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>325.22</td>\\n\",\n       \"      <td>85.22</td>\\n\",\n       \"      <td>25.45</td>\\n\",\n       \"      <td>170.21</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-04</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>4.43</td>\\n\",\n       \"      <td>10.14</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>281.27</td>\\n\",\n       \"      <td>70.24</td>\\n\",\n       \"      <td>15.57</td>\\n\",\n       \"      <td>121.16</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2015-01-05</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>7.01</td>\\n\",\n       \"      <td>18.89</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>344.80</td>\\n\",\n       \"      <td>107.32</td>\\n\",\n       \"      <td>28.68</td>\\n\",\n       \"      <td>208.66</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>5 rows \u00d7 21 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"        City        Date  PM2.5    PM10     NO    NO2    NOx    NH3     CO  \\\\\\n\",\n       \"0  Ahmedabad  2015-01-01  73.24  141.54   0.92  18.22  17.15  26.64   0.92   \\n\",\n       \"1  Ahmedabad  2015-01-02  73.24  141.54   0.97  15.69  16.46  26.64   0.97   \\n\",\n       \"2  Ahmedabad  2015-01-03  73.24  141.54  17.40  19.30  29.70  26.64  17.40   \\n\",\n       \"3  Ahmedabad  2015-01-04  73.24  141.54   1.70  18.48  17.97  26.64   1.70   \\n\",\n       \"4  Ahmedabad  2015-01-05  73.24  141.54  22.10  21.42  37.76  26.64  22.10   \\n\",\n       \"\\n\",\n       \"     SO2  ...  Benzene  Toluene  Xylene    AQI  AQI_Bucket  \\\\\\n\",\n       \"0  27.64  ...     0.00     0.02    0.00  209.0        Poor   \\n\",\n       \"1  24.55  ...     3.68     5.50    3.77  209.0        Poor   \\n\",\n       \"2  29.07  ...     6.80    16.40    2.25  209.0        Poor   \\n\",\n       \"3  18.59  ...     4.43    10.14    1.00  209.0        Poor   \\n\",\n       \"4  39.33  ...     7.01    18.89    2.78  209.0        Poor   \\n\",\n       \"\\n\",\n       \"  Vehicular Pollution  Industrial Pollution  Organic Pollutants  \\\\\\n\",\n       \"0              278.63                161.02                0.02   \\n\",\n       \"1              275.51                 71.56               12.95   \\n\",\n       \"2              325.22                 85.22               25.45   \\n\",\n       \"3              281.27                 70.24               15.57   \\n\",\n       \"4              344.80                107.32               28.68   \\n\",\n       \"\\n\",\n       \"   Inorganic Pollutants  Particulate Matter  \\n\",\n       \"0                224.85              214.78  \\n\",\n       \"1                119.34              214.78  \\n\",\n       \"2                170.21              214.78  \\n\",\n       \"3                121.16              214.78  \\n\",\n       \"4                208.66              214.78  \\n\",\n       \"\\n\",\n       \"[5 rows x 21 columns]\"\n      ]\n     },\n     \"execution_count\": 17,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df['Organic Pollutants'] = df['Benzene'] + df['Toluene'] + df['Xylene']\\n\",\n    \"df['Inorganic Pollutants'] = df['CO'] + df['NH3'] + df['NO'] + df['NO2'] + df['NOx'] + df['SO2']+df['O3']\\n\",\n    \"df['Particulate Matter'] = df['PM2.5'] + df['PM10']\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Some visualization to get an idea of the most commonly observed AQI values for the cities in the dataset follows\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Aizawl</td>\\n\",\n       \"      <td>23.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Shillong</td>\\n\",\n       \"      <td>49.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Thiruvananthapuram</td>\\n\",\n       \"      <td>67.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Mumbai</td>\\n\",\n       \"      <td>74.832379</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Coimbatore</td>\\n\",\n       \"      <td>75.136364</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>Amaravati</td>\\n\",\n       \"      <td>78.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>Chandigarh</td>\\n\",\n       \"      <td>82.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>Bengaluru</td>\\n\",\n       \"      <td>86.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8</th>\\n\",\n       \"      <td>Kolkata</td>\\n\",\n       \"      <td>94.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>9</th>\\n\",\n       \"      <td>Ernakulam</td>\\n\",\n       \"      <td>95.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>10</th>\\n\",\n       \"      <td>Guwahati</td>\\n\",\n       \"      <td>97.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>11</th>\\n\",\n       \"      <td>Kochi</td>\\n\",\n       \"      <td>98.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12</th>\\n\",\n       \"      <td>Amritsar</td>\\n\",\n       \"      <td>101.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>13</th>\\n\",\n       \"      <td>Chennai</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>14</th>\\n\",\n       \"      <td>Hyderabad</td>\\n\",\n       \"      <td>103.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>15</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>112.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>16</th>\\n\",\n       \"      <td>Bhopal</td>\\n\",\n       \"      <td>118.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>17</th>\\n\",\n       \"      <td>Jaipur</td>\\n\",\n       \"      <td>121.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>18</th>\\n\",\n       \"      <td>Jorapokhar</td>\\n\",\n       \"      <td>122.769231</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>19</th>\\n\",\n       \"      <td>Talcher</td>\\n\",\n       \"      <td>124.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>20</th>\\n\",\n       \"      <td>Brajrajnagar</td>\\n\",\n       \"      <td>124.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>21</th>\\n\",\n       \"      <td>Patna</td>\\n\",\n       \"      <td>196.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>22</th>\\n\",\n       \"      <td>Lucknow</td>\\n\",\n       \"      <td>201.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>23</th>\\n\",\n       \"      <td>Gurugram</td>\\n\",\n       \"      <td>205.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>24</th>\\n\",\n       \"      <td>Delhi</td>\\n\",\n       \"      <td>257.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>316.527897</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                  City         AQI\\n\",\n       \"0               Aizawl   23.000000\\n\",\n       \"1             Shillong   49.000000\\n\",\n       \"2   Thiruvananthapuram   67.000000\\n\",\n       \"3               Mumbai   74.832379\\n\",\n       \"4           Coimbatore   75.136364\\n\",\n       \"5            Amaravati   78.000000\\n\",\n       \"6           Chandigarh   82.000000\\n\",\n       \"7            Bengaluru   86.000000\\n\",\n       \"8              Kolkata   94.000000\\n\",\n       \"9            Ernakulam   95.000000\\n\",\n       \"10            Guwahati   97.000000\\n\",\n       \"11               Kochi   98.000000\\n\",\n       \"12            Amritsar  101.000000\\n\",\n       \"13             Chennai  102.000000\\n\",\n       \"14           Hyderabad  103.000000\\n\",\n       \"15       Visakhapatnam  112.000000\\n\",\n       \"16              Bhopal  118.000000\\n\",\n       \"17              Jaipur  121.000000\\n\",\n       \"18          Jorapokhar  122.769231\\n\",\n       \"19             Talcher  124.000000\\n\",\n       \"20        Brajrajnagar  124.000000\\n\",\n       \"21               Patna  196.000000\\n\",\n       \"22             Lucknow  201.000000\\n\",\n       \"23            Gurugram  205.000000\\n\",\n       \"24               Delhi  257.000000\\n\",\n       \"25           Ahmedabad  316.527897\"\n      ]\n     },\n     \"execution_count\": 18,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"city_median_AQI = df[['City', 'AQI']].groupby(['City']).median().sort_values(['AQI']).reset_index()\\n\",\n    \"city_median_AQI\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"%matplotlib inline\\n\",\n    \"import seaborn as sns\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1500x500 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.figure(figsize=(15,5))\\n\",\n    \"sns.barplot(x='City', y='AQI', data=city_median_AQI).set(title='City vs Median AQI')\\n\",\n    \"plt.xticks(rotation=90)\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datetime as dt\\n\",\n    \"df['Date'] = pd.to_datetime(df['Date'])\\n\",\n    \"df['year'] = df['Date'].dt.year\\n\",\n    \"df['month'] =df['Date'].dt.month\\n\",\n    \"df.drop('Date',axis=1,inplace=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"city_median_AQI_per_year = df[['City','AQI','year']].groupby(['City','year']).median().sort_values(['AQI']).reset_index()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Aizawl</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>23.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Shillong</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>44.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Shillong</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>49.883721</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Amaravati</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>54.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Talcher</td>\\n\",\n       \"      <td>2017</td>\\n\",\n       \"      <td>60.578431</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>98</th>\\n\",\n       \"      <td>Delhi</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>303.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>99</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2016</td>\\n\",\n       \"      <td>306.098712</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>100</th>\\n\",\n       \"      <td>Gurugram</td>\\n\",\n       \"      <td>2017</td>\\n\",\n       \"      <td>314.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>101</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>455.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>102</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2018</td>\\n\",\n       \"      <td>509.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>103 rows \u00d7 3 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"          City  year         AQI\\n\",\n       \"0       Aizawl  2020   23.000000\\n\",\n       \"1     Shillong  2019   44.000000\\n\",\n       \"2     Shillong  2020   49.883721\\n\",\n       \"3    Amaravati  2020   54.000000\\n\",\n       \"4      Talcher  2017   60.578431\\n\",\n       \"..         ...   ...         ...\\n\",\n       \"98       Delhi  2015  303.000000\\n\",\n       \"99   Ahmedabad  2016  306.098712\\n\",\n       \"100   Gurugram  2017  314.000000\\n\",\n       \"101  Ahmedabad  2019  455.000000\\n\",\n       \"102  Ahmedabad  2018  509.000000\\n\",\n       \"\\n\",\n       \"[103 rows x 3 columns]\"\n      ]\n     },\n     \"execution_count\": 23,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"city_median_AQI_per_year\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAABTcAAAOuCAYAAADSDSMSAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8o6BhiAAAACXBIWXMAAA9hAAAPYQGoP6dpAADZIUlEQVR4nOzdeZiVdcE//vfIjg4gKjOSophkKpaGSoIBLpB7RuZTtKipmSxKrilPCpWo+IgUuGQqqIi2qKktJKaOj5KJmIn6aFnkkkxYIqLseH5/+ON8HRkUBGbmltfrus51eT7355zzvo/DLO/zue+7olQqlQIAAAAAUDCbNHYAAAAAAIAPQrkJAAAAABSSchMAAAAAKCTlJgAAAABQSMpNAAAAAKCQlJsAAAAAQCEpNwEAAACAQlJuAgAAAACF1LyxAwAAAADAh8GKFSuybNmyxo5ReC1atEizZs3WaK5yEwAAAADWQalUSm1tbV577bXGjvKh0aFDh1RXV6eiouI95yk3AQAAAGAdrCw2O3XqlLZt275vIcfqlUqlLFy4MHPnzk2SbL311u85X7kJAAAAAB/QihUrysXmFlts0dhxPhTatGmTJJk7d246der0noeou6AQAAAAAHxAK8+x2bZt20ZO8uGy8v18v3OYKjcBAAAAYB05FH39WtP3U7kJAAAAABSSchMAAAAAKCQXFAIAAACADaDHmTc02GvNvOTrazX/wgsvzG233ZZnnnkmbdq0Sa9evXLxxRdnp512Ks8plUoZNWpUrr766sybNy89e/bM5Zdfnl133bU85+qrr86UKVPy2GOPZcGCBZk3b146dOhQ57W23377PP/883XGzj777Fx00UVrv6PvYuUmAAAAAGxkampqMmTIkDz88MOZNm1ali9fngEDBuTNN98szxkzZkzGjh2bCRMmZMaMGamurk7//v2zYMGC8pyFCxfmoIMOyrnnnvuer/e9730vc+bMKd/++7//e73sh5WbAAAAALCRmTp1ap37EydOTKdOnTJz5sz06dMnpVIp48aNy4gRIzJw4MAkyfXXX5+qqqpMmTIlJ510UpJk+PDhSZL777//PV+vsrIy1dXV630/rNwEAAAAgI3c/PnzkyQdO3ZMksyePTu1tbUZMGBAeU6rVq3St2/fTJ8+fa2f/+KLL84WW2yR3XffPRdccEGWLl26XnJbuQkAAAAAG7FSqZTTTjst++67b7p3754kqa2tTZJUVVXVmVtVVbXK+TPfz6mnnppPfepT2XzzzfPII4/knHPOyezZs3PNNdesc3blJgAAAABsxIYOHZonnngiDz744CrbKioq6twvlUqrjL2fb3/72+X//sQnPpHNN988Rx11VHk157pwWDoAAAAAbKSGDRuWO++8M/fdd1+22Wab8vjK82OuXMG50ty5c1dZzbm2Pv3pTydJnnvuuXV6nkS5CQAAAAAbnVKplKFDh+a2227Lvffem65du9bZ3rVr11RXV2fatGnlsaVLl6ampia9evVap9f+05/+lCTZeuut1+l5EoelAwAAAMBGZ8iQIZkyZUruuOOOVFZWlldotm/fPm3atElFRUWGDx+e0aNHp1u3bunWrVtGjx6dtm3bZtCgQeXnqa2tTW1tbXkV5qxZs1JZWZkuXbqkY8eO+cMf/pCHH344++23X9q3b58ZM2bk29/+do444oh06dJlnfejolQqldb5WQAAAABgI7R48eLMnj07Xbt2TevWrRs7zhpb3XkzJ06cmGOPPTbJ26s7R40alR//+MeZN29eevbsmcsvv7x80aEkGTlyZEaNGrXa53nssccyePDgPPPMM1myZEm22267fOlLX8pZZ52Vtm3brjbfmr6vyk0AAAAA+ICKWm42dWv6vjrnJgAAAABQSMpNAAAAAKCQlJsAAAAAQCEpNwEAAACAQlJuAgAAAACFpNwEAAAAAApJuQkAAAAAFJJyEwAAAAAoJOUmAAAAAFBIyk0AAAAA2MhceOGF2WuvvVJZWZlOnTrlyCOPzLPPPltnTqlUysiRI9O5c+e0adMm/fr1y1NPPVVnztVXX51+/fqlXbt2qaioyGuvvVbv6/36179Oz54906ZNm2y55ZYZOHDgetmP5uvlWQAAAACAOl743m4N9lpdzpu1VvNramoyZMiQ7LXXXlm+fHlGjBiRAQMG5Omnn86mm26aJBkzZkzGjh2bSZMm5WMf+1h+8IMfpH///nn22WdTWVmZJFm4cGEOOuigHHTQQTnnnHPqfa1bb701J554YkaPHp39998/pVIps2atXd7VqSiVSqX18kwAAAAAsJFZvHhxZs+ena5du6Z169Z1tjXlcvPdXnnllXTq1Ck1NTXp06dPSqVSOnfunOHDh+fss89OkixZsiRVVVW5+OKLc9JJJ9V5/P3335/99tsv8+bNS4cOHcrjy5cvz/bbb59Ro0bl+OOPX+M87/W+vpPD0gEAAABgIzd//vwkSceOHZMks2fPTm1tbQYMGFCe06pVq/Tt2zfTp09f4+d97LHH8s9//jObbLJJ9thjj2y99dY5+OCDVzm8/YNSbgIAAADARqxUKuW0007Lvvvum+7duydJamtrkyRVVVV15lZVVZW3rYm///3vSZKRI0fmv//7v/OrX/0qm2++efr27ZtXX311nbMrNwEAAABgIzZ06NA88cQTufnmm1fZVlFRUed+qVRaZey9vPXWW0mSESNG5Atf+EJ69OiRiRMnpqKiIj//+c/XLXiUmwAAAACw0Ro2bFjuvPPO3Hfffdlmm23K49XV1UmyyirNuXPnrrKa871svfXWSZJddtmlPNaqVavssMMOeeGFF9YlehLlJgAAAABsdEqlUoYOHZrbbrst9957b7p27Vpne9euXVNdXZ1p06aVx5YuXZqampr06tVrjV+nR48eadWqVZ599tny2LJly/KPf/wj22233TrvR/N1fgYAAAAAoFCGDBmSKVOm5I477khlZWV5hWb79u3Tpk2bVFRUZPjw4Rk9enS6deuWbt26ZfTo0Wnbtm0GDRpUfp7a2trU1tbmueeeS5LMmjUrlZWV6dKlSzp27Jh27drlW9/6Vs4///xsu+222W677XLJJZckSb74xS+u834oNwEAAABgI3PllVcmSfr161dnfOLEiTn22GOTJGeddVYWLVqUwYMHZ968eenZs2fuvvvuVFZWludfddVVGTVqVPl+nz59VnmeSy65JM2bN8/Xvva1LFq0KD179sy9996bzTfffJ33o6JUKpXW+VkAAAAAYCO0ePHizJ49O127dk3r1q0bO86Hxpq+r865CQAAAAAUknITAAAAACgk5SYAAAAAUEjKTQAAAACgkJSbAAAAAEAhKTcBAAAAgEJSbgIAAAAAhaTcBAAAAAAKSbkJAAAAABSSchMAAAAAKKTmjR0AAAAAAD6Meo/v3WCv9dCwh9Zq/oUXXpjbbrstzzzzTNq0aZNevXrl4osvzk477VSeUyqVMmrUqFx99dWZN29eevbsmcsvvzy77rprec7VV1+dKVOm5LHHHsuCBQsyb968dOjQobz9/vvvz3777VdvhkceeSR77bXX2u3ou1i5CQAAAAAbmZqamgwZMiQPP/xwpk2bluXLl2fAgAF58803y3PGjBmTsWPHZsKECZkxY0aqq6vTv3//LFiwoDxn4cKFOeigg3LuuefW+zq9evXKnDlz6txOOOGEbL/99tlzzz3XeT+s3AQAAACAjczUqVPr3J84cWI6deqUmTNnpk+fPimVShk3blxGjBiRgQMHJkmuv/76VFVVZcqUKTnppJOSJMOHD0/y9grN+rRs2TLV1dXl+8uWLcudd96ZoUOHpqKiYp33w8pNAAAAANjIzZ8/P0nSsWPHJMns2bNTW1ubAQMGlOe0atUqffv2zfTp0z/w69x5553597//nWOPPXad8q6k3AQAAACAjVipVMppp52WfffdN927d0+S1NbWJkmqqqrqzK2qqipv+yCuvfbafPazn8222277wQO/g8PSAQAAAGAjNnTo0DzxxBN58MEHV9n27kPHS6XSBz6c/KWXXsrvfve7/OxnP/tAj6+PlZsAAAAAsJEaNmxY7rzzztx3333ZZpttyuMrz5P57lWac+fOXWU155qaOHFitthiixxxxBEfPPC7KDcBAAAAYCNTKpUydOjQ3Hbbbbn33nvTtWvXOtu7du2a6urqTJs2rTy2dOnS1NTUpFevXh/o9SZOnJivf/3radGixTrnX8lh6QAAAACwkRkyZEimTJmSO+64I5WVleUVmu3bt0+bNm1SUVGR4cOHZ/To0enWrVu6deuW0aNHp23bthk0aFD5eWpra1NbW5vnnnsuSTJr1qxUVlamS5cu5YsTJcm9996b2bNn5/jjj1+v+6HcBAAAAICNzJVXXpkk6devX53xiRMnlq9kftZZZ2XRokUZPHhw5s2bl549e+buu+9OZWVlef5VV12VUaNGle/36dNnledJ3r6QUK9evbLzzjuv1/2oKJVKpfX6jAAAAACwkVi8eHFmz56drl27pnXr1o0d50NjTd9X59wEAAAAAApJuQkAAAAAFJJyEwAAAAAoJOUmAAAAAFBIyk0AAAAAoJCUmwAAAABAISk3AQAAAIBCUm4CAAAAAIWk3AQAAAAACkm5CQAAAAAUUvPGDgAAAAAAH0Y1ffo22Gv1faBmreZfeOGFue222/LMM8+kTZs26dWrVy6++OLstNNO5TmlUimjRo3K1VdfnXnz5qVnz565/PLLs+uuu5bnXH311ZkyZUoee+yxLFiwIPPmzUuHDh3qvNZf/vKXnHnmmXnooYeydOnS7LbbbvnBD36Q/fbbb532ObFyEwAAAAA2OjU1NRkyZEgefvjhTJs2LcuXL8+AAQPy5ptvlueMGTMmY8eOzYQJEzJjxoxUV1enf//+WbBgQXnOwoULc9BBB+Xcc89d7WsdeuihWb58ee69997MnDkzu+++ew477LDU1tau835UlEql0jo/CwAAAABshBYvXpzZs2ena9euad26dZ1tTXnl5ru98sor6dSpU2pqatKnT5+USqV07tw5w4cPz9lnn50kWbJkSaqqqnLxxRfnpJNOqvP4+++/P/vtt98qKzf//e9/Z6uttsoDDzyQz3zmM0mSBQsWpF27drnnnntywAEH1Jvnvd7Xd7JyEwAAAAA2cvPnz0+SdOzYMUkye/bs1NbWZsCAAeU5rVq1St++fTN9+vQ1ft4tttgiO++8c2644Ya8+eabWb58eX784x+nqqoqPXr0WOfczrkJAAAAABuxUqmU0047Lfvuu2+6d++eJOVDxquqqurMraqqyvPPP7/Gz11RUZFp06blc5/7XCorK7PJJpukqqoqU6dOXeXcnB+ElZsAAAAAsBEbOnRonnjiidx8882rbKuoqKhzv1QqrTL2XkqlUgYPHpxOnTrlf//3f/PII4/kc5/7XA477LDMmTNnnbMrNwEAAABgIzVs2LDceeedue+++7LNNtuUx6urq5NklYv+zJ07d5XVnO/l3nvvza9+9avccsst6d27dz71qU/liiuuSJs2bXL99devc37lJgAAAABsZEqlUoYOHZrbbrst9957b7p27Vpne9euXVNdXZ1p06aVx5YuXZqampr06tVrjV9n4cKFSZJNNqlbQ26yySZ566231mEP3uacmwAAAACwkRkyZEimTJmSO+64I5WVleUVmu3bt0+bNm1SUVGR4cOHZ/To0enWrVu6deuW0aNHp23bthk0aFD5eWpra1NbW5vnnnsuSTJr1qxUVlamS5cu6dixY/bZZ59svvnmOeaYY3LeeeelTZs2+clPfpLZs2fn0EMPXef9UG4CAAAAwEbmyiuvTJL069evzvjEiRNz7LHHJknOOuusLFq0KIMHD868efPSs2fP3H333amsrCzPv+qqqzJq1Kjy/T59+tR5ni233DJTp07NiBEjsv/++2fZsmXZddddc8cdd+STn/zkOu9HRalUKq3zswAAAADARmjx4sWZPXt2unbtmtatWzd2nA+NNX1fnXMTAAAAACgk5SYAAAAAUEjKTQAAAACgkJSbAAAAAEAhKTcBAAAAgEJSbgIAAAAAhaTcBAAAAAAKSbkJAAAAABSSchMAAAAAKCTlJgAAAABQSM0bOwAAAAAAfBhNOP2uBnutoZcevlbzL7zwwtx222155pln0qZNm/Tq1SsXX3xxdtppp/KcUqmUUaNG5eqrr868efPSs2fPXH755dl1113Lc66++upMmTIljz32WBYsWJB58+alQ4cOdV7rsccey9lnn50ZM2akWbNm+cIXvpCxY8dms802W6d9TqzcBAAAAICNTk1NTYYMGZKHH34406ZNy/LlyzNgwIC8+eab5TljxozJ2LFjM2HChMyYMSPV1dXp379/FixYUJ6zcOHCHHTQQTn33HPrfZ2XX345Bx54YHbcccf88Y9/zNSpU/PUU0/l2GOPXS/7YeUmAAAAAGxkpk6dWuf+xIkT06lTp8ycOTN9+vRJqVTKuHHjMmLEiAwcODBJcv3116eqqipTpkzJSSedlCQZPnx4kuT++++v93V+9atfpUWLFrn88suzySZvr7O8/PLLs8cee+S5557LjjvuuE77YeUmAAAAAGzk5s+fnyTp2LFjkmT27Nmpra3NgAEDynNatWqVvn37Zvr06Wv8vEuWLEnLli3LxWaStGnTJkny4IMPrnNu5SYAAAAAbMRKpVJOO+207LvvvunevXuSpLa2NklSVVVVZ25VVVV525rYf//9U1tbm0suuSRLly7NvHnzyoewz5kzZ52zKzcBAAAAYCM2dOjQPPHEE7n55ptX2VZRUVHnfqlUWmXsvey66665/vrrc+mll6Zt27aprq7ODjvskKqqqjRr1mydsys3AQAAAGAjNWzYsNx555257777ss0225THq6urk2SVVZpz585dZTXn+xk0aFBqa2vzz3/+M//5z38ycuTIvPLKK+nates651duAgAAAMBGplQqZejQobntttty7733rlI0du3aNdXV1Zk2bVp5bOnSpampqUmvXr0+0GtWVVVls802y09/+tO0bt06/fv3X6d9SFwtHQAAAAA2OkOGDMmUKVNyxx13pLKysrxCs3379mnTpk0qKioyfPjwjB49Ot26dUu3bt0yevTotG3bNoMGDSo/T21tbWpra/Pcc88lSWbNmpXKysp06dKlfHGiCRMmpFevXtlss80ybdq0nHnmmbnooovSoUOHdd4P5SYAAAAAbGSuvPLKJEm/fv3qjE+cODHHHntskuSss87KokWLMnjw4MybNy89e/bM3XffncrKyvL8q666KqNGjSrf79OnzyrP88gjj+T888/PG2+8kY9//OP58Y9/nK997WvrZT8qSqVSab08EwAAAABsZBYvXpzZs2ena9euad26dWPH+dBY0/fVOTcBAAAAgEJSbgIAAAAAhaTcBAAAAAAKSbkJAAAAABSSchMAAAAAKCTlJgAAAABQSMpNAAAAAKCQlJsAAAAAQCEpNwGA9eaJJ57Icccdl65du6Z169bZbLPN8qlPfSpjxozJq6++Wp7Xr1+/9OvXr3x/4cKFGTlyZO6///6GD70OJk2alIqKilRUVNSbvVQqZccdd0xFRUWd/V0ftt9++xx77LHl+/fff/9qczSk0047LRUVFTnssMPec97DDz+cL37xi9l6663TsmXLbL311jn66KMzY8aMVeaufJ8fffTRDRUbAICCUm4CAOvFT37yk/To0SMzZszImWeemalTp+b222/PF7/4xVx11VU5/vjjy3OvuOKKXHHFFeX7CxcuzKhRoxq9mPugKisrc+21164yXlNTk7/97W+prKzc4Bk+9alP5Q9/+EM+9alPbfDXWp1ly5Zl8uTJSZKpU6fmn//8Z73zxo8fn969e+ell17KmDFjcs899+SSSy7Jiy++mE9/+tO5+uqrGzI2AAAF1ryxAwAAxfeHP/whJ598cvr3759f/vKXadWqVXlb//79c/rpp2fq1KnlsV122aUxYm4w//Vf/5Wbbropl19+edq1a1cev/baa7PPPvvk9ddf3+AZ2rVrl09/+tMb/HXeyx133JFXXnklhx56aH7961/n+uuvz7nnnltnzkMPPZThw4fnkEMOye23357mzf/fr6Nf+tKX8vnPfz6DBw/OHnvskb322quhd2GNLFy4MG3btm3sGO+rVCpl8eLFadOmTWNHAYCN1gVfParBXmvE5F+s1fwLL7wwt912W5555pm0adMmvXr1ysUXX5yddtqpPKdUKmXUqFG5+uqrM2/evPTs2TOXX355dt111yTJq6++mvPPPz933313XnzxxWy55ZY58sgj8/3vfz/t27cvP8+8efNyyimn5M4770ySHHHEERk/fnw6dOiwzvtt5SYAsM5Gjx6dioqKXH311XWKzZVatmyZI444onz/nYel/+Mf/8hWW22VJBk1alT5MO9jjz02//u//5uKiorcfPPNqzznDTfckIqKinoPY06SP//5z6moqKh3ReVvf/vbVFRUlH+5euWVV/LNb34z2267bVq1apWtttoqvXv3zj333LNG+//lL385SerknD9/fm699dZ84xvfqPcxS5cuzQ9+8IN8/OMfL7/mcccdl1deeaXOvGXLluWss85KdXV12rZtm3333TePPPLIKs9X32Hpjz76aL70pS9l++23T5s2bbL99tvny1/+cp5//vk6j1152Pd9992Xk08+OVtuuWW22GKLDBw4MC+//PIavQfJ22Vuy5YtM3HixGy77baZOHFiSqVSnTkXXnhhKioqcuWVV9YpNpOkefPm5RW9F1544Rq/7rv3Y9q0aTnuuOPSsWPHbLrppjn88MPz97//fZX599xzTw444IC0a9cubdu2Te/evfP73/++zpyRI0emoqIijz32WI466qhsvvnm+ehHP1rv6//jH/9I8+bN683+wAMPpKKiIj//+c/LY3/9618zaNCgdOrUKa1atcrOO++cyy+/vM7jFi9enNNPPz2777572rdvn44dO2afffbJHXfcscprVFRUZOjQobnqqquy8847p1WrVrn++uvX6L0DADY+NTU1GTJkSB5++OFMmzYty5cvz4ABA/Lmm2+W54wZMyZjx47NhAkTMmPGjFRXV6d///5ZsGBBkuTll1/Oyy+/nP/5n//JrFmzMmnSpEydOrXOUVtJMmjQoDz++OOZOnVqpk6dmscffzxf+9rX1st+KDcBgHWyYsWK3HvvvenRo0e23XbbtX781ltvXV7Vefzxx+cPf/hD/vCHP+S73/1uPvOZz2SPPfZYpfBJkgkTJmSvvfZa7eq+T37yk9ljjz0yceLEVbZNmjQpnTp1yiGHHJIk+drXvpZf/vKXOe+883L33XfnmmuuyYEHHpj//Oc/a7QP7dq1y1FHHZXrrruuPHbzzTdnk002yX/913+tMv+tt97K5z73uVx00UUZNGhQfv3rX+eiiy7KtGnT0q9fvyxatKg898QTT8z//M//5Otf/3ruuOOOfOELX8jAgQMzb9689831j3/8IzvttFPGjRuX3/3ud7n44oszZ86c7LXXXvn3v/+9yvwTTjghLVq0yJQpUzJmzJjcf//9+epXv7pG78FLL72Uu+++O5/73Oey1VZb5Zhjjslzzz2XBx54oDxnxYoVue+++7Lnnntmm222qfd5tt122/To0SP33HNP3nrrrTV67Xc7/vjjs8kmm2TKlCkZN25cHnnkkfTr1y+vvfZaec7kyZMzYMCAtGvXLtdff31+9rOfpWPHjvnsZz+7SsGZJAMHDsyOO+6Yn//857nqqqvqfd3tt98+RxxxRK666qqsWLGizrYJEyakc+fO+fznP58kefrpp7PXXnvlySefzKWXXppf/epXOfTQQ3PKKadk1KhR5cctWbIkr776as4444z88pe/zM0335x99903AwcOzA033LBKhl/+8pe58sorc9555+V3v/tdPvOZz3yQtxAA2AhMnTo1xx57bHbdddd88pOfzMSJE/PCCy9k5syZSd5etTlu3LiMGDEiAwcOTPfu3XP99ddn4cKFmTJlSpKke/fuufXWW3P44Yfnox/9aPbff/9ccMEFueuuu7J8+fIkyf/93/9l6tSpueaaa7LPPvtkn332yU9+8pP86le/yrPPPrvO++GwdABgnfz73//OwoUL07Vr1w/0+FatWqVHjx5Jkm222WaVQ6tPOeWUHHfccXn88cez++67J0lmzJiRGTNmvO+qtOOOOy6nnHJK/vKXv+RjH/tYkrcPibnjjjsydOjQ8srBhx56KCeccEJOPPHE8mM/97nPrdV+fOMb38h+++2Xp556Krvuumuuu+66fPGLX6z3fJs/+9nPMnXq1Nx6660ZOHBgefyTn/xk9tprr0yaNCknn3xynnnmmVx//fX59re/nTFjxiR5+zD/qqqqfOUrX3nfTEcddVSOOur/HQq1YsWKHHbYYamqqsqUKVNyyimn1Jl/0EEH5Uc/+lH5/quvvpqzzjortbW1qa6ufs/XmjhxYt56663yp/Tf+MY3csEFF+Taa69N3759k6z510rXrl3zyCOP5NVXX82WW275vvv5bnvuuWedFbu77rprevfuncsvvzwjRozIwoULc+qpp+awww7L7bffXp53yCGH5FOf+lTOPffc/PGPf6zznMccc0yd0nF1TjnllOy333656667cuSRRyZ5e0XD7bffnu9+97vlr7nTTjstlZWVefDBB8unMujfv3+WLFmSiy66KKeccko233zztG/fvk5Bv2LFihxwwAGZN29exo0bl69//et1Xv+NN97IrFmzsvnmm6/dmwYAbPTmz5+fJOnYsWOSZPbs2amtrc2AAQPKc1q1apW+fftm+vTpOemkk1b7PO3atSv/3vOHP/wh7du3T8+ePctzPv3pT6d9+/aZPn16ncPgPwgrNwGAJu3LX/5yOnXqVGf15vjx47PVVlvVuyrynb7yla+kVatWmTRpUnns5ptvzpIlS3LccceVx/bee+9MmjQpP/jBD/Lwww9n2bJla52zb9+++ehHP5rrrrsus2bNyowZM1Z7SPqvfvWrdOjQIYcffniWL19evu2+++6prq4uH1p+3333lffjnY4++uhVDumuzxtvvJGzzz47O+64Y5o3b57mzZtns802y5tvvpn/+7//W2X+O08dkCSf+MQnkmSVw9jfrVQqlQ9F79+/f5K3C8p+/frl1ltvXetzjq48lL2iomKtHrfSu9+vXr16Zbvttiu/n9OnT8+rr76aY445ps77/9Zbb+Wggw7KjBkz6hyOlSRf+MIX1ui1+/Xrl09+8pN1vl6vuuqqVFRU5Jvf/GaStw81//3vf5/Pf/7zadu2bZ0MhxxySBYvXpyHH364/Pif//zn6d27dzbbbLM0b948LVq0yLXXXlvv/8P9999fsQkArLVSqZTTTjst++67b7p3754kqa2tTZJUVVXVmVtVVVXe9m7/+c9/8v3vf79O8VlbW5tOnTqtMrdTp06rfZ61odwEANbJlltumbZt22b27Nkb5PlbtWqVk046KVOmTMlrr72WV155JT/72c9ywgkn1Ht+z3fq2LFjjjjiiNxwww3lw4QnTZqUvffeu3wS9CT56U9/mmOOOaZ8qEzHjh3z9a9/fa1+2aqoqMhxxx2XyZMn56qrrsrHPvax1R4S/K9//SuvvfZaWrZsmRYtWtS51dbWlg8ZX3lY/LtXTTZv3jxbbLHF+2YaNGhQJkyYkBNOOCG/+93v8sgjj2TGjBnZaqut6hz6vtK7n3Pl+1vf3He69957M3v27Hzxi1/M66+/ntdeey2vvfZajj766CxcuLB8LtI1/Vr5xz/+kTZt2qzRPtanvlWm1dXV5ffzX//6V5K3V7a++/2/+OKLUyqV8uqrr9Z5/NZbb73Gr3/KKafk97//fZ599tksW7YsP/nJT3LUUUeVc/3nP//J8uXLM378+FVef+WpElZ+Ddx22205+uij85GPfCSTJ0/OH/7wh3Jxvnjx4lVee21yAgCsNHTo0DzxxBP1nuv+3R84l0qlej+Efv3113PooYdml112yfnnn/+ez/Fez7O2HJYOAKyTZs2a5YADDshvf/vbvPTSS6s9l+K6OPnkk3PRRRfluuuuy+LFi7N8+fJ861vfWqPHHnfccfn5z3+eadOmpUuXLpkxY0auvPLKOnO23HLLjBs3LuPGjcsLL7yQO++8M9/5zncyd+7cOld5fz/HHntszjvvvFx11VW54IILVjtv5QV7VvfcKw9lX1nu1dbW5iMf+Uh5+/Lly9/3fKDz58/Pr371q5x//vn5zne+Ux5feQ7H9WnlIeBjx47N2LFj691+0kknpVmzZtl///3f82vlpZdeysyZM3PQQQd94Dz1ldK1tbXZcccdk6R8qPv48eNXe4X5d69QWJtfvAcNGpSzzz47l19+eT796U+ntrY2Q4YMKW/ffPPN06xZs3zta1+rM/5OKw/dnzx5crp27Zqf/vSndTIsWbKk3setjz8QAICNy7Bhw3LnnXfmgQceqPP72coPZmtra+t8gDp37txVfldasGBBDjrooGy22Wa5/fbb06JFizrPs/LD5Xd65ZVXVnmeD0K5CQCss3POOSe/+c1vcuKJJ+aOO+5Iy5Yt62xftmxZpk6dmsMPP7zex7/fCsGtt946X/ziF3PFFVdk6dKlOfzww9OlS5c1yjZgwIB85CMfycSJE9OlS5e0bt26fHXz+nTp0iVDhw7N73//+zz00ENr9BorfeQjH8mZZ56ZZ555Jsccc8xq5x122GG55ZZbsmLFijrnHnq3lVeUv+mmm8rnJU3ePmfnyhO0r05FRUVKpdIqq1uvueaaVS52sy7mzZuX22+/Pb17984PfvCDVbZfc801uemmm/Lkk0+me/fu+c53vpPf/OY3GTx4cG6//fY0a9asPHfFihU5+eSTs2LFipx66qkfONNNN91U5zDy6dOn5/nnn88JJ5yQJOndu3c6dOiQp59+OkOHDv3Ar7M6rVu3zje/+c1MmDAh06dPz+67757evXuXt7dt2zb77bdf/vSnP+UTn/jEKv9e3qmioiItW7asU1rW1tbWe7V0AIC1USqVMmzYsNx+++25//77VzkveteuXVNdXZ1p06Zljz32SJIsXbo0NTU1ufjii8vzXn/99Xz2s59Nq1atcuedd6Z169Z1nmefffbJ/Pnz88gjj2TvvfdOkvzxj3/M/Pnz06tXr3XeD+UmALDO9tlnn1x55ZUZPHhwevTokZNPPjm77rprli1blj/96U+5+uqr071799WWm5WVldluu+1yxx135IADDkjHjh2z5ZZbZvvtty/POfXUU8tFYH1XQF+dZs2a5etf/3rGjh2bdu3aZeDAgWnfvn15+/z587Pffvtl0KBB+fjHP57KysrMmDEjU6dOrXOxnzV10UUXve+cL33pS7nppptyyCGH5NRTT83ee++dFi1a5KWXXsp9992Xz33uc/n85z+fnXfeOV/96lczbty4tGjRIgceeGCefPLJ/M///E/5IjSr065du/Tp0yeXXHJJ+b2sqanJtddemw4dOqz1fq3OTTfdlMWLF+eUU04pl7HvtMUWW+Smm27Ktddem8suuyy9e/fOuHHjcuqpp2bffffN0KFD06VLl7zwwgu5/PLL84c//CEjR44sn7vzg3j00Udzwgkn5Itf/GJefPHFjBgxIh/5yEcyePDgJMlmm22W8ePH55hjjsmrr76ao446Kp06dcorr7ySP//5z3nllVdWWd27tgYPHpwxY8Zk5syZueaaa1bZ/sMf/jD77rtvPvOZz+Tkk0/O9ttvnwULFuS5557LXXfdlXvvvTfJ20X4bbfdlsGDB+eoo47Kiy++mO9///vZeuut89e//nWdMgIAG7chQ4ZkypQpueOOO1JZWVk++qV9+/Zp06ZNKioqMnz48IwePTrdunVLt27dMnr06LRt2zaDBg1K8vaKzQEDBmThwoWZPHlyXn/99fL51rfaaqs0a9YsO++8cw466KCceOKJ+fGPf5wk+eY3v5nDDjtsnS8mlCg3AYD15MQTT8zee++dyy67LBdffHFqa2vTokWLfOxjH8ugQYPed4XctddemzPPPDNHHHFElixZkmOOOabOhYD23nvvbL/99mnTpk0OOOCAtcp23HHH5cILL8wrr7xS50JCydur7Hr27Jkbb7wx//jHP7Js2bJ06dIlZ599ds4666y1ep011axZs9x555354Q9/mBtvvDEXXnhhmjdvnm222SZ9+/bNbrvtVp577bXXpqqqKpMmTcqPfvSj7L777rn11lvzpS996X1fZ8qUKTn11FNz1llnZfny5endu3emTZuWQw89dL3ty7XXXptOnTqVrwz+brvttls+/elPZ/Lkybn44ovTsmXLDBs2LHvuuWcuvfTSnH766XnllVfy1ltvpXXr1vn1r39dPu/kumS68cYb86UvfSlLlizJfvvtlx/+8IflK38myVe/+tV06dIlY8aMyUknnZQFCxakU6dO2X333XPssceu0+snb6/i3XffffPEE0+Uf/l/p1122SWPPfZYvv/97+e///u/M3fu3HTo0CHdunWrs//HHXdc5s6dm6uuuirXXXdddthhh3znO9/JSy+9tEZXbwcAWJ2VH+a++wPqiRMnln8fOuuss7Jo0aIMHjw48+bNS8+ePXP33XeXT6M0c+bM/PGPf0yS8imAVpo9e3Z5scJNN92UU045pXzl9SOOOCITJkxYL/tRUVp5OUoAgCbsiSeeKF+FeuUKPD48brjhhhxzzDE566yz6hzmtDYmTZqU4447LjNmzMiee+65nhOunblz52a77bbLsGHDMmbMmEbNAgBsWIsXL87s2bPTtWvXVQ7J5oNb0/fVyk0AoEn729/+lueffz7nnntutt566/Wyqo6m5+tf/3rmzJmT73znO9l0001z3nnnNXakD+Sll17K3//+91xyySXZZJNN1uncoQAAvL9NGjsAAMB7+f73v5/+/fvnjTfeyM9//vO0bdu2sSOxgZx99tkplUqFLTaTty+g1K9fvzz11FO56aab6lzlHgCA9c9h6QAAAADwATksfcNY0/fVyk0AAAAAoJCUmwAAAABAISk3AQAAAGAdOfPj+rWm76dyEwAAAAA+oBYtWiRJFi5c2MhJPlxWvp8r39/Vad4QYZq6t956Ky+//HIqKytTUVHR2HEAAAAAaCSlUikLFixI586ds8km778usFmzZunQoUPmzp2bJGnbtq1+aR2USqUsXLgwc+fOTYcOHdKsWbP3nO9q6UleeumlbLvtto0dAwAAAIAm4sUXX8w222yzRnNLpVJqa2vz2muvbdhQG5EOHTqkurr6fYti5WaS+fPnp0OHDnnxxRfTrl27xo4DAAAAQCN5/fXXs+222+a1115L+/bt1+qxK1asyLJlyzZQso1HixYt3nfF5koOS0/KDXC7du2UmwAAAAB8oEPLmzVrtsalHOuHCwoBAAAAAIWk3AQAAAAACkm5CQAAAAAUknITAAAAACgk5SYAAAAAUEjKTQAAAACgkJSbAAAAAEAhKTcBAAAAgEJSbgIAAAAAhaTcBAAAAAAKSbkJAAAAABSSchMAAAAAKCTlJgAAAABQSMpNAAAAAKCQlJsAAAAAQCEpNwEAAACAQlJuAgAAAACFpNwEAAAAAApJuQkAAAAAFJJyEwAAAAAoJOUmAAAAAFBIyk0AAAAAoJCUmwAAAABAISk3AQAAAIBCUm4CAAAAAIWk3AQAAAAACql5YwcAAAAAoPHV9Olb73jfB2oaOAmsOSs3AQAAAIBCUm4CAAAAAIWk3AQAAAAACkm5CQAAAAAUknITAAAAACikRi03R44cmYqKijq36urq8vZSqZSRI0emc+fOadOmTfr165ennnqqznMsWbIkw4YNy5ZbbplNN900RxxxRF566aWG3hUAAAAAoIE1+srNXXfdNXPmzCnfZs2aVd42ZsyYjB07NhMmTMiMGTNSXV2d/v37Z8GCBeU5w4cPz+23355bbrklDz74YN54440cdthhWbFiRWPsDgAAAADQQJo3eoDmzeus1lypVCpl3LhxGTFiRAYOHJgkuf7661NVVZUpU6bkpJNOyvz583PttdfmxhtvzIEHHpgkmTx5crbddtvcc889+exnP9ug+wIAAAAANJxGX7n517/+NZ07d07Xrl3zpS99KX//+9+TJLNnz05tbW0GDBhQntuqVav07ds306dPT5LMnDkzy5YtqzOnc+fO6d69e3lOfZYsWZLXX3+9zg0AAAAAKJZGLTd79uyZG264Ib/73e/yk5/8JLW1tenVq1f+85//pLa2NklSVVVV5zFVVVXlbbW1tWnZsmU233zz1c6pz4UXXpj27duXb9tuu+163jMAAAAAYENr1HLz4IMPzhe+8IXstttuOfDAA/PrX/86yduHn69UUVFR5zGlUmmVsXd7vznnnHNO5s+fX769+OKL67AXAAAAAEBjaPTD0t9p0003zW677Za//vWv5fNwvnsF5ty5c8urOaurq7N06dLMmzdvtXPq06pVq7Rr167ODQAAAAAoliZVbi5ZsiT/93//l6233jpdu3ZNdXV1pk2bVt6+dOnS1NTUpFevXkmSHj16pEWLFnXmzJkzJ08++WR5DgAAAADw4dSoV0s/44wzcvjhh6dLly6ZO3dufvCDH+T111/PMccck4qKigwfPjyjR49Ot27d0q1b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AAAAAKCQlJsAAAAAQCEpNwEAAACAQlJuAgAAAACF1LyxAwAAAACw/r3wvd3qHe9y3qwGTgIbjpWbAAAAAEAhKTcBAAAAgEJq1HLzyiuvzCc+8Ym0a9cu7dq1yz777JPf/va35e2lUikjR45M586d06ZNm/Tr1y9PPfVUnedYsmRJhg0bli233DKbbrppjjjiiLz00ksNvSsAAAAArKEeZ95Q7w3WVqOWm9tss00uuuiiPProo3n00Uez//7753Of+1y5wBwzZkzGjh2bCRMmZMaMGamurk7//v2zYMGC8nMMHz48t99+e2655ZY8+OCDeeONN3LYYYdlxYoVjbVbAAAAAEADaNRy8/DDD88hhxySj33sY/nYxz6WCy64IJtttlkefvjhlEqljBs3LiNGjMjAgQPTvXv3XH/99Vm4cGGmTJmSJJk/f36uvfbaXHrppTnwwAOzxx57ZPLkyZk1a1buueeextw1AAAAAGADazLn3FyxYkVuueWWvPnmm9lnn30ye/bs1NbWZsCAAeU5rVq1St++fTN9+vQkycyZM7Ns2bI6czp37pzu3buX59RnyZIlef311+vcAAAAAIBiafRyc9asWdlss83SqlWrfOtb38rtt9+eXXbZJbW1tUmSqqqqOvOrqqrK22pra9OyZctsvvnmq51TnwsvvDDt27cv37bddtv1vFcAAAAAwIbW6OXmTjvtlMcffzwPP/xwTj755BxzzDF5+umny9srKirqzC+VSquMvdv7zTnnnHMyf/788u3FF19ct50AAAAAABpco5ebLVu2zI477pg999wzF154YT75yU/mhz/8Yaqrq5NklRWYc+fOLa/mrK6uztKlSzNv3rzVzqlPq1atyldoX3kDAAAAAIql0cvNdyuVSlmyZEm6du2a6urqTJs2rbxt6dKlqampSa9evZIkPXr0SIsWLerMmTNnTp588snyHAAAAADgw6l5Y774ueeem4MPPjjbbrttFixYkFtuuSX3339/pk6dmoqKigwfPjyjR49Ot27d0q1bt4wePTpt27bNoEGDkiTt27fP8ccfn9NPPz1bbLFFOnbsmDPOOCO77bZbDjzwwMbcNQAAAABgA2vUcvNf//pXvva1r2XOnDlp3759PvGJT2Tq1Knp379/kuSss87KokWLMnjw4MybNy89e/bM3XffncrKyvJzXHbZZWnevHmOPvroLFq0KAcccEAmTZqUZs2aNdZuAQAAAAANoFHLzWuvvfY9t1dUVGTkyJEZOXLkaue0bt0648ePz/jx49dzOgAAAACgKWty59wEAAAAAFgTjbpyEwAAAABWeuF7u9U73uW8WQ2chKKwchMAAAAAKCTlJgAAAABQSMpNAAAAAKCQlJsAAAAAQCEpNwEAAACAQlJuAgAAAACFpNwEAAAAAApJuQkAAAAAFJJyEwAAAAAoJOUmAAAAAFBIyk0AAAAAoJCUmwAAAABAISk3AQAAAIBCUm4CAAAAAIWk3AQAAAAACkm5CQAAAAAUknITAAAAACgk5SYAAAAAUEjKTQAAAACgkJSbAAAAAEAhNV+byXvssUcqKired95jjz32gQMBAAAAAKyJtSo3jzzyyA0UAwAAAADq13t873rHHxr2UAMnoalZq3Lz/PPP31A5AAAAAADWylqVm+/0xBNP5C9/+UtatmyZj33sY/n4xz++PnMBAAAAALyntS43H3nkkRx//PF5+umnUyqVkiQVFRXZa6+9MmnSpHLJ+eqrr6Zjx47rNy0AAAAAdfQ484Z6x2+vbOAg0AjW6mrpTz/9dA444IC0adMmkydPzmOPPZaZM2fmxhtvzIoVK9KrV6+8/PLLueKKK3LFFVdsqMwAAAAAAGt/zs3+/fvn1ltvrXPV9D322CNf/vKXM3DgwOy333558cUX89vf/na9hwUAAAAAWGmtys37778/v/3tb+sUmytVVFTk3HPPTc+ePfPb3/42ffv2XW8hAQAAAADeba0OS1+wYEGqqqpWu726ujotWrTIZz/72XUOBgAAAADwXtaq3Nx+++3zyCOPrHb7H//4x2y33XbrHAoAAAAA4P2sVbn5X//1XznttNPy5JNPrrJt1qxZOeOMM/KlL31pvYUDAAAAAFidtTrn5jnnnJN77rknu+++e/r375+dd945ydtXUb/nnnuy11575ZxzztkgQQEAAAAA3mmtVm62bt069913Xy644ILMmTMnV111Va666qrMmTMnP/jBD1JTU5Nnn312Q2UFAAAAAChbq3IzSVq2bJmzzz47jz/+eBYuXJiFCxempqYm7dq1yz777JMePXpsiJwAAAAAAHWsdbn5Tvfee2+++tWvpnPnzhk/fnwOPvjgPProo+srGwAAAADAaq3VOTeT5KWXXsqkSZNy3XXX5c0338zRRx+dZcuW5dZbb80uu+yyITICAAAAAKxirVZuHnLIIdlll13y9NNPZ/z48Xn55Zczfvz4DZUNAAAAAGC11mrl5t13351TTjklJ598crp167ahMgEAAAAAvK+1Wrn5v//7v1mwYEH23HPP9OzZMxMmTMgrr7yyobIBAAAAAKzWWpWb++yzT37yk59kzpw5Oemkk3LLLbfkIx/5SN56661MmzYtCxYs2FA5AQAAAADq+EBXS2/btm2+8Y1v5MEHH8ysWbNy+umn56KLLkqnTp1yxBFHrO+MAAAAAACr+EDl5jvttNNOGTNmTF566aXcfPPN6yMTAAAAAMD7Wudyc6VmzZrlyCOPzJ133rm+nhIAAAAAYLXWW7kJAAAAANCQlJsAAAAAQCEpNwEAAACAQmre2AEAAACADaP3+N71jj807KEGTgKwYVi5CQAAAAAUknITAAAAACgk5SYAAAAAUEjKTQAAAACgkJSbAAAAAEAhKTcBAAAAgEJSbgIAAAAAhaTcBAAAAAAKSbkJAAAAABSSchMAAAAAKKTmjR0AAAAAAD6Imj596x3v+0BNAyehsSg3AQAAADYAxRtseA5LBwAAAAAKSbkJAAAAABSSchMAAAAAKCTlJgAAAABQSMpNAAAAAKCQlJsAAAAAQCE1b+wAAAAAQMOq6dO33vG+D9Q0cBKAdWPlJgAAAABQSMpNAAAAAKCQlJsAAAAAQCEpNwEAAACAQlJuAgAAAACFpNwEAAAAAAqpeWMHAAAAAFip9/je9Y4/NOyhBk4CFIGVmwAAAABAIVm5CQAAALARWd3q2NFqIgrIyk0AAAAAoJCUmwAAAABAISk3AQAAAIBCUm4CAAAAAIXkTLEAAABQcC98b7f6N2zermGDADQwKzcBAAAAgEJSbgIAAAAAhaTcBAAAAAAKyTk3AQAAgAbnPKHA+mDlJgAAAABQSMpNAAAAAKCQlJsAAAAAQCEpNwEAAACAQlJuAgAAAACFpNwEAAAAAApJuQkAAAAAFJJyEwAAAAAoJOUmAAAAAFBIzRs7AAAAAMD7qenTt97xvg/UNHASoCmxchMAAAAAKCTlJgAAAABQSA5LBwAAAOBDZcLpd9U7PvTSwxs4CRualZsAAAAAQCEpNwEAAACAQlJuAgAAAACFpNwEAAAAAApJuQkAAAAAFFKjlpsXXnhh9tprr1RWVqZTp0458sgj8+yzz9aZUyqVMnLkyHTu3Dlt2rRJv3798tRTT9WZs2TJkgwbNixbbrllNt100xxxxBF56aWXGnJXAAAAAIAG1rwxX7ympiZDhgzJXnvtleXLl2fEiBEZMGBAnn766Wy66aZJkjFjxmTs2LGZNGlSPvaxj+UHP/hB+vfvn2effTaVlZVJkuHDh+euu+7KLbfcki222CKnn356DjvssMycOTPNmjVrzF0EAAAAPiRe+N5u9W/YvF3DBgHKGrXcnDp1ap37EydOTKdOnTJz5sz06dMnpVIp48aNy4gRIzJw4MAkyfXXX5+qqqpMmTIlJ510UubPn59rr702N954Yw488MAkyeTJk7PtttvmnnvuyWc/+9kG3y8AAAAAYMNrUufcnD9/fpKkY8eOSZLZs2entrY2AwYMKM9p1apV+vbtm+nTpydJZs6cmWXLltWZ07lz53Tv3r08592WLFmS119/vc4NAAAAACiWJlNulkqlnHbaadl3333TvXv3JEltbW2SpKqqqs7cqqqq8rba2tq0bNkym2+++WrnvNuFF16Y9u3bl2/bbrvt+t4dAAAAAGADazLl5tChQ/PEE0/k5ptvXmVbRUVFnfulUmmVsXd7rznnnHNO5s+fX769+OKLHzw4AAAAANAomkS5OWzYsNx555257777ss0225THq6urk2SVFZhz584tr+asrq7O0qVLM2/evNXOebdWrVqlXbt2dW4AAAAAQLE0arlZKpUydOjQ3Hbbbbn33nvTtWvXOtu7du2a6urqTJs2rTy2dOnS1NTUpFevXkmSHj16pEWLFnXmzJkzJ08++WR5DgAAAADw4dOoV0sfMmRIpkyZkjvuuCOVlZXlFZrt27dPmzZtUlFRkeHDh2f06NHp1q1bunXrltGjR6dt27YZNGhQee7xxx+f008/PVtssUU6duyYM844I7vttlv56ukAAAAAwIdPo5abV155ZZKkX79+dcYnTpyYY489Nkly1llnZdGiRRk8eHDmzZuXnj175u67705lZWV5/mWXXZbmzZvn6KOPzqJFi3LAAQdk0qRJadasWUPtCgAAAADQwBq13CyVSu87p6KiIiNHjszIkSNXO6d169YZP358xo8fvx7TAQAAAABNWZO4oBAAAAAAwNpq1JWbAAAAQNMx4fS76h0feunhDZwEYM1YuQkAAAAA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qFENGRMAAACAAnnxxRezzTbbNHYM3kfhV25uueWWadas2SqrNOfOnbvKas6VzjnnnJx22mnl+2+99VZeffXVbLHFFqmoqFhv2V5//fVsu+22efHFF9OuXbv19rwbkswbXtHyJjI3lKJlLlreROaGULS8icwNpWiZi5Y3kbkhFC1vInNDKFreROaGUrTMRcubbLjMpVIpCxYsSOfOndfbc7LhFL7cbNmyZXr06JFp06bl85//fHl82rRp+dznPlfvY1q1apVWrVrVGevQocMGy9iuXbvCfGNYSeYNr2h5E5kbStEyFy1vInNDKFreROaGUrTMRcubyNwQipY3kbkhFC1vInNDKVrmouVNNkzm9u3br9fnY8MpfLmZJKeddlq+9rWvZc8998w+++yTq6++Oi+88EK+9a1vNXY0AAAAAGAD+VCUm//1X/+V//znP/ne976XOXPmpHv37vnNb36T7bbbrrGjAQAAAAAbyIei3EySwYMHZ/DgwY0do45WrVrl/PPPX+UQ+KZM5g2vaHkTmRtK0TIXLW8ic0MoWt5E5oZStMxFy5vI3BCKljeRuSEULW8ic0MpWuai5U2KmZn1r/BXSwcAAAAANk6bNHYAAAAAAIAPQrkJAAAAABSSchMAAAAAKCTlJmxAy5cvz6hRo/Liiy82dhQAANbCsmXLssMOO+Tpp59u7CgfWn5XBmB9UG7CBtS8efNccsklWbFiRWNHAaCgli1bluOOOy5///vfGzsKbFRatGiRJUuWpKKiorGjfGj5XRmA9cHV0tfRnXfeucZzjzjiiA2YhKbqyCOPzJFHHpljjz22saOssf/85z8577zzct9992Xu3Ll566236mx/9dVXGynZ+3vrrbfy3HPP1Zu7T58+jZSKxrZ8+fLcf//9+dvf/pZBgwalsrIyL7/8ctq1a5fNNtussePRiN54441Vvle0a9eukdKsXocOHfLYY49lhx12aOwosFG56KKL8swzz+Saa65J8+bNGzvOh1IRf1eG9/LII4/k/vvvr/fvkbFjxzZSKvhw8xN6HR155JFrNK+ioqLJfiK5+eab1/uJdEVFRVq3bp0dd9wxxx57bI477rhGSPe2jh075i9/+Uu23HLL1eZdqakVbwcffHDOOeecPPnkk+nRo0c23XTTOtubYun91a9+NX/7299y/PHHp6qqqjArFh5++OEMGjQozz//fN79uU1T+jf4ox/9aI3nnnLKKRswyZq78847c/DBB6dFixbv+6FOU/uafv7553PQQQflhRdeyJIlS9K/f/9UVlZmzJgxWbx4ca666qrGjpiBAwdm0qRJadeuXQYOHPiec2+77bYGSrV2Hnjggffc3pQ+XJg9e3aGDh2a+++/P4sXLy6Pl0qlJvW94p0+//nP55e//GVOO+20xo7ynor887o+ixYtyrJly+qMNcXymw3nj3/8Y37/+9/n7rvvzm677bbK73FN9XtykRTxd+Xk7Q9OW7dunccffzzdu3dv7DhrrHPnzunXr1/69euXvn37ZqeddmrsSGusCN+TR48enf/+7//OTjvttMrfUU3lb6o99thjjbM89thjGzjNmvvRj36Ub37zm2nduvX7/j3VVP6GouEoN9fRuz+JKaLzzjsvF1xwQQ4++ODsvffeKZVKmTFjRqZOnZohQ4Zk9uzZOfnkk7N8+fKceOKJjZLxsssuS2VlZfm/m8oPhjVx8sknJ6n/U7qm+kf0gw8+mAcffDCf/OQnGzvKWvnWt76VPffcM7/+9a+z9dZbN9mvk8suu6zO/VdeeSULFy5Mhw4dkiSvvfZa2rZtm06dOjWZH8xHHnlkamtr06lTp/f8UKcpfk2feuqp2XPPPfPnP/85W2yxRXn885//fE444YRGTPb/tG/fvvz12r59+0ZO88H069dvlbF3/htsSl8XX/nKV5Ik1113XWE+wNlxxx3z/e9/P9OnT6/3j/+m8r2iyD+vV1q4cGHOOuus/OxnP8t//vOfVbY3pa/lpDhHW3zqU5/K73//+2y++ebv+4d1U/pjukOHDvnCF77Q2DHWyPt9oPBOTeXrIinm78rJ24fUb7fddk023+pceumlqampydixY/Otb30rVVVV6du3b7ns3HnnnRs7Yh1F+578wx/+MNddd12TXon8zt/lFy9enCuuuCK77LJL9tlnnyRvLxh56qmnMnjw4EZKWL/LLrssX/nKV9K6detV/p56p4qKiibzexENx2Hp69HChQvTtm3bxo6x1r7whS+kf//++da3vlVn/Mc//nHuvvvu3HrrrRk/fnyuvvrqzJo1q5FS0pD22muvjB8/Pp/+9KcbO8pa2XTTTfPnP/85O+64Y2NHWWNTpkzJFVdckWuvvbb8yfmzzz6bE088MSeddFK5hOGD23LLLfPQQw9lp512SmVlZf785z9nhx12yD/+8Y/ssssuWbhwYWNH/FCYP39+nfvLli3Ln/70p3z3u9/NBRdckAMOOKCRkq1qs802y8yZMwu1WqVr166r3VZRUeF8nOvRkCFDct999+V73/tevv71r+fyyy/PP//5z/z4xz/ORRdd1OS+Lx988MHvebTFMccc00jJ6ho1alTOPPPMtG3bNqNGjXrPueeff34Dpfpwuf7669d4blP5uii6iRMn5uc//3kmT56cjh07Nnactfavf/0r9913X371q1/lpz/9ad56660mVxYW7Xvy1ltvnQceeCDdunVr7Chr5IQTTsjWW2+d73//+3XGzz///Lz44ou57rrrGikZrB3l5nrUsmXL7LnnnuVPvfbdd99VVlY0RZtttlkef/zxVQqh5557LrvvvnveeOON/O1vf8snPvGJvPnmm42U8v9p1qxZ5syZk06dOtUZ/89//pNOnTo1uR/I77R48eK0bt26sWO8rxkzZuQ73/lOzjvvvHTv3j0tWrSos72pHf6x0v7775+zzjorBx10UGNHWWMf/ehH84tf/CJ77LFHnfGZM2fmqKOOyuzZsxsp2YdHx44d8+CDD2aXXXapU24++OCD+cIXvpB//etfjR3xQ+2BBx7It7/97cycObOxo5Ttt99+GTFiRA488MDGjvKhVtSf1126dMkNN9yQfv36pV27dnnsscey44475sYbb8zNN9+c3/zmN40dsY7KyspCHm0BHwZ77LFHnnvuuSxbtizbbbfdKn/7NaVVyO/0xhtv5MEHH0xNTU3uv//+/OlPf8ouu+ySvn37vueKuMZQtO/JY8aMycsvv5xx48Y1dpQ10r59+zz66KOrlLF//etfs+eee67y4TU0VQ5LX49qamrKPyAmTJiQxYsX51Of+lS57Dz44IMbO2K9OnbsmLvuuivf/va364zfdddd5U8g33zzzfJhZo1tdX38kiVL0rJlywZO8/5WrFiR0aNH56qrrsq//vWv/OUvf8kOO+yQ7373u9l+++1z/PHHN3bEVXTo0CHz58/P/vvvX2e8KZ6P7oknnij/97Bhw3L66aentrY2u+222yql7Cc+8YmGjve+5syZs8q5g5K3v26acun25ptvpqamJi+88EKWLl1aZ1tTOwykf//+GTduXK6++uokb69ye+ONN3L++efnkEMOaeR09fvFL36Rn/3sZ/W+v031D6XV2WqrrfLss882dow6rrnmmnzrW9/KP//5z3o/wGmK3yuKqGg/r1d69dVXyytl27VrVz58d9999y0fPtuUfPzjH8+iRYsaO8YHsnTp0noPpe/SpUsjJVpV165d3/NQ7yKsmi7CeQqL9HvFO63p9Reakp49e+aJJ55I9+7d069fv5x77rn5zGc+Uz49UlNTtO/JZ5xxRg499NB89KMfzS677LLK7xhN7Ty9bdq0yYMPPrhKufnggw826UU5K1asyKRJk/L73/++3p8j9957byMlo7EoN9ejffbZJ/vss0++853vZMWKFZkxY0auuuqqXHrppbnkkkuaVCH0Tt/97ndz8skn57777svee++dioqKPPLII/nNb35TvtDGtGnT0rdv30bNufKkwRUVFbnmmmvqXOF4xYoVeeCBB/Lxj3+8seKt1gUXXJDrr78+Y8aMqXPO0t122y2XXXZZkyw3v/KVr6Rly5aZMmVKkz8f3e67756Kioo6f0R/4xvfKP/3ym1NrZRd6YADDsiJJ56Ya6+9Nj169EhFRUUeffTRnHTSSU12Vdmf/vSnHHLIIVm4cGHefPPNdOzYMf/+97+b3HlCVxo7dmz233//7LLLLlm8eHEGDRqUv/71r9lyyy1z8803N3a8VfzoRz/KiBEjcswxx+SOO+7Icccdl7/97W+ZMWNGhgwZ0tjxVuudHzQkbxdbc+bMyUUXXdTkVpS98sor+dvf/lbnQnlN/XtFkrz00ku588476/3jvyldfbWoP69XWnnaiu222y677LJLfvazn2XvvffOXXfd1ST/+L/iiisKd7TFX/7ylxx//PGZPn16nfGm+G9w+PDhde6vPOXG1KlTc+aZZzZOqDXw5ptv5uyzzy7EeQqL9nvFOxXxFAp//etf07Zt2+ywww7ZYYcdsuOOOzbJ720rFe178rBhw3Lfffdlv/32yxZbbNGk/45K3v4ed/LJJ2fmzJnlU5I9/PDDue6663Leeec1crrVO/XUUzNp0qQceuih6d69e5N/n9nwHJa+nj3zzDO5//77yys4ly1blj59+qRv37459dRTGzveaj300EOZMGFCnn322ZRKpXz84x/PsGHD0qtXr8aOVrbyE7vnn38+22yzTZo1a1be1rJly2y//fb53ve+l549ezZWxHrtuOOO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\",\n      \"text/plain\": [\n       \"<Figure size 1500x800 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.figure(figsize=(15,8))\\n\",\n    \"sns.barplot(x='City', y='AQI', data=city_median_AQI_per_year,hue='year').set(title ='City vs Median AQI per year')\\n\",\n    \"plt.xticks(rotation=90)\\n\",\n    \"plt.legend(loc=(1.01, 1))\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"      <th>AQI_Bucket</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"      <th>Organic Pollutants</th>\\n\",\n       \"      <th>Inorganic Pollutants</th>\\n\",\n       \"      <th>Particulate Matter</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>month</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>133.36</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>278.63</td>\\n\",\n       \"      <td>161.02</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>224.85</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>34.06</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>275.51</td>\\n\",\n       \"      <td>71.56</td>\\n\",\n       \"      <td>12.95</td>\\n\",\n       \"      <td>119.34</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>30.70</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>325.22</td>\\n\",\n       \"      <td>85.22</td>\\n\",\n       \"      <td>25.45</td>\\n\",\n       \"      <td>170.21</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>36.08</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>281.27</td>\\n\",\n       \"      <td>70.24</td>\\n\",\n       \"      <td>15.57</td>\\n\",\n       \"      <td>121.16</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>39.31</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>344.80</td>\\n\",\n       \"      <td>107.32</td>\\n\",\n       \"      <td>28.68</td>\\n\",\n       \"      <td>208.66</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29526</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>15.02</td>\\n\",\n       \"      <td>50.94</td>\\n\",\n       \"      <td>7.68</td>\\n\",\n       \"      <td>25.06</td>\\n\",\n       \"      <td>19.54</td>\\n\",\n       \"      <td>12.47</td>\\n\",\n       \"      <td>0.47</td>\\n\",\n       \"      <td>8.55</td>\\n\",\n       \"      <td>23.30</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>0.73</td>\\n\",\n       \"      <td>41.0</td>\\n\",\n       \"      <td>Good</td>\\n\",\n       \"      <td>131.18</td>\\n\",\n       \"      <td>46.89</td>\\n\",\n       \"      <td>15.04</td>\\n\",\n       \"      <td>97.07</td>\\n\",\n       \"      <td>65.96</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29527</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>24.38</td>\\n\",\n       \"      <td>74.09</td>\\n\",\n       \"      <td>3.42</td>\\n\",\n       \"      <td>26.06</td>\\n\",\n       \"      <td>16.53</td>\\n\",\n       \"      <td>11.99</td>\\n\",\n       \"      <td>0.52</td>\\n\",\n       \"      <td>12.72</td>\\n\",\n       \"      <td>30.14</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>0.38</td>\\n\",\n       \"      <td>70.0</td>\\n\",\n       \"      <td>Satisfactory</td>\\n\",\n       \"      <td>156.99</td>\\n\",\n       \"      <td>46.19</td>\\n\",\n       \"      <td>3.33</td>\\n\",\n       \"      <td>101.38</td>\\n\",\n       \"      <td>98.47</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29528</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>22.91</td>\\n\",\n       \"      <td>65.73</td>\\n\",\n       \"      <td>3.45</td>\\n\",\n       \"      <td>29.53</td>\\n\",\n       \"      <td>18.33</td>\\n\",\n       \"      <td>10.71</td>\\n\",\n       \"      <td>0.48</td>\\n\",\n       \"      <td>8.42</td>\\n\",\n       \"      <td>30.96</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>68.0</td>\\n\",\n       \"      <td>Satisfactory</td>\\n\",\n       \"      <td>151.14</td>\\n\",\n       \"      <td>39.40</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>101.88</td>\\n\",\n       \"      <td>88.64</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29529</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>16.64</td>\\n\",\n       \"      <td>49.97</td>\\n\",\n       \"      <td>4.05</td>\\n\",\n       \"      <td>29.26</td>\\n\",\n       \"      <td>18.80</td>\\n\",\n       \"      <td>10.03</td>\\n\",\n       \"      <td>0.52</td>\\n\",\n       \"      <td>9.84</td>\\n\",\n       \"      <td>28.30</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>54.0</td>\\n\",\n       \"      <td>Satisfactory</td>\\n\",\n       \"      <td>129.27</td>\\n\",\n       \"      <td>38.14</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>100.80</td>\\n\",\n       \"      <td>66.61</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29530</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>15.00</td>\\n\",\n       \"      <td>66.00</td>\\n\",\n       \"      <td>0.40</td>\\n\",\n       \"      <td>26.85</td>\\n\",\n       \"      <td>14.05</td>\\n\",\n       \"      <td>5.20</td>\\n\",\n       \"      <td>0.59</td>\\n\",\n       \"      <td>2.10</td>\\n\",\n       \"      <td>17.05</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>50.0</td>\\n\",\n       \"      <td>Good</td>\\n\",\n       \"      <td>128.09</td>\\n\",\n       \"      <td>19.15</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>66.24</td>\\n\",\n       \"      <td>81.00</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>7</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>29531 rows \u00d7 22 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                City  PM2.5    PM10     NO    NO2    NOx    NH3     CO    SO2  \\\\\\n\",\n       \"0          Ahmedabad  73.24  141.54   0.92  18.22  17.15  26.64   0.92  27.64   \\n\",\n       \"1          Ahmedabad  73.24  141.54   0.97  15.69  16.46  26.64   0.97  24.55   \\n\",\n       \"2          Ahmedabad  73.24  141.54  17.40  19.30  29.70  26.64  17.40  29.07   \\n\",\n       \"3          Ahmedabad  73.24  141.54   1.70  18.48  17.97  26.64   1.70  18.59   \\n\",\n       \"4          Ahmedabad  73.24  141.54  22.10  21.42  37.76  26.64  22.10  39.33   \\n\",\n       \"...              ...    ...     ...    ...    ...    ...    ...    ...    ...   \\n\",\n       \"29526  Visakhapatnam  15.02   50.94   7.68  25.06  19.54  12.47   0.47   8.55   \\n\",\n       \"29527  Visakhapatnam  24.38   74.09   3.42  26.06  16.53  11.99   0.52  12.72   \\n\",\n       \"29528  Visakhapatnam  22.91   65.73   3.45  29.53  18.33  10.71   0.48   8.42   \\n\",\n       \"29529  Visakhapatnam  16.64   49.97   4.05  29.26  18.80  10.03   0.52   9.84   \\n\",\n       \"29530  Visakhapatnam  15.00   66.00   0.40  26.85  14.05   5.20   0.59   2.10   \\n\",\n       \"\\n\",\n       \"           O3  ...  Xylene    AQI    AQI_Bucket  Vehicular Pollution  \\\\\\n\",\n       \"0      133.36  ...    0.00  209.0          Poor               278.63   \\n\",\n       \"1       34.06  ...    3.77  209.0          Poor               275.51   \\n\",\n       \"2       30.70  ...    2.25  209.0          Poor               325.22   \\n\",\n       \"3       36.08  ...    1.00  209.0          Poor               281.27   \\n\",\n       \"4       39.31  ...    2.78  209.0          Poor               344.80   \\n\",\n       \"...       ...  ...     ...    ...           ...                  ...   \\n\",\n       \"29526   23.30  ...    0.73   41.0          Good               131.18   \\n\",\n       \"29527   30.14  ...    0.38   70.0  Satisfactory               156.99   \\n\",\n       \"29528   30.96  ...    0.00   68.0  Satisfactory               151.14   \\n\",\n       \"29529   28.30  ...    0.00   54.0  Satisfactory               129.27   \\n\",\n       \"29530   17.05  ...    0.00   50.0          Good               128.09   \\n\",\n       \"\\n\",\n       \"      Industrial Pollution  Organic Pollutants  Inorganic Pollutants  \\\\\\n\",\n       \"0                   161.02                0.02                224.85   \\n\",\n       \"1                    71.56               12.95                119.34   \\n\",\n       \"2                    85.22               25.45                170.21   \\n\",\n       \"3                    70.24               15.57                121.16   \\n\",\n       \"4                   107.32               28.68                208.66   \\n\",\n       \"...                    ...                 ...                   ...   \\n\",\n       \"29526                46.89               15.04                 97.07   \\n\",\n       \"29527                46.19                3.33                101.38   \\n\",\n       \"29528                39.40                0.02                101.88   \\n\",\n       \"29529                38.14                0.00                100.80   \\n\",\n       \"29530                19.15                0.00                 66.24   \\n\",\n       \"\\n\",\n       \"       Particulate Matter  year  month  \\n\",\n       \"0                  214.78  2015      1  \\n\",\n       \"1                  214.78  2015      1  \\n\",\n       \"2                  214.78  2015      1  \\n\",\n       \"3                  214.78  2015      1  \\n\",\n       \"4                  214.78  2015      1  \\n\",\n       \"...                   ...   ...    ...  \\n\",\n       \"29526               65.96  2020      6  \\n\",\n       \"29527               98.47  2020      6  \\n\",\n       \"29528               88.64  2020      6  \\n\",\n       \"29529               66.61  2020      6  \\n\",\n       \"29530               81.00  2020      7  \\n\",\n       \"\\n\",\n       \"[29531 rows x 22 columns]\"\n      ]\n     },\n     \"execution_count\": 25,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"categorical_attributes ['City', 'AQI_Bucket']\\n\",\n      \"<class 'pandas.core.frame.DataFrame'>\\n\",\n      \"RangeIndex: 29531 entries, 0 to 29530\\n\",\n      \"Data columns (total 21 columns):\\n\",\n      \" #   Column                Non-Null Count  Dtype  \\n\",\n      \"---  ------                --------------  -----  \\n\",\n      \" 0   City                  29531 non-null  int32  \\n\",\n      \" 1   PM2.5                 29531 non-null  float64\\n\",\n      \" 2   PM10                  29531 non-null  float64\\n\",\n      \" 3   NO                    29531 non-null  float64\\n\",\n      \" 4   NO2                   29531 non-null  float64\\n\",\n      \" 5   NOx                   29531 non-null  float64\\n\",\n      \" 6   NH3                   29531 non-null  float64\\n\",\n      \" 7   CO                    29531 non-null  float64\\n\",\n      \" 8   SO2                   29531 non-null  float64\\n\",\n      \" 9   O3                    29531 non-null  float64\\n\",\n      \" 10  Benzene               29531 non-null  float64\\n\",\n      \" 11  Toluene               29531 non-null  float64\\n\",\n      \" 12  Xylene                29531 non-null  float64\\n\",\n      \" 13  AQI                   29531 non-null  float64\\n\",\n      \" 14  Vehicular Pollution   29531 non-null  float64\\n\",\n      \" 15  Industrial Pollution  29531 non-null  float64\\n\",\n      \" 16  Organic Pollutants    29531 non-null  float64\\n\",\n      \" 17  Inorganic Pollutants  29531 non-null  float64\\n\",\n      \" 18  Particulate Matter    29531 non-null  float64\\n\",\n      \" 19  year                  29531 non-null  int64  \\n\",\n      \" 20  month                 29531 non-null  int64  \\n\",\n      \"dtypes: float64(18), int32(1), int64(2)\\n\",\n      \"memory usage: 4.6 MB\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from sklearn.preprocessing import LabelEncoder\\n\",\n    \"categorical_attributes = list(df.select_dtypes(include=['object']).columns)\\n\",\n    \"print(\\\"categorical_attributes\\\",categorical_attributes)\\n\",\n    \"le=LabelEncoder()\\n\",\n    \"df['City']=le.fit_transform(df['City'].astype(str))\\n\",\n    \"final_df = df.drop(['AQI_Bucket'], axis=1)\\n\",\n    \"final_df.info()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"      <th>AQI_Bucket</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"      <th>Organic Pollutants</th>\\n\",\n       \"      <th>Inorganic Pollutants</th>\\n\",\n       \"      <th>Particulate Matter</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>month</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>133.36</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>278.63</td>\\n\",\n       \"      <td>161.02</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>224.85</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>34.06</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>275.51</td>\\n\",\n       \"      <td>71.56</td>\\n\",\n       \"      <td>12.95</td>\\n\",\n       \"      <td>119.34</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>30.70</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>325.22</td>\\n\",\n       \"      <td>85.22</td>\\n\",\n       \"      <td>25.45</td>\\n\",\n       \"      <td>170.21</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>36.08</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>281.27</td>\\n\",\n       \"      <td>70.24</td>\\n\",\n       \"      <td>15.57</td>\\n\",\n       \"      <td>121.16</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>39.31</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>209.0</td>\\n\",\n       \"      <td>Poor</td>\\n\",\n       \"      <td>344.80</td>\\n\",\n       \"      <td>107.32</td>\\n\",\n       \"      <td>28.68</td>\\n\",\n       \"      <td>208.66</td>\\n\",\n       \"      <td>214.78</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>5 rows \u00d7 22 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   City  PM2.5    PM10     NO    NO2    NOx    NH3     CO    SO2      O3  ...  \\\\\\n\",\n       \"0     0  73.24  141.54   0.92  18.22  17.15  26.64   0.92  27.64  133.36  ...   \\n\",\n       \"1     0  73.24  141.54   0.97  15.69  16.46  26.64   0.97  24.55   34.06  ...   \\n\",\n       \"2     0  73.24  141.54  17.40  19.30  29.70  26.64  17.40  29.07   30.70  ...   \\n\",\n       \"3     0  73.24  141.54   1.70  18.48  17.97  26.64   1.70  18.59   36.08  ...   \\n\",\n       \"4     0  73.24  141.54  22.10  21.42  37.76  26.64  22.10  39.33   39.31  ...   \\n\",\n       \"\\n\",\n       \"   Xylene    AQI  AQI_Bucket  Vehicular Pollution Industrial Pollution  \\\\\\n\",\n       \"0    0.00  209.0        Poor               278.63               161.02   \\n\",\n       \"1    3.77  209.0        Poor               275.51                71.56   \\n\",\n       \"2    2.25  209.0        Poor               325.22                85.22   \\n\",\n       \"3    1.00  209.0        Poor               281.27                70.24   \\n\",\n       \"4    2.78  209.0        Poor               344.80               107.32   \\n\",\n       \"\\n\",\n       \"   Organic Pollutants  Inorganic Pollutants  Particulate Matter  year  month  \\n\",\n       \"0                0.02                224.85              214.78  2015      1  \\n\",\n       \"1               12.95                119.34              214.78  2015      1  \\n\",\n       \"2               25.45                170.21              214.78  2015      1  \\n\",\n       \"3               15.57                121.16              214.78  2015      1  \\n\",\n       \"4               28.68                208.66              214.78  2015      1  \\n\",\n       \"\\n\",\n       \"[5 rows x 22 columns]\"\n      ]\n     },\n     \"execution_count\": 27,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 28,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"<class 'pandas.core.frame.DataFrame'>\\n\",\n      \"RangeIndex: 29531 entries, 0 to 29530\\n\",\n      \"Data columns (total 21 columns):\\n\",\n      \" #   Column                Non-Null Count  Dtype  \\n\",\n      \"---  ------                --------------  -----  \\n\",\n      \" 0   City                  29531 non-null  int32  \\n\",\n      \" 1   PM2.5                 29531 non-null  float64\\n\",\n      \" 2   PM10                  29531 non-null  float64\\n\",\n      \" 3   NO                    29531 non-null  float64\\n\",\n      \" 4   NO2                   29531 non-null  float64\\n\",\n      \" 5   NOx                   29531 non-null  float64\\n\",\n      \" 6   NH3                   29531 non-null  float64\\n\",\n      \" 7   CO                    29531 non-null  float64\\n\",\n      \" 8   SO2                   29531 non-null  float64\\n\",\n      \" 9   O3                    29531 non-null  float64\\n\",\n      \" 10  Benzene               29531 non-null  float64\\n\",\n      \" 11  Toluene               29531 non-null  float64\\n\",\n      \" 12  Xylene                29531 non-null  float64\\n\",\n      \" 13  AQI                   29531 non-null  float64\\n\",\n      \" 14  Vehicular Pollution   29531 non-null  float64\\n\",\n      \" 15  Industrial Pollution  29531 non-null  float64\\n\",\n      \" 16  Organic Pollutants    29531 non-null  float64\\n\",\n      \" 17  Inorganic Pollutants  29531 non-null  float64\\n\",\n      \" 18  Particulate Matter    29531 non-null  float64\\n\",\n      \" 19  year                  29531 non-null  int64  \\n\",\n      \" 20  month                 29531 non-null  int64  \\n\",\n      \"dtypes: float64(18), int32(1), int64(2)\\n\",\n      \"memory usage: 4.6 MB\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"final_df.info()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 29,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"      <th>Organic Pollutants</th>\\n\",\n       \"      <th>Inorganic Pollutants</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>month</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>133.36</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>278.63</td>\\n\",\n       \"      <td>161.02</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>224.85</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>34.06</td>\\n\",\n       \"      <td>3.68</td>\\n\",\n       \"      <td>5.50</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>275.51</td>\\n\",\n       \"      <td>71.56</td>\\n\",\n       \"      <td>12.95</td>\\n\",\n       \"      <td>119.34</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>30.70</td>\\n\",\n       \"      <td>6.80</td>\\n\",\n       \"      <td>16.40</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>325.22</td>\\n\",\n       \"      <td>85.22</td>\\n\",\n       \"      <td>25.45</td>\\n\",\n       \"      <td>170.21</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>36.08</td>\\n\",\n       \"      <td>4.43</td>\\n\",\n       \"      <td>10.14</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>281.27</td>\\n\",\n       \"      <td>70.24</td>\\n\",\n       \"      <td>15.57</td>\\n\",\n       \"      <td>121.16</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>39.31</td>\\n\",\n       \"      <td>7.01</td>\\n\",\n       \"      <td>18.89</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>344.80</td>\\n\",\n       \"      <td>107.32</td>\\n\",\n       \"      <td>28.68</td>\\n\",\n       \"      <td>208.66</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   City  PM2.5    PM10     NO    NO2    NOx    NH3     CO    SO2      O3  \\\\\\n\",\n       \"0     0  73.24  141.54   0.92  18.22  17.15  26.64   0.92  27.64  133.36   \\n\",\n       \"1     0  73.24  141.54   0.97  15.69  16.46  26.64   0.97  24.55   34.06   \\n\",\n       \"2     0  73.24  141.54  17.40  19.30  29.70  26.64  17.40  29.07   30.70   \\n\",\n       \"3     0  73.24  141.54   1.70  18.48  17.97  26.64   1.70  18.59   36.08   \\n\",\n       \"4     0  73.24  141.54  22.10  21.42  37.76  26.64  22.10  39.33   39.31   \\n\",\n       \"\\n\",\n       \"   Benzene  Toluene  Xylene  Vehicular Pollution  Industrial Pollution  \\\\\\n\",\n       \"0     0.00     0.02    0.00               278.63                161.02   \\n\",\n       \"1     3.68     5.50    3.77               275.51                 71.56   \\n\",\n       \"2     6.80    16.40    2.25               325.22                 85.22   \\n\",\n       \"3     4.43    10.14    1.00               281.27                 70.24   \\n\",\n       \"4     7.01    18.89    2.78               344.80                107.32   \\n\",\n       \"\\n\",\n       \"   Organic Pollutants  Inorganic Pollutants  year  month  \\n\",\n       \"0                0.02                224.85  2015      1  \\n\",\n       \"1               12.95                119.34  2015      1  \\n\",\n       \"2               25.45                170.21  2015      1  \\n\",\n       \"3               15.57                121.16  2015      1  \\n\",\n       \"4               28.68                208.66  2015      1  \"\n      ]\n     },\n     \"execution_count\": 29,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"X_train = final_df.loc[final_df['year'] <= 2018][['City', 'PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene', 'Vehicular Pollution', 'Industrial Pollution', 'Organic Pollutants', 'Inorganic Pollutants', 'year', 'month']]\\n\",\n    \"X_train.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 30,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0    209.0\\n\",\n       \"1    209.0\\n\",\n       \"2    209.0\\n\",\n       \"3    209.0\\n\",\n       \"4    209.0\\n\",\n       \"Name: AQI, dtype: float64\"\n      ]\n     },\n     \"execution_count\": 30,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"y_train = final_df.loc[final_df['year'] <= 2018].AQI\\n\",\n    \"y_train.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 31,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(17439, 19)\\n\",\n      \"(17439,)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(X_train.shape)\\n\",\n    \"print(y_train.shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 32,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"      <th>Organic Pollutants</th>\\n\",\n       \"      <th>Inorganic Pollutants</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>month</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>110.71</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>63.03</td>\\n\",\n       \"      <td>111.56</td>\\n\",\n       \"      <td>100.04</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>63.03</td>\\n\",\n       \"      <td>80.15</td>\\n\",\n       \"      <td>57.12</td>\\n\",\n       \"      <td>4.08</td>\\n\",\n       \"      <td>32.33</td>\\n\",\n       \"      <td>6.93</td>\\n\",\n       \"      <td>616.55</td>\\n\",\n       \"      <td>180.61</td>\\n\",\n       \"      <td>43.34</td>\\n\",\n       \"      <td>501.57</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>147.57</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>59.56</td>\\n\",\n       \"      <td>107.46</td>\\n\",\n       \"      <td>129.87</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>59.56</td>\\n\",\n       \"      <td>47.70</td>\\n\",\n       \"      <td>48.23</td>\\n\",\n       \"      <td>4.10</td>\\n\",\n       \"      <td>32.34</td>\\n\",\n       \"      <td>6.99</td>\\n\",\n       \"      <td>672.20</td>\\n\",\n       \"      <td>139.36</td>\\n\",\n       \"      <td>43.43</td>\\n\",\n       \"      <td>479.02</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>131.50</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>119.68</td>\\n\",\n       \"      <td>75.82</td>\\n\",\n       \"      <td>88.04</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>119.68</td>\\n\",\n       \"      <td>55.29</td>\\n\",\n       \"      <td>43.25</td>\\n\",\n       \"      <td>4.09</td>\\n\",\n       \"      <td>32.42</td>\\n\",\n       \"      <td>7.00</td>\\n\",\n       \"      <td>702.90</td>\\n\",\n       \"      <td>142.05</td>\\n\",\n       \"      <td>43.51</td>\\n\",\n       \"      <td>528.40</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>102.12</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>57.92</td>\\n\",\n       \"      <td>95.29</td>\\n\",\n       \"      <td>54.93</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>57.92</td>\\n\",\n       \"      <td>69.02</td>\\n\",\n       \"      <td>51.71</td>\\n\",\n       \"      <td>4.09</td>\\n\",\n       \"      <td>32.38</td>\\n\",\n       \"      <td>6.98</td>\\n\",\n       \"      <td>536.36</td>\\n\",\n       \"      <td>164.18</td>\\n\",\n       \"      <td>43.45</td>\\n\",\n       \"      <td>413.43</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>115.00</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>63.86</td>\\n\",\n       \"      <td>111.04</td>\\n\",\n       \"      <td>61.99</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>63.86</td>\\n\",\n       \"      <td>86.65</td>\\n\",\n       \"      <td>59.25</td>\\n\",\n       \"      <td>4.12</td>\\n\",\n       \"      <td>32.43</td>\\n\",\n       \"      <td>6.97</td>\\n\",\n       \"      <td>583.93</td>\\n\",\n       \"      <td>189.42</td>\\n\",\n       \"      <td>43.52</td>\\n\",\n       \"      <td>473.29</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12087</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>15.02</td>\\n\",\n       \"      <td>50.94</td>\\n\",\n       \"      <td>7.68</td>\\n\",\n       \"      <td>25.06</td>\\n\",\n       \"      <td>19.54</td>\\n\",\n       \"      <td>12.47</td>\\n\",\n       \"      <td>0.47</td>\\n\",\n       \"      <td>8.55</td>\\n\",\n       \"      <td>23.30</td>\\n\",\n       \"      <td>2.24</td>\\n\",\n       \"      <td>12.07</td>\\n\",\n       \"      <td>0.73</td>\\n\",\n       \"      <td>131.18</td>\\n\",\n       \"      <td>46.89</td>\\n\",\n       \"      <td>15.04</td>\\n\",\n       \"      <td>97.07</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12088</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>24.38</td>\\n\",\n       \"      <td>74.09</td>\\n\",\n       \"      <td>3.42</td>\\n\",\n       \"      <td>26.06</td>\\n\",\n       \"      <td>16.53</td>\\n\",\n       \"      <td>11.99</td>\\n\",\n       \"      <td>0.52</td>\\n\",\n       \"      <td>12.72</td>\\n\",\n       \"      <td>30.14</td>\\n\",\n       \"      <td>0.74</td>\\n\",\n       \"      <td>2.21</td>\\n\",\n       \"      <td>0.38</td>\\n\",\n       \"      <td>156.99</td>\\n\",\n       \"      <td>46.19</td>\\n\",\n       \"      <td>3.33</td>\\n\",\n       \"      <td>101.38</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12089</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>22.91</td>\\n\",\n       \"      <td>65.73</td>\\n\",\n       \"      <td>3.45</td>\\n\",\n       \"      <td>29.53</td>\\n\",\n       \"      <td>18.33</td>\\n\",\n       \"      <td>10.71</td>\\n\",\n       \"      <td>0.48</td>\\n\",\n       \"      <td>8.42</td>\\n\",\n       \"      <td>30.96</td>\\n\",\n       \"      <td>0.01</td>\\n\",\n       \"      <td>0.01</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>151.14</td>\\n\",\n       \"      <td>39.40</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>101.88</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12090</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>16.64</td>\\n\",\n       \"      <td>49.97</td>\\n\",\n       \"      <td>4.05</td>\\n\",\n       \"      <td>29.26</td>\\n\",\n       \"      <td>18.80</td>\\n\",\n       \"      <td>10.03</td>\\n\",\n       \"      <td>0.52</td>\\n\",\n       \"      <td>9.84</td>\\n\",\n       \"      <td>28.30</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>129.27</td>\\n\",\n       \"      <td>38.14</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>100.80</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12091</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>15.00</td>\\n\",\n       \"      <td>66.00</td>\\n\",\n       \"      <td>0.40</td>\\n\",\n       \"      <td>26.85</td>\\n\",\n       \"      <td>14.05</td>\\n\",\n       \"      <td>5.20</td>\\n\",\n       \"      <td>0.59</td>\\n\",\n       \"      <td>2.10</td>\\n\",\n       \"      <td>17.05</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>128.09</td>\\n\",\n       \"      <td>19.15</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>66.24</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>7</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>12092 rows \u00d7 19 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"       City   PM2.5    PM10      NO     NO2     NOx    NH3      CO    SO2  \\\\\\n\",\n       \"0         0  110.71  141.54   63.03  111.56  100.04  26.64   63.03  80.15   \\n\",\n       \"1         0  147.57  141.54   59.56  107.46  129.87  26.64   59.56  47.70   \\n\",\n       \"2         0  131.50  141.54  119.68   75.82   88.04  26.64  119.68  55.29   \\n\",\n       \"3         0  102.12  141.54   57.92   95.29   54.93  26.64   57.92  69.02   \\n\",\n       \"4         0  115.00  141.54   63.86  111.04   61.99  26.64   63.86  86.65   \\n\",\n       \"...     ...     ...     ...     ...     ...     ...    ...     ...    ...   \\n\",\n       \"12087    25   15.02   50.94    7.68   25.06   19.54  12.47    0.47   8.55   \\n\",\n       \"12088    25   24.38   74.09    3.42   26.06   16.53  11.99    0.52  12.72   \\n\",\n       \"12089    25   22.91   65.73    3.45   29.53   18.33  10.71    0.48   8.42   \\n\",\n       \"12090    25   16.64   49.97    4.05   29.26   18.80  10.03    0.52   9.84   \\n\",\n       \"12091    25   15.00   66.00    0.40   26.85   14.05   5.20    0.59   2.10   \\n\",\n       \"\\n\",\n       \"          O3  Benzene  Toluene  Xylene  Vehicular Pollution  \\\\\\n\",\n       \"0      57.12     4.08    32.33    6.93               616.55   \\n\",\n       \"1      48.23     4.10    32.34    6.99               672.20   \\n\",\n       \"2      43.25     4.09    32.42    7.00               702.90   \\n\",\n       \"3      51.71     4.09    32.38    6.98               536.36   \\n\",\n       \"4      59.25     4.12    32.43    6.97               583.93   \\n\",\n       \"...      ...      ...      ...     ...                  ...   \\n\",\n       \"12087  23.30     2.24    12.07    0.73               131.18   \\n\",\n       \"12088  30.14     0.74     2.21    0.38               156.99   \\n\",\n       \"12089  30.96     0.01     0.01    0.00               151.14   \\n\",\n       \"12090  28.30     0.00     0.00    0.00               129.27   \\n\",\n       \"12091  17.05     0.00     0.00    0.00               128.09   \\n\",\n       \"\\n\",\n       \"       Industrial Pollution  Organic Pollutants  Inorganic Pollutants  year  \\\\\\n\",\n       \"0                    180.61               43.34                501.57  2019   \\n\",\n       \"1                    139.36               43.43                479.02  2019   \\n\",\n       \"2                    142.05               43.51                528.40  2019   \\n\",\n       \"3                    164.18               43.45                413.43  2019   \\n\",\n       \"4                    189.42               43.52                473.29  2019   \\n\",\n       \"...                     ...                 ...                   ...   ...   \\n\",\n       \"12087                 46.89               15.04                 97.07  2020   \\n\",\n       \"12088                 46.19                3.33                101.38  2020   \\n\",\n       \"12089                 39.40                0.02                101.88  2020   \\n\",\n       \"12090                 38.14                0.00                100.80  2020   \\n\",\n       \"12091                 19.15                0.00                 66.24  2020   \\n\",\n       \"\\n\",\n       \"       month  \\n\",\n       \"0          1  \\n\",\n       \"1          1  \\n\",\n       \"2          1  \\n\",\n       \"3          1  \\n\",\n       \"4          1  \\n\",\n       \"...      ...  \\n\",\n       \"12087      6  \\n\",\n       \"12088      6  \\n\",\n       \"12089      6  \\n\",\n       \"12090      6  \\n\",\n       \"12091      7  \\n\",\n       \"\\n\",\n       \"[12092 rows x 19 columns]\"\n      ]\n     },\n     \"execution_count\": 32,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"X_test = final_df.loc[final_df['year'] > 2018][['City', 'PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene', 'Vehicular Pollution', 'Industrial Pollution', 'Organic Pollutants', 'Inorganic Pollutants', 'year', 'month']]\\n\",\n    \"X_test.reset_index(drop=True, inplace=True)   \\n\",\n    \"X_test\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 33,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0        1474.0\\n\",\n       \"1        1246.0\\n\",\n       \"2        1719.0\\n\",\n       \"3        1264.0\\n\",\n       \"4        1127.0\\n\",\n       \"          ...  \\n\",\n       \"12087      41.0\\n\",\n       \"12088      70.0\\n\",\n       \"12089      68.0\\n\",\n       \"12090      54.0\\n\",\n       \"12091      50.0\\n\",\n       \"Name: AQI, Length: 12092, dtype: float64\"\n      ]\n     },\n     \"execution_count\": 33,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"y_test = final_df.loc[final_df['year'] > 2018].reset_index(drop=True).AQI\\n\",\n    \"\\n\",\n    \"y_test\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 34,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"c:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\xgboost\\\\compat.py:36: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\\n\",\n      \"  from pandas import MultiIndex, Int64Index\\n\",\n      \"c:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\xgboost\\\\data.py:250: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\\n\",\n      \"  elif isinstance(data.columns, (pd.Int64Index, pd.RangeIndex)):\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \\\"\u25b8\\\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \\\"\u25be\\\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \\\"\\\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\\\"sk-container-id-1\\\" class=\\\"sk-top-container\\\"><div class=\\\"sk-text-repr-fallback\\\"><pre>XGBRegressor(base_score=0.5, booster=&#x27;gbtree&#x27;, colsample_bylevel=1,\\n\",\n       \"             colsample_bynode=1, colsample_bytree=1, enable_categorical=False,\\n\",\n       \"             gamma=0, gpu_id=-1, importance_type=None,\\n\",\n       \"             interaction_constraints=&#x27;&#x27;, learning_rate=0.05, max_delta_step=0,\\n\",\n       \"             max_depth=6, min_child_weight=1, missing=nan,\\n\",\n       \"             monotone_constraints=&#x27;()&#x27;, n_estimators=500, n_jobs=10,\\n\",\n       \"             num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0, reg_alpha=0,\\n\",\n       \"             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method=&#x27;exact&#x27;,\\n\",\n       \"             validate_parameters=1, verbosity=None)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\\\"sk-container\\\" hidden><div class=\\\"sk-item\\\"><div class=\\\"sk-estimator sk-toggleable\\\"><input class=\\\"sk-toggleable__control sk-hidden--visually\\\" id=\\\"sk-estimator-id-1\\\" type=\\\"checkbox\\\" checked><label for=\\\"sk-estimator-id-1\\\" class=\\\"sk-toggleable__label sk-toggleable__label-arrow\\\">XGBRegressor</label><div class=\\\"sk-toggleable__content\\\"><pre>XGBRegressor(base_score=0.5, booster=&#x27;gbtree&#x27;, colsample_bylevel=1,\\n\",\n       \"             colsample_bynode=1, colsample_bytree=1, enable_categorical=False,\\n\",\n       \"             gamma=0, gpu_id=-1, importance_type=None,\\n\",\n       \"             interaction_constraints=&#x27;&#x27;, learning_rate=0.05, max_delta_step=0,\\n\",\n       \"             max_depth=6, min_child_weight=1, missing=nan,\\n\",\n       \"             monotone_constraints=&#x27;()&#x27;, n_estimators=500, n_jobs=10,\\n\",\n       \"             num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0, reg_alpha=0,\\n\",\n       \"             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method=&#x27;exact&#x27;,\\n\",\n       \"             validate_parameters=1, verbosity=None)</pre></div></div></div></div></div>\"\n      ],\n      \"text/plain\": [\n       \"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\\n\",\n       \"             colsample_bynode=1, colsample_bytree=1, enable_categorical=False,\\n\",\n       \"             gamma=0, gpu_id=-1, importance_type=None,\\n\",\n       \"             interaction_constraints='', learning_rate=0.05, max_delta_step=0,\\n\",\n       \"             max_depth=6, min_child_weight=1, missing=nan,\\n\",\n       \"             monotone_constraints='()', n_estimators=500, n_jobs=10,\\n\",\n       \"             num_parallel_tree=1, predictor='auto', random_state=0, reg_alpha=0,\\n\",\n       \"             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method='exact',\\n\",\n       \"             validate_parameters=1, verbosity=None)\"\n      ]\n     },\n     \"execution_count\": 34,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from xgboost import XGBRegressor\\n\",\n    \"model = XGBRegressor(n_estimators=500, learning_rate=0.05, n_jobs=10)\\n\",\n    \"model.fit(X_train, y_train)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 35,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"0.9778494297545366\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"score = model.score(X_train, y_train)\\n\",\n    \"print(score)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 36,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(12092,)\"\n      ]\n     },\n     \"execution_count\": 36,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"y_preds = model.predict(X_test)\\n\",\n    \"y_preds.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 37,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"46.49274973537498\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from sklearn.metrics import mean_squared_error\\n\",\n    \"\\n\",\n    \"rmse = mean_squared_error(y_test, y_preds, squared=False)\\n\",\n    \"print(rmse)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 38,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"C:\\\\Users\\\\techi\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_4260\\\\426775689.py:4: SettingWithCopyWarning: \\n\",\n      \"A value is trying to be set on a copy of a slice from a DataFrame\\n\",\n      \"\\n\",\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\n      \"  X_test['AQI_predicted'][ind] = y_preds[ind]\\n\",\n      \"C:\\\\Users\\\\techi\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_4260\\\\426775689.py:5: SettingWithCopyWarning: \\n\",\n      \"A value is trying to be set on a copy of a slice from a DataFrame\\n\",\n      \"\\n\",\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\n      \"  X_test['AQI'][ind] = y_test[ind]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"X_test['AQI_predicted'] = np.nan\\n\",\n    \"X_test['AQI'] = np.nan\\n\",\n    \"for ind in X_test.index:\\n\",\n    \"    X_test['AQI_predicted'][ind] = y_preds[ind]\\n\",\n    \"    X_test['AQI'][ind] = y_test[ind]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 39,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"      <th>Organic Pollutants</th>\\n\",\n       \"      <th>Inorganic Pollutants</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>month</th>\\n\",\n       \"      <th>AQI_predicted</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>110.71</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>63.03</td>\\n\",\n       \"      <td>111.56</td>\\n\",\n       \"      <td>100.04</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>63.03</td>\\n\",\n       \"      <td>80.15</td>\\n\",\n       \"      <td>57.12</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>32.33</td>\\n\",\n       \"      <td>6.93</td>\\n\",\n       \"      <td>616.55</td>\\n\",\n       \"      <td>180.61</td>\\n\",\n       \"      <td>43.34</td>\\n\",\n       \"      <td>501.57</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1186.507690</td>\\n\",\n       \"      <td>1474.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>147.57</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>59.56</td>\\n\",\n       \"      <td>107.46</td>\\n\",\n       \"      <td>129.87</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>59.56</td>\\n\",\n       \"      <td>47.70</td>\\n\",\n       \"      <td>48.23</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>32.34</td>\\n\",\n       \"      <td>6.99</td>\\n\",\n       \"      <td>672.20</td>\\n\",\n       \"      <td>139.36</td>\\n\",\n       \"      <td>43.43</td>\\n\",\n       \"      <td>479.02</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1009.924927</td>\\n\",\n       \"      <td>1246.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>131.50</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>119.68</td>\\n\",\n       \"      <td>75.82</td>\\n\",\n       \"      <td>88.04</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>119.68</td>\\n\",\n       \"      <td>55.29</td>\\n\",\n       \"      <td>43.25</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>32.42</td>\\n\",\n       \"      <td>7.00</td>\\n\",\n       \"      <td>702.90</td>\\n\",\n       \"      <td>142.05</td>\\n\",\n       \"      <td>43.51</td>\\n\",\n       \"      <td>528.40</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1558.571655</td>\\n\",\n       \"      <td>1719.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>102.12</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>57.92</td>\\n\",\n       \"      <td>95.29</td>\\n\",\n       \"      <td>54.93</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>57.92</td>\\n\",\n       \"      <td>69.02</td>\\n\",\n       \"      <td>51.71</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>32.38</td>\\n\",\n       \"      <td>6.98</td>\\n\",\n       \"      <td>536.36</td>\\n\",\n       \"      <td>164.18</td>\\n\",\n       \"      <td>43.45</td>\\n\",\n       \"      <td>413.43</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1078.675049</td>\\n\",\n       \"      <td>1264.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>115.00</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>63.86</td>\\n\",\n       \"      <td>111.04</td>\\n\",\n       \"      <td>61.99</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>63.86</td>\\n\",\n       \"      <td>86.65</td>\\n\",\n       \"      <td>59.25</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>32.43</td>\\n\",\n       \"      <td>6.97</td>\\n\",\n       \"      <td>583.93</td>\\n\",\n       \"      <td>189.42</td>\\n\",\n       \"      <td>43.52</td>\\n\",\n       \"      <td>473.29</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>946.966309</td>\\n\",\n       \"      <td>1127.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>195</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>42.43</td>\\n\",\n       \"      <td>116.70</td>\\n\",\n       \"      <td>32.10</td>\\n\",\n       \"      <td>114.44</td>\\n\",\n       \"      <td>92.42</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>32.10</td>\\n\",\n       \"      <td>142.27</td>\\n\",\n       \"      <td>38.20</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>80.04</td>\\n\",\n       \"      <td>1.48</td>\\n\",\n       \"      <td>456.83</td>\\n\",\n       \"      <td>268.29</td>\\n\",\n       \"      <td>87.82</td>\\n\",\n       \"      <td>478.17</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>7</td>\\n\",\n       \"      <td>558.267273</td>\\n\",\n       \"      <td>455.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>196</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>38.99</td>\\n\",\n       \"      <td>114.94</td>\\n\",\n       \"      <td>31.97</td>\\n\",\n       \"      <td>103.79</td>\\n\",\n       \"      <td>87.09</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>31.97</td>\\n\",\n       \"      <td>156.48</td>\\n\",\n       \"      <td>32.57</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>80.04</td>\\n\",\n       \"      <td>1.48</td>\\n\",\n       \"      <td>435.39</td>\\n\",\n       \"      <td>276.87</td>\\n\",\n       \"      <td>87.82</td>\\n\",\n       \"      <td>470.51</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>7</td>\\n\",\n       \"      <td>559.851257</td>\\n\",\n       \"      <td>488.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>197</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>34.92</td>\\n\",\n       \"      <td>114.11</td>\\n\",\n       \"      <td>30.50</td>\\n\",\n       \"      <td>110.39</td>\\n\",\n       \"      <td>88.63</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>30.50</td>\\n\",\n       \"      <td>116.97</td>\\n\",\n       \"      <td>37.07</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>80.04</td>\\n\",\n       \"      <td>1.48</td>\\n\",\n       \"      <td>435.69</td>\\n\",\n       \"      <td>241.86</td>\\n\",\n       \"      <td>87.82</td>\\n\",\n       \"      <td>440.70</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>7</td>\\n\",\n       \"      <td>600.163086</td>\\n\",\n       \"      <td>513.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>198</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>32.70</td>\\n\",\n       \"      <td>105.78</td>\\n\",\n       \"      <td>26.00</td>\\n\",\n       \"      <td>103.72</td>\\n\",\n       \"      <td>80.25</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>26.00</td>\\n\",\n       \"      <td>132.41</td>\\n\",\n       \"      <td>45.92</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>80.04</td>\\n\",\n       \"      <td>1.48</td>\\n\",\n       \"      <td>401.09</td>\\n\",\n       \"      <td>266.15</td>\\n\",\n       \"      <td>87.82</td>\\n\",\n       \"      <td>440.94</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>7</td>\\n\",\n       \"      <td>542.183105</td>\\n\",\n       \"      <td>466.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>199</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>44.65</td>\\n\",\n       \"      <td>120.74</td>\\n\",\n       \"      <td>25.34</td>\\n\",\n       \"      <td>135.12</td>\\n\",\n       \"      <td>94.80</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>25.34</td>\\n\",\n       \"      <td>104.15</td>\\n\",\n       \"      <td>58.38</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>80.04</td>\\n\",\n       \"      <td>1.48</td>\\n\",\n       \"      <td>472.63</td>\\n\",\n       \"      <td>250.35</td>\\n\",\n       \"      <td>87.82</td>\\n\",\n       \"      <td>469.77</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>7</td>\\n\",\n       \"      <td>493.770660</td>\\n\",\n       \"      <td>429.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>200 rows \u00d7 21 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"     City   PM2.5    PM10      NO     NO2     NOx    NH3      CO     SO2  \\\\\\n\",\n       \"0       0  110.71  141.54   63.03  111.56  100.04  26.64   63.03   80.15   \\n\",\n       \"1       0  147.57  141.54   59.56  107.46  129.87  26.64   59.56   47.70   \\n\",\n       \"2       0  131.50  141.54  119.68   75.82   88.04  26.64  119.68   55.29   \\n\",\n       \"3       0  102.12  141.54   57.92   95.29   54.93  26.64   57.92   69.02   \\n\",\n       \"4       0  115.00  141.54   63.86  111.04   61.99  26.64   63.86   86.65   \\n\",\n       \"..    ...     ...     ...     ...     ...     ...    ...     ...     ...   \\n\",\n       \"195     0   42.43  116.70   32.10  114.44   92.42  26.64   32.10  142.27   \\n\",\n       \"196     0   38.99  114.94   31.97  103.79   87.09  26.64   31.97  156.48   \\n\",\n       \"197     0   34.92  114.11   30.50  110.39   88.63  26.64   30.50  116.97   \\n\",\n       \"198     0   32.70  105.78   26.00  103.72   80.25  26.64   26.00  132.41   \\n\",\n       \"199     0   44.65  120.74   25.34  135.12   94.80  26.64   25.34  104.15   \\n\",\n       \"\\n\",\n       \"        O3  ...  Toluene  Xylene  Vehicular Pollution  Industrial Pollution  \\\\\\n\",\n       \"0    57.12  ...    32.33    6.93               616.55                180.61   \\n\",\n       \"1    48.23  ...    32.34    6.99               672.20                139.36   \\n\",\n       \"2    43.25  ...    32.42    7.00               702.90                142.05   \\n\",\n       \"3    51.71  ...    32.38    6.98               536.36                164.18   \\n\",\n       \"4    59.25  ...    32.43    6.97               583.93                189.42   \\n\",\n       \"..     ...  ...      ...     ...                  ...                   ...   \\n\",\n       \"195  38.20  ...    80.04    1.48               456.83                268.29   \\n\",\n       \"196  32.57  ...    80.04    1.48               435.39                276.87   \\n\",\n       \"197  37.07  ...    80.04    1.48               435.69                241.86   \\n\",\n       \"198  45.92  ...    80.04    1.48               401.09                266.15   \\n\",\n       \"199  58.38  ...    80.04    1.48               472.63                250.35   \\n\",\n       \"\\n\",\n       \"     Organic Pollutants  Inorganic Pollutants  year  month  AQI_predicted  \\\\\\n\",\n       \"0                 43.34                501.57  2019      1    1186.507690   \\n\",\n       \"1                 43.43                479.02  2019      1    1009.924927   \\n\",\n       \"2                 43.51                528.40  2019      1    1558.571655   \\n\",\n       \"3                 43.45                413.43  2019      1    1078.675049   \\n\",\n       \"4                 43.52                473.29  2019      1     946.966309   \\n\",\n       \"..                  ...                   ...   ...    ...            ...   \\n\",\n       \"195               87.82                478.17  2019      7     558.267273   \\n\",\n       \"196               87.82                470.51  2019      7     559.851257   \\n\",\n       \"197               87.82                440.70  2019      7     600.163086   \\n\",\n       \"198               87.82                440.94  2019      7     542.183105   \\n\",\n       \"199               87.82                469.77  2019      7     493.770660   \\n\",\n       \"\\n\",\n       \"        AQI  \\n\",\n       \"0    1474.0  \\n\",\n       \"1    1246.0  \\n\",\n       \"2    1719.0  \\n\",\n       \"3    1264.0  \\n\",\n       \"4    1127.0  \\n\",\n       \"..      ...  \\n\",\n       \"195   455.0  \\n\",\n       \"196   488.0  \\n\",\n       \"197   513.0  \\n\",\n       \"198   466.0  \\n\",\n       \"199   429.0  \\n\",\n       \"\\n\",\n       \"[200 rows x 21 columns]\"\n      ]\n     },\n     \"execution_count\": 39,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"X_test.head(200)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 40,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"city_median_AQI_per_year_test = X_test[['City','AQI','year']].groupby(['City','year']).median().reset_index()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 41,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>AQI</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>455.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>146.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Aizawl</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>23.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Amaravati</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>76.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Amaravati</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>54.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>Amritsar</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>94.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>Amritsar</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>81.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>Bengaluru</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>89.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8</th>\\n\",\n       \"      <td>Bengaluru</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>77.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>9</th>\\n\",\n       \"      <td>Bhopal</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>146.500000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>10</th>\\n\",\n       \"      <td>Bhopal</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>111.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>11</th>\\n\",\n       \"      <td>Brajrajnagar</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>116.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12</th>\\n\",\n       \"      <td>Brajrajnagar</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>126.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>13</th>\\n\",\n       \"      <td>Chandigarh</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>107.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>14</th>\\n\",\n       \"      <td>Chandigarh</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>71.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>15</th>\\n\",\n       \"      <td>Chennai</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>92.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>16</th>\\n\",\n       \"      <td>Chennai</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>76.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>17</th>\\n\",\n       \"      <td>Coimbatore</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>77.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>18</th>\\n\",\n       \"      <td>Coimbatore</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>74.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>19</th>\\n\",\n       \"      <td>Delhi</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>209.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>20</th>\\n\",\n       \"      <td>Delhi</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>148.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>21</th>\\n\",\n       \"      <td>Ernakulam</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>95.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>22</th>\\n\",\n       \"      <td>Gurugram</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>173.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>23</th>\\n\",\n       \"      <td>Gurugram</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>141.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>24</th>\\n\",\n       \"      <td>Guwahati</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>91.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25</th>\\n\",\n       \"      <td>Guwahati</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>148.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>26</th>\\n\",\n       \"      <td>Hyderabad</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>94.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>27</th>\\n\",\n       \"      <td>Hyderabad</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>73.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>28</th>\\n\",\n       \"      <td>Jaipur</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>110.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29</th>\\n\",\n       \"      <td>Jaipur</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>106.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>30</th>\\n\",\n       \"      <td>Jorapokhar</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>114.651163</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>31</th>\\n\",\n       \"      <td>Jorapokhar</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>138.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>32</th>\\n\",\n       \"      <td>Kochi</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>98.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>33</th>\\n\",\n       \"      <td>Kolkata</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>97.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>34</th>\\n\",\n       \"      <td>Kolkata</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>92.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>35</th>\\n\",\n       \"      <td>Lucknow</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>193.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>36</th>\\n\",\n       \"      <td>Lucknow</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>136.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>37</th>\\n\",\n       \"      <td>Mumbai</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>93.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>38</th>\\n\",\n       \"      <td>Mumbai</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>82.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>39</th>\\n\",\n       \"      <td>Patna</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>184.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>40</th>\\n\",\n       \"      <td>Patna</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>147.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>41</th>\\n\",\n       \"      <td>Shillong</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>44.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>42</th>\\n\",\n       \"      <td>Shillong</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>49.883721</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>43</th>\\n\",\n       \"      <td>Talcher</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>123.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>44</th>\\n\",\n       \"      <td>Talcher</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>117.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>45</th>\\n\",\n       \"      <td>Thiruvananthapuram</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>69.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>46</th>\\n\",\n       \"      <td>Thiruvananthapuram</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>64.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>47</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>106.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>48</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>81.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                  City  year         AQI\\n\",\n       \"0            Ahmedabad  2019  455.000000\\n\",\n       \"1            Ahmedabad  2020  146.000000\\n\",\n       \"2               Aizawl  2020   23.000000\\n\",\n       \"3            Amaravati  2019   76.000000\\n\",\n       \"4            Amaravati  2020   54.000000\\n\",\n       \"5             Amritsar  2019   94.000000\\n\",\n       \"6             Amritsar  2020   81.000000\\n\",\n       \"7            Bengaluru  2019   89.000000\\n\",\n       \"8            Bengaluru  2020   77.000000\\n\",\n       \"9               Bhopal  2019  146.500000\\n\",\n       \"10              Bhopal  2020  111.000000\\n\",\n       \"11        Brajrajnagar  2019  116.000000\\n\",\n       \"12        Brajrajnagar  2020  126.000000\\n\",\n       \"13          Chandigarh  2019  107.000000\\n\",\n       \"14          Chandigarh  2020   71.000000\\n\",\n       \"15             Chennai  2019   92.000000\\n\",\n       \"16             Chennai  2020   76.000000\\n\",\n       \"17          Coimbatore  2019   77.000000\\n\",\n       \"18          Coimbatore  2020   74.000000\\n\",\n       \"19               Delhi  2019  209.000000\\n\",\n       \"20               Delhi  2020  148.000000\\n\",\n       \"21           Ernakulam  2020   95.000000\\n\",\n       \"22            Gurugram  2019  173.000000\\n\",\n       \"23            Gurugram  2020  141.000000\\n\",\n       \"24            Guwahati  2019   91.000000\\n\",\n       \"25            Guwahati  2020  148.000000\\n\",\n       \"26           Hyderabad  2019   94.000000\\n\",\n       \"27           Hyderabad  2020   73.000000\\n\",\n       \"28              Jaipur  2019  110.000000\\n\",\n       \"29              Jaipur  2020  106.000000\\n\",\n       \"30          Jorapokhar  2019  114.651163\\n\",\n       \"31          Jorapokhar  2020  138.000000\\n\",\n       \"32               Kochi  2020   98.000000\\n\",\n       \"33             Kolkata  2019   97.000000\\n\",\n       \"34             Kolkata  2020   92.000000\\n\",\n       \"35             Lucknow  2019  193.000000\\n\",\n       \"36             Lucknow  2020  136.000000\\n\",\n       \"37              Mumbai  2019   93.000000\\n\",\n       \"38              Mumbai  2020   82.000000\\n\",\n       \"39               Patna  2019  184.000000\\n\",\n       \"40               Patna  2020  147.000000\\n\",\n       \"41            Shillong  2019   44.000000\\n\",\n       \"42            Shillong  2020   49.883721\\n\",\n       \"43             Talcher  2019  123.000000\\n\",\n       \"44             Talcher  2020  117.000000\\n\",\n       \"45  Thiruvananthapuram  2019   69.000000\\n\",\n       \"46  Thiruvananthapuram  2020   64.000000\\n\",\n       \"47       Visakhapatnam  2019  106.000000\\n\",\n       \"48       Visakhapatnam  2020   81.000000\"\n      ]\n     },\n     \"execution_count\": 41,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"city_median_AQI_per_year_test['City']=le.inverse_transform(city_median_AQI_per_year_test['City'])\\n\",\n    \"city_median_AQI_per_year_test\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 42,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1500x800 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.figure(figsize=(15,8))\\n\",\n    \"sns.barplot(x='City', y='AQI', data=city_median_AQI_per_year_test,hue='year').set(title ='City vs Median AQI per year')\\n\",\n    \"plt.xticks(rotation=90)\\n\",\n    \"plt.legend(loc=(1.01, 1))\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 43,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>AQI_predicted</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>497.356934</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Ahmedabad</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>181.523926</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Aizawl</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>56.157894</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Amaravati</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>74.475441</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Amaravati</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>68.160255</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>Amritsar</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>96.089272</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>Amritsar</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>90.253029</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>Bengaluru</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>88.249664</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8</th>\\n\",\n       \"      <td>Bengaluru</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>77.836243</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>9</th>\\n\",\n       \"      <td>Bhopal</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>158.006180</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>10</th>\\n\",\n       \"      <td>Bhopal</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>110.654266</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>11</th>\\n\",\n       \"      <td>Brajrajnagar</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>127.240646</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12</th>\\n\",\n       \"      <td>Brajrajnagar</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>158.138916</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>13</th>\\n\",\n       \"      <td>Chandigarh</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>113.270340</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>14</th>\\n\",\n       \"      <td>Chandigarh</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>79.965584</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>15</th>\\n\",\n       \"      <td>Chennai</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>84.210533</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>16</th>\\n\",\n       \"      <td>Chennai</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>88.648903</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>17</th>\\n\",\n       \"      <td>Coimbatore</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>88.451118</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>18</th>\\n\",\n       \"      <td>Coimbatore</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>98.433853</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>19</th>\\n\",\n       \"      <td>Delhi</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>220.540451</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>20</th>\\n\",\n       \"      <td>Delhi</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>152.999207</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>21</th>\\n\",\n       \"      <td>Ernakulam</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>101.220333</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>22</th>\\n\",\n       \"      <td>Gurugram</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>167.739212</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>23</th>\\n\",\n       \"      <td>Gurugram</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>136.080643</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>24</th>\\n\",\n       \"      <td>Guwahati</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>100.264885</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25</th>\\n\",\n       \"      <td>Guwahati</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>139.772034</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>26</th>\\n\",\n       \"      <td>Hyderabad</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>93.330879</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>27</th>\\n\",\n       \"      <td>Hyderabad</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>81.613045</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>28</th>\\n\",\n       \"      <td>Jaipur</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>115.021461</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29</th>\\n\",\n       \"      <td>Jaipur</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>109.830193</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>30</th>\\n\",\n       \"      <td>Jorapokhar</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>115.822853</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>31</th>\\n\",\n       \"      <td>Jorapokhar</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>136.280579</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>32</th>\\n\",\n       \"      <td>Kochi</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>86.128380</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>33</th>\\n\",\n       \"      <td>Kolkata</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>98.974945</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>34</th>\\n\",\n       \"      <td>Kolkata</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>93.204521</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>35</th>\\n\",\n       \"      <td>Lucknow</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>190.335403</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>36</th>\\n\",\n       \"      <td>Lucknow</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>145.659119</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>37</th>\\n\",\n       \"      <td>Mumbai</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>92.529053</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>38</th>\\n\",\n       \"      <td>Mumbai</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>88.552422</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>39</th>\\n\",\n       \"      <td>Patna</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>175.100677</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>40</th>\\n\",\n       \"      <td>Patna</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>130.012024</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>41</th>\\n\",\n       \"      <td>Shillong</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>61.801003</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>42</th>\\n\",\n       \"      <td>Shillong</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>72.794922</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>43</th>\\n\",\n       \"      <td>Talcher</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>114.360558</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>44</th>\\n\",\n       \"      <td>Talcher</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>116.773666</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>45</th>\\n\",\n       \"      <td>Thiruvananthapuram</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>73.767097</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>46</th>\\n\",\n       \"      <td>Thiruvananthapuram</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>69.124825</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>47</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>2019</td>\\n\",\n       \"      <td>98.667175</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>48</th>\\n\",\n       \"      <td>Visakhapatnam</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>83.914513</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                  City  year  AQI_predicted\\n\",\n       \"0            Ahmedabad  2019     497.356934\\n\",\n       \"1            Ahmedabad  2020     181.523926\\n\",\n       \"2               Aizawl  2020      56.157894\\n\",\n       \"3            Amaravati  2019      74.475441\\n\",\n       \"4            Amaravati  2020      68.160255\\n\",\n       \"5             Amritsar  2019      96.089272\\n\",\n       \"6             Amritsar  2020      90.253029\\n\",\n       \"7            Bengaluru  2019      88.249664\\n\",\n       \"8            Bengaluru  2020      77.836243\\n\",\n       \"9               Bhopal  2019     158.006180\\n\",\n       \"10              Bhopal  2020     110.654266\\n\",\n       \"11        Brajrajnagar  2019     127.240646\\n\",\n       \"12        Brajrajnagar  2020     158.138916\\n\",\n       \"13          Chandigarh  2019     113.270340\\n\",\n       \"14          Chandigarh  2020      79.965584\\n\",\n       \"15             Chennai  2019      84.210533\\n\",\n       \"16             Chennai  2020      88.648903\\n\",\n       \"17          Coimbatore  2019      88.451118\\n\",\n       \"18          Coimbatore  2020      98.433853\\n\",\n       \"19               Delhi  2019     220.540451\\n\",\n       \"20               Delhi  2020     152.999207\\n\",\n       \"21           Ernakulam  2020     101.220333\\n\",\n       \"22            Gurugram  2019     167.739212\\n\",\n       \"23            Gurugram  2020     136.080643\\n\",\n       \"24            Guwahati  2019     100.264885\\n\",\n       \"25            Guwahati  2020     139.772034\\n\",\n       \"26           Hyderabad  2019      93.330879\\n\",\n       \"27           Hyderabad  2020      81.613045\\n\",\n       \"28              Jaipur  2019     115.021461\\n\",\n       \"29              Jaipur  2020     109.830193\\n\",\n       \"30          Jorapokhar  2019     115.822853\\n\",\n       \"31          Jorapokhar  2020     136.280579\\n\",\n       \"32               Kochi  2020      86.128380\\n\",\n       \"33             Kolkata  2019      98.974945\\n\",\n       \"34             Kolkata  2020      93.204521\\n\",\n       \"35             Lucknow  2019     190.335403\\n\",\n       \"36             Lucknow  2020     145.659119\\n\",\n       \"37              Mumbai  2019      92.529053\\n\",\n       \"38              Mumbai  2020      88.552422\\n\",\n       \"39               Patna  2019     175.100677\\n\",\n       \"40               Patna  2020     130.012024\\n\",\n       \"41            Shillong  2019      61.801003\\n\",\n       \"42            Shillong  2020      72.794922\\n\",\n       \"43             Talcher  2019     114.360558\\n\",\n       \"44             Talcher  2020     116.773666\\n\",\n       \"45  Thiruvananthapuram  2019      73.767097\\n\",\n       \"46  Thiruvananthapuram  2020      69.124825\\n\",\n       \"47       Visakhapatnam  2019      98.667175\\n\",\n       \"48       Visakhapatnam  2020      83.914513\"\n      ]\n     },\n     \"execution_count\": 43,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"city_median_AQI_per_year_pred = X_test[['City','AQI_predicted','year']].groupby(['City','year']).median().reset_index()\\n\",\n    \"\\n\",\n    \"city_median_AQI_per_year_pred['City']=le.inverse_transform(city_median_AQI_per_year_pred['City'])\\n\",\n    \"city_median_AQI_per_year_pred\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 44,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1500x800 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.figure(figsize=(15,8))\\n\",\n    \"sns.barplot(x='City', y='AQI_predicted', data=city_median_AQI_per_year_pred,hue='year').set(title ='City vs Median AQI per year predicted')\\n\",\n    \"plt.xticks(rotation=90)\\n\",\n    \"plt.legend(loc=(1.01, 1))\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 45,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>City</th>\\n\",\n       \"      <th>PM2.5</th>\\n\",\n       \"      <th>PM10</th>\\n\",\n       \"      <th>NO</th>\\n\",\n       \"      <th>NO2</th>\\n\",\n       \"      <th>NOx</th>\\n\",\n       \"      <th>NH3</th>\\n\",\n       \"      <th>CO</th>\\n\",\n       \"      <th>SO2</th>\\n\",\n       \"      <th>O3</th>\\n\",\n       \"      <th>Benzene</th>\\n\",\n       \"      <th>Toluene</th>\\n\",\n       \"      <th>Xylene</th>\\n\",\n       \"      <th>Vehicular Pollution</th>\\n\",\n       \"      <th>Industrial Pollution</th>\\n\",\n       \"      <th>Organic Pollutants</th>\\n\",\n       \"      <th>Inorganic Pollutants</th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>month</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>18.22</td>\\n\",\n       \"      <td>17.15</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.92</td>\\n\",\n       \"      <td>27.64</td>\\n\",\n       \"      <td>133.36</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>278.63</td>\\n\",\n       \"      <td>161.02</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>224.85</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>15.69</td>\\n\",\n       \"      <td>16.46</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>24.55</td>\\n\",\n       \"      <td>34.06</td>\\n\",\n       \"      <td>3.68</td>\\n\",\n       \"      <td>5.50</td>\\n\",\n       \"      <td>3.77</td>\\n\",\n       \"      <td>275.51</td>\\n\",\n       \"      <td>71.56</td>\\n\",\n       \"      <td>12.95</td>\\n\",\n       \"      <td>119.34</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>19.30</td>\\n\",\n       \"      <td>29.70</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>17.40</td>\\n\",\n       \"      <td>29.07</td>\\n\",\n       \"      <td>30.70</td>\\n\",\n       \"      <td>6.80</td>\\n\",\n       \"      <td>16.40</td>\\n\",\n       \"      <td>2.25</td>\\n\",\n       \"      <td>325.22</td>\\n\",\n       \"      <td>85.22</td>\\n\",\n       \"      <td>25.45</td>\\n\",\n       \"      <td>170.21</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.48</td>\\n\",\n       \"      <td>17.97</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>1.70</td>\\n\",\n       \"      <td>18.59</td>\\n\",\n       \"      <td>36.08</td>\\n\",\n       \"      <td>4.43</td>\\n\",\n       \"      <td>10.14</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>281.27</td>\\n\",\n       \"      <td>70.24</td>\\n\",\n       \"      <td>15.57</td>\\n\",\n       \"      <td>121.16</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>73.24</td>\\n\",\n       \"      <td>141.54</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>21.42</td>\\n\",\n       \"      <td>37.76</td>\\n\",\n       \"      <td>26.64</td>\\n\",\n       \"      <td>22.10</td>\\n\",\n       \"      <td>39.33</td>\\n\",\n       \"      <td>39.31</td>\\n\",\n       \"      <td>7.01</td>\\n\",\n       \"      <td>18.89</td>\\n\",\n       \"      <td>2.78</td>\\n\",\n       \"      <td>344.80</td>\\n\",\n       \"      <td>107.32</td>\\n\",\n       \"      <td>28.68</td>\\n\",\n       \"      <td>208.66</td>\\n\",\n       \"      <td>2015</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29526</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>15.02</td>\\n\",\n       \"      <td>50.94</td>\\n\",\n       \"      <td>7.68</td>\\n\",\n       \"      <td>25.06</td>\\n\",\n       \"      <td>19.54</td>\\n\",\n       \"      <td>12.47</td>\\n\",\n       \"      <td>0.47</td>\\n\",\n       \"      <td>8.55</td>\\n\",\n       \"      <td>23.30</td>\\n\",\n       \"      <td>2.24</td>\\n\",\n       \"      <td>12.07</td>\\n\",\n       \"      <td>0.73</td>\\n\",\n       \"      <td>131.18</td>\\n\",\n       \"      <td>46.89</td>\\n\",\n       \"      <td>15.04</td>\\n\",\n       \"      <td>97.07</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29527</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>24.38</td>\\n\",\n       \"      <td>74.09</td>\\n\",\n       \"      <td>3.42</td>\\n\",\n       \"      <td>26.06</td>\\n\",\n       \"      <td>16.53</td>\\n\",\n       \"      <td>11.99</td>\\n\",\n       \"      <td>0.52</td>\\n\",\n       \"      <td>12.72</td>\\n\",\n       \"      <td>30.14</td>\\n\",\n       \"      <td>0.74</td>\\n\",\n       \"      <td>2.21</td>\\n\",\n       \"      <td>0.38</td>\\n\",\n       \"      <td>156.99</td>\\n\",\n       \"      <td>46.19</td>\\n\",\n       \"      <td>3.33</td>\\n\",\n       \"      <td>101.38</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29528</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>22.91</td>\\n\",\n       \"      <td>65.73</td>\\n\",\n       \"      <td>3.45</td>\\n\",\n       \"      <td>29.53</td>\\n\",\n       \"      <td>18.33</td>\\n\",\n       \"      <td>10.71</td>\\n\",\n       \"      <td>0.48</td>\\n\",\n       \"      <td>8.42</td>\\n\",\n       \"      <td>30.96</td>\\n\",\n       \"      <td>0.01</td>\\n\",\n       \"      <td>0.01</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>151.14</td>\\n\",\n       \"      <td>39.40</td>\\n\",\n       \"      <td>0.02</td>\\n\",\n       \"      <td>101.88</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29529</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>16.64</td>\\n\",\n       \"      <td>49.97</td>\\n\",\n       \"      <td>4.05</td>\\n\",\n       \"      <td>29.26</td>\\n\",\n       \"      <td>18.80</td>\\n\",\n       \"      <td>10.03</td>\\n\",\n       \"      <td>0.52</td>\\n\",\n       \"      <td>9.84</td>\\n\",\n       \"      <td>28.30</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>129.27</td>\\n\",\n       \"      <td>38.14</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>100.80</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29530</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>15.00</td>\\n\",\n       \"      <td>66.00</td>\\n\",\n       \"      <td>0.40</td>\\n\",\n       \"      <td>26.85</td>\\n\",\n       \"      <td>14.05</td>\\n\",\n       \"      <td>5.20</td>\\n\",\n       \"      <td>0.59</td>\\n\",\n       \"      <td>2.10</td>\\n\",\n       \"      <td>17.05</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>128.09</td>\\n\",\n       \"      <td>19.15</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>66.24</td>\\n\",\n       \"      <td>2020</td>\\n\",\n       \"      <td>7</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>29531 rows \u00d7 19 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"       City  PM2.5    PM10     NO    NO2    NOx    NH3     CO    SO2      O3  \\\\\\n\",\n       \"0         0  73.24  141.54   0.92  18.22  17.15  26.64   0.92  27.64  133.36   \\n\",\n       \"1         0  73.24  141.54   0.97  15.69  16.46  26.64   0.97  24.55   34.06   \\n\",\n       \"2         0  73.24  141.54  17.40  19.30  29.70  26.64  17.40  29.07   30.70   \\n\",\n       \"3         0  73.24  141.54   1.70  18.48  17.97  26.64   1.70  18.59   36.08   \\n\",\n       \"4         0  73.24  141.54  22.10  21.42  37.76  26.64  22.10  39.33   39.31   \\n\",\n       \"...     ...    ...     ...    ...    ...    ...    ...    ...    ...     ...   \\n\",\n       \"29526    25  15.02   50.94   7.68  25.06  19.54  12.47   0.47   8.55   23.30   \\n\",\n       \"29527    25  24.38   74.09   3.42  26.06  16.53  11.99   0.52  12.72   30.14   \\n\",\n       \"29528    25  22.91   65.73   3.45  29.53  18.33  10.71   0.48   8.42   30.96   \\n\",\n       \"29529    25  16.64   49.97   4.05  29.26  18.80  10.03   0.52   9.84   28.30   \\n\",\n       \"29530    25  15.00   66.00   0.40  26.85  14.05   5.20   0.59   2.10   17.05   \\n\",\n       \"\\n\",\n       \"       Benzene  Toluene  Xylene  Vehicular Pollution  Industrial Pollution  \\\\\\n\",\n       \"0         0.00     0.02    0.00               278.63                161.02   \\n\",\n       \"1         3.68     5.50    3.77               275.51                 71.56   \\n\",\n       \"2         6.80    16.40    2.25               325.22                 85.22   \\n\",\n       \"3         4.43    10.14    1.00               281.27                 70.24   \\n\",\n       \"4         7.01    18.89    2.78               344.80                107.32   \\n\",\n       \"...        ...      ...     ...                  ...                   ...   \\n\",\n       \"29526     2.24    12.07    0.73               131.18                 46.89   \\n\",\n       \"29527     0.74     2.21    0.38               156.99                 46.19   \\n\",\n       \"29528     0.01     0.01    0.00               151.14                 39.40   \\n\",\n       \"29529     0.00     0.00    0.00               129.27                 38.14   \\n\",\n       \"29530     0.00     0.00    0.00               128.09                 19.15   \\n\",\n       \"\\n\",\n       \"       Organic Pollutants  Inorganic Pollutants  year  month  \\n\",\n       \"0                    0.02                224.85  2015      1  \\n\",\n       \"1                   12.95                119.34  2015      1  \\n\",\n       \"2                   25.45                170.21  2015      1  \\n\",\n       \"3                   15.57                121.16  2015      1  \\n\",\n       \"4                   28.68                208.66  2015      1  \\n\",\n       \"...                   ...                   ...   ...    ...  \\n\",\n       \"29526               15.04                 97.07  2020      6  \\n\",\n       \"29527                3.33                101.38  2020      6  \\n\",\n       \"29528                0.02                101.88  2020      6  \\n\",\n       \"29529                0.00                100.80  2020      6  \\n\",\n       \"29530                0.00                 66.24  2020      7  \\n\",\n       \"\\n\",\n       \"[29531 rows x 19 columns]\"\n      ]\n     },\n     \"execution_count\": 45,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"X_final = final_df[['City', 'PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene', 'Vehicular Pollution', 'Industrial Pollution', 'Organic Pollutants', 'Inorganic Pollutants', 'year', 'month']]\\n\",\n    \"X_final\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 46,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0        209.0\\n\",\n       \"1        209.0\\n\",\n       \"2        209.0\\n\",\n       \"3        209.0\\n\",\n       \"4        209.0\\n\",\n       \"         ...  \\n\",\n       \"29526     41.0\\n\",\n       \"29527     70.0\\n\",\n       \"29528     68.0\\n\",\n       \"29529     54.0\\n\",\n       \"29530     50.0\\n\",\n       \"Name: AQI, Length: 29531, dtype: float64\"\n      ]\n     },\n     \"execution_count\": 46,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"y_final = final_df.AQI\\n\",\n    \"y_final\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Finally fitting model to whole data\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 47,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"c:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\xgboost\\\\data.py:250: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\\n\",\n      \"  elif isinstance(data.columns, (pd.Int64Index, pd.RangeIndex)):\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \\\"\u25b8\\\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \\\"\u25be\\\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \\\"\\\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\\\"sk-container-id-2\\\" class=\\\"sk-top-container\\\"><div class=\\\"sk-text-repr-fallback\\\"><pre>XGBRegressor(base_score=0.5, booster=&#x27;gbtree&#x27;, colsample_bylevel=1,\\n\",\n       \"             colsample_bynode=1, colsample_bytree=1, enable_categorical=False,\\n\",\n       \"             gamma=0, gpu_id=-1, importance_type=None,\\n\",\n       \"             interaction_constraints=&#x27;&#x27;, learning_rate=0.05, max_delta_step=0,\\n\",\n       \"             max_depth=6, min_child_weight=1, missing=nan,\\n\",\n       \"             monotone_constraints=&#x27;()&#x27;, n_estimators=500, n_jobs=10,\\n\",\n       \"             num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0, reg_alpha=0,\\n\",\n       \"             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method=&#x27;exact&#x27;,\\n\",\n       \"             validate_parameters=1, verbosity=None)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\\\"sk-container\\\" hidden><div class=\\\"sk-item\\\"><div class=\\\"sk-estimator sk-toggleable\\\"><input class=\\\"sk-toggleable__control sk-hidden--visually\\\" id=\\\"sk-estimator-id-2\\\" type=\\\"checkbox\\\" checked><label for=\\\"sk-estimator-id-2\\\" class=\\\"sk-toggleable__label sk-toggleable__label-arrow\\\">XGBRegressor</label><div class=\\\"sk-toggleable__content\\\"><pre>XGBRegressor(base_score=0.5, booster=&#x27;gbtree&#x27;, colsample_bylevel=1,\\n\",\n       \"             colsample_bynode=1, colsample_bytree=1, enable_categorical=False,\\n\",\n       \"             gamma=0, gpu_id=-1, importance_type=None,\\n\",\n       \"             interaction_constraints=&#x27;&#x27;, learning_rate=0.05, max_delta_step=0,\\n\",\n       \"             max_depth=6, min_child_weight=1, missing=nan,\\n\",\n       \"             monotone_constraints=&#x27;()&#x27;, n_estimators=500, n_jobs=10,\\n\",\n       \"             num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0, reg_alpha=0,\\n\",\n       \"             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method=&#x27;exact&#x27;,\\n\",\n       \"             validate_parameters=1, verbosity=None)</pre></div></div></div></div></div>\"\n      ],\n      \"text/plain\": [\n       \"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\\n\",\n       \"             colsample_bynode=1, colsample_bytree=1, enable_categorical=False,\\n\",\n       \"             gamma=0, gpu_id=-1, importance_type=None,\\n\",\n       \"             interaction_constraints='', learning_rate=0.05, max_delta_step=0,\\n\",\n       \"             max_depth=6, min_child_weight=1, missing=nan,\\n\",\n       \"             monotone_constraints='()', n_estimators=500, n_jobs=10,\\n\",\n       \"             num_parallel_tree=1, predictor='auto', random_state=0, reg_alpha=0,\\n\",\n       \"             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method='exact',\\n\",\n       \"             validate_parameters=1, verbosity=None)\"\n      ]\n     },\n     \"execution_count\": 47,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"model.fit(X_final, y_final)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 48,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import pickle\\n\",\n    \"file_name = \\\"xgb_model.pkl\\\"\\n\",\n    \"\\n\",\n    \"# save\\n\",\n    \"pickle.dump(model, open(file_name, \\\"wb\\\"))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"ml\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.15\"\n  },\n  \"orig_nbformat\": 4,\n  \"vscode\": {\n   \"interpreter\": {\n    \"hash\": \"0bd6827e5b9b024a8afcecbb4b32b3f39bbe94aa5ba060866c09f0f3ec848126\"\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        }
    },
    "dev-portfolio": {
        "README.md": {
            "code": "Developer Portfolio\n"
        },
        "index.html": {
            "code": "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Hello World!</h1>\n\n</body>\n</html>\n"
        }
    },
    "EEG_Classification": {
        "README.md": {
            "code": "# EEG_Classification\nEEG Classification (Mini Project)\n"
        },
        "eeg_BCI.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import scipy.io\\n\",\n    \"%matplotlib inline\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import scipy.io\\n\",\n    \"\\n\",\n    \"m = scipy.io.loadmat('BCICIV_calib_ds1d.mat', struct_as_record=True)\\n\",\n    \"\\n\",\n    \"# SciPy.io.loadmat does not deal well with Matlab structures, resulting in lots of\\n\",\n    \"# extra dimensions in the arrays. This makes the code a bit more cluttered\\n\",\n    \"\\n\",\n    \"sample_rate = m['nfo']['fs'][0][0][0][0]\\n\",\n    \"EEG = m['cnt'].T\\n\",\n    \"nchannels, nsamples = EEG.shape\\n\",\n    \"\\n\",\n    \"channel_names = [s[0] for s in m['nfo']['clab'][0][0][0]]\\n\",\n    \"event_onsets = m['mrk'][0][0][0]\\n\",\n    \"event_codes = m['mrk'][0][0][1]\\n\",\n    \"labels = np.zeros((1, nsamples), int)\\n\",\n    \"labels[0, event_onsets] = event_codes\\n\",\n    \"\\n\",\n    \"cl_lab = [s[0] for s in m['nfo']['classes'][0][0][0]]\\n\",\n    \"cl1 = cl_lab[0]\\n\",\n    \"cl2 = cl_lab[1]\\n\",\n    \"nclasses = len(cl_lab)\\n\",\n    \"nevents = len(event_onsets)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Shape of EEG: (59, 190473)\\n\",\n      \"Sample rate: 100\\n\",\n      \"Number of channels: 59\\n\",\n      \"Channel names: ['AF3', 'AF4', 'F5', 'F3', 'F1', 'Fz', 'F2', 'F4', 'F6', 'FC5', 'FC3', 'FC1', 'FCz', 'FC2', 'FC4', 'FC6', 'CFC7', 'CFC5', 'CFC3', 'CFC1', 'CFC2', 'CFC4', 'CFC6', 'CFC8', 'T7', 'C5', 'C3', 'C1', 'Cz', 'C2', 'C4', 'C6', 'T8', 'CCP7', 'CCP5', 'CCP3', 'CCP1', 'CCP2', 'CCP4', 'CCP6', 'CCP8', 'CP5', 'CP3', 'CP1', 'CPz', 'CP2', 'CP4', 'CP6', 'P5', 'P3', 'P1', 'Pz', 'P2', 'P4', 'P6', 'PO1', 'PO2', 'O1', 'O2']\\n\",\n      \"Number of events: 1\\n\",\n      \"Event codes: [-1  1]\\n\",\n      \"Class labels: ['left', 'right']\\n\",\n      \"Number of classes: 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Print some information\\n\",\n    \"print('Shape of EEG:', EEG.shape)\\n\",\n    \"print('Sample rate:', sample_rate)\\n\",\n    \"print('Number of channels:', nchannels)\\n\",\n    \"print('Channel names:', channel_names)\\n\",\n    \"print('Number of events:', len(event_onsets))\\n\",\n    \"print('Event codes:', np.unique(event_codes))\\n\",\n    \"print('Class labels:', cl_lab)\\n\",\n    \"print('Number of classes:', nclasses)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<Figure size 25000x12000 with 0 Axes>\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<Figure size 25000x12000 with 0 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"from matplotlib.collections import LineCollection\\n\",\n    \"\\n\",\n    \"def plot_eeg(EEG, vspace=200, color='k'):\\n\",\n    \"    '''\\n\",\n    \"    Plot the EEG data, stacking the channels horizontally on top of each other.\\n\",\n    \"\\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    EEG : array (channels x samples)\\n\",\n    \"        The EEG data\\n\",\n    \"    vspace : float (default 100)\\n\",\n    \"        Amount of vertical space to put between the channels\\n\",\n    \"    color : string (default 'k')\\n\",\n    \"        Color to draw the EEG in\\n\",\n    \"    '''\\n\",\n    \"    \\n\",\n    \"    bases = vspace * np.arange(59)\\n\",\n    \"    \\n\",\n    \"    EEG = EEG.T + bases\\n\",\n    \"    \\n\",\n    \"    # Calculate a timeline in seconds, knowing that the sample rate of the EEG recorder was 100 Hz.\\n\",\n    \"    samplerate = 100.\\n\",\n    \"    time = np.arange(EEG.shape[0]) / samplerate\\n\",\n    \"    \\n\",\n    \"    # Plot EEG versus time\\n\",\n    \"    plt.plot(time, EEG, color=color)\\n\",\n    \"\\n\",\n    \"    # Add gridlines to the plot\\n\",\n    \"    plt.grid()\\n\",\n    \"    \\n\",\n    \"    # Label the axes\\n\",\n    \"    plt.xlabel('Time (s)')\\n\",\n    \"    plt.ylabel('Channels')\\n\",\n    \"    \\n\",\n    \"    # The y-ticks are set to the locations of the electrodes. The international 10-20 system defines\\n\",\n    \"    # default names for them.\\n\",\n    \"    plt.gca().yaxis.set_ticks(bases)\\n\",\n    \"    plt.gca().yaxis.set_ticklabels(channel_names)\\n\",\n    \"    \\n\",\n    \"    # Put a nice title on top of the plot\\n\",\n    \"    plt.title('EEG data')\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"# Testing our function\\n\",\n    \"plt.figure(figsize=(250, 120))\\n\",\n    \"# plot_eeg(EEG, 3000)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([  2095,   2895,   3695,   4495,   5295,   6095,   6895,   7695,\\n\",\n       \"         8495,   9295,  10095,  10895,  11695,  12495,  13295,  16294,\\n\",\n       \"        17094,  17894,  18694,  19494,  20294,  21094,  21894,  22694,\\n\",\n       \"        23494,  24295,  25095,  25895,  26695,  27495,  30494,  31294,\\n\",\n       \"        32094,  32894,  33694,  34494,  35294,  36094,  36894,  37694,\\n\",\n       \"        38494,  39294,  40094,  40894,  41694,  44693,  45493,  46293,\\n\",\n       \"        47093,  47893,  48693,  49493,  50293,  51093,  51893,  52693,\\n\",\n       \"        53493,  54293,  55093,  55893,  58892,  59692,  60492,  61292,\\n\",\n       \"        62092,  62892,  63692,  64492,  65292,  66093,  66893,  67693,\\n\",\n       \"        68493,  69293,  70093,  73092,  73892,  74692,  75492,  76292,\\n\",\n       \"        77092,  77892,  78692,  79492,  80292,  81092,  81892,  82692,\\n\",\n       \"        83492,  84292,  87291,  88091,  88891,  89691,  90491,  91291,\\n\",\n       \"        92091,  92891,  93691,  94491,  97292,  98092,  98892,  99692,\\n\",\n       \"       100492, 101292, 102092, 102892, 103692, 104492, 105292, 106092,\\n\",\n       \"       106892, 107692, 108492, 111491, 112291, 113091, 113891, 114691,\\n\",\n       \"       115491, 116291, 117091, 117891, 118691, 119492, 120292, 121091,\\n\",\n       \"       121891, 122692, 125691, 126491, 127291, 128091, 128891, 129691,\\n\",\n       \"       130491, 131291, 132091, 132891, 133691, 134491, 135291, 136091,\\n\",\n       \"       136891, 139890, 140690, 141490, 142290, 143090, 143890, 144690,\\n\",\n       \"       145490, 146290, 147090, 147890, 148690, 149490, 150290, 151090,\\n\",\n       \"       154089, 154889, 155689, 156489, 157289, 158090, 158890, 159690,\\n\",\n       \"       160490, 161290, 162090, 162890, 163690, 164490, 165290, 168289,\\n\",\n       \"       169089, 169889, 170689, 171489, 172289, 173089, 173889, 174689,\\n\",\n       \"       175489, 176289, 177089, 177890, 178689, 179489, 182488, 183288,\\n\",\n       \"       184088, 184888, 185688, 186488, 187288, 188088, 188888, 189688],\\n\",\n       \"      dtype=int64)\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"non_zero_i = np.flatnonzero(labels)\\n\",\n    \"non_zero_i\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([  2095,   2895,   3695,   4495,   5295,   6095,   6895,   7695,\\n\",\n       \"         8495,   9295,  10095,  10895,  11695,  12495,  13295,  16294,\\n\",\n       \"        17094,  17894,  18694,  19494,  20294,  21094,  21894,  22694,\\n\",\n       \"        23494,  24295,  25095,  25895,  26695,  27495,  30494,  31294,\\n\",\n       \"        32094,  32894,  33694,  34494,  35294,  36094,  36894,  37694,\\n\",\n       \"        38494,  39294,  40094,  40894,  41694,  44693,  45493,  46293,\\n\",\n       \"        47093,  47893,  48693,  49493,  50293,  51093,  51893,  52693,\\n\",\n       \"        53493,  54293,  55093,  55893,  58892,  59692,  60492,  61292,\\n\",\n       \"        62092,  62892,  63692,  64492,  65292,  66093,  66893,  67693,\\n\",\n       \"        68493,  69293,  70093,  73092,  73892,  74692,  75492,  76292,\\n\",\n       \"        77092,  77892,  78692,  79492,  80292,  81092,  81892,  82692,\\n\",\n       \"        83492,  84292,  87291,  88091,  88891,  89691,  90491,  91291,\\n\",\n       \"        92091,  92891,  93691,  94491,  97292,  98092,  98892,  99692,\\n\",\n       \"       100492, 101292, 102092, 102892, 103692, 104492, 105292, 106092,\\n\",\n       \"       106892, 107692, 108492, 111491, 112291, 113091, 113891, 114691,\\n\",\n       \"       115491, 116291, 117091, 117891, 118691, 119492, 120292, 121091,\\n\",\n       \"       121891, 122692, 125691, 126491, 127291, 128091, 128891, 129691,\\n\",\n       \"       130491, 131291, 132091, 132891, 133691, 134491, 135291, 136091,\\n\",\n       \"       136891, 139890, 140690, 141490, 142290, 143090, 143890, 144690,\\n\",\n       \"       145490, 146290, 147090, 147890, 148690, 149490, 150290, 151090,\\n\",\n       \"       154089, 154889, 155689, 156489, 157289, 158090, 158890, 159690,\\n\",\n       \"       160490, 161290, 162090, 162890, 163690, 164490, 165290, 168289,\\n\",\n       \"       169089, 169889, 170689, 171489, 172289, 173089, 173889, 174689,\\n\",\n       \"       175489, 176289, 177089, 177890, 178689, 179489, 182488, 183288,\\n\",\n       \"       184088, 184888, 185688, 186488, 187288, 188088, 188888, 189688],\\n\",\n       \"      dtype=int64)\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"onsets = [non_zero_i[0]]\\n\",\n    \"for i in range(1, len(non_zero_i)):\\n\",\n    \"    if non_zero_i[i - 1] != non_zero_i[i] - 1:\\n\",\n    \"        onsets.append(non_zero_i[i])\\n\",\n    \"onsets = np.asarray(onsets)\\n\",\n    \"onsets\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# plt.figure(figsize=(300, 100))\\n\",\n    \"# plot_eeg(EEG, 1000)\\n\",\n    \"# for onset in onsets:\\n\",\n    \"#     plt.axvline(onset / 100., color='r')\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Length of time_slices: 200\\n\",\n      \"First 10 trials are:\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[(2145, 2345),\\n\",\n       \" (2945, 3145),\\n\",\n       \" (3745, 3945),\\n\",\n       \" (4545, 4745),\\n\",\n       \" (5345, 5545),\\n\",\n       \" (6145, 6345),\\n\",\n       \" (6945, 7145),\\n\",\n       \" (7745, 7945),\\n\",\n       \" (8545, 8745),\\n\",\n       \" (9345, 9545)]\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Creating time slices with a window of 0.85 secs\\n\",\n    \"time_slices = [(int(s + 0.5*100), int(s + 2.5 * 100)) for s in onsets]\\n\",\n    \"print(\\\"Length of time_slices:\\\", len(time_slices))\\n\",\n    \"print(\\\"First 10 trials are:\\\")\\n\",\n    \"time_slices[:10] # Showing 10 trial onsets and ending times\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Shape of trials: (200, 59, 200)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"trials = [EEG[:, s:e] for s, e in time_slices]\\n\",\n    \"trials = np.asarray(trials)\\n\",\n    \"print(\\\"Shape of trials:\\\", trials.shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(59, 200, 200)\"\n      ]\n     },\n     \"execution_count\": 11,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"trials = np.transpose(trials, (1, 2, 0))\\n\",\n    \"trials.shape\\n\",\n    \"# Now trials is in (channels x time x no. of trials) form\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 56,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Number of trials: 200\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"non_zero_labels = [int(labels[:, onset]) for onset in onsets]\\n\",\n    \"print(\\\"Number of trials:\\\", len(non_zero_labels))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Shape of trials_1: (59, 200, 100)\\n\",\n      \"Shape of trials_2: (59, 200, 100)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"trialscl1 = []\\n\",\n    \"trialscl2 = []\\n\",\n    \"for i in range(len(non_zero_labels)):\\n\",\n    \"    if int(non_zero_labels[i]) == 1:\\n\",\n    \"        trialscl1.append(trials[:, :, i])\\n\",\n    \"    elif int(non_zero_labels[i]) == -1:\\n\",\n    \"        trialscl2.append(trials[:, :, i])\\n\",\n    \"\\n\",\n    \"trialscl1 = np.asarray(trialscl1)\\n\",\n    \"trialscl2 = np.asarray(trialscl2)\\n\",\n    \"trialscl1 = np.transpose(trialscl1, (1, 2, 0))\\n\",\n    \"trialscl2 = np.transpose(trialscl2, (1, 2, 0))\\n\",\n    \"\\n\",\n    \"print(\\\"Shape of trials_1:\\\", trialscl1.shape)\\n\",\n    \"print(\\\"Shape of trials_2:\\\", trialscl2.shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(59, 200)\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plot_eeg(trials[:, :, 0], 1000)\\n\",\n    \"print(trials[:, :, 0].shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from matplotlib import mlab\\n\",\n    \"\\n\",\n    \"def psd(trials):\\n\",\n    \"    '''\\n\",\n    \"    Calculates for each trial the Power Spectral Density (PSD).\\n\",\n    \"    \\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    trials : 3d-array (channels x samples x trials)\\n\",\n    \"        The EEG signal\\n\",\n    \"    \\n\",\n    \"    Returns\\n\",\n    \"    -------\\n\",\n    \"    trial_PSD : 3d-array (channels x PSD x trials)\\n\",\n    \"        the PSD for each trial.  \\n\",\n    \"    freqs : list of floats\\n\",\n    \"        Yhe frequencies for which the PSD was computed (useful for plotting later)\\n\",\n    \"    '''\\n\",\n    \"    \\n\",\n    \"    ntrials = trials.shape[2]\\n\",\n    \"    trials_PSD = np.zeros((nchannels, 101, ntrials))\\n\",\n    \"\\n\",\n    \"    # Iterate over trials and channels\\n\",\n    \"    for trial in range(ntrials):\\n\",\n    \"        for ch in range(nchannels):\\n\",\n    \"            # Calculate the PSD\\n\",\n    \"            (PSD, freqs) = mlab.psd(trials[ch,:,trial], NFFT=int(200), Fs=sample_rate)\\n\",\n    \"            trials_PSD[ch, :, trial] = PSD.ravel()\\n\",\n    \"                \\n\",\n    \"    return trials_PSD, freqs\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Apply the function\\n\",\n    \"psd_r, freqs = psd(trialscl1)\\n\",\n    \"psd_f, freqs = psd(trialscl2)\\n\",\n    \"trials_PSD = {1: psd_r, 2: psd_f}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"def plot_psd(trials_PSD, freqs, chan_ind, chan_lab=None, maxy=None):\\n\",\n    \"    '''\\n\",\n    \"    Plots PSD data calculated with psd().\\n\",\n    \"    \\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    trials : 3d-array\\n\",\n    \"        The PSD data, as returned by psd()\\n\",\n    \"    freqs : list of floats\\n\",\n    \"        The frequencies for which the PSD is defined, as returned by psd() \\n\",\n    \"    chan_ind : list of integers\\n\",\n    \"        The indices of the channels to plot\\n\",\n    \"    chan_lab : list of strings\\n\",\n    \"        (optional) List of names for each channel\\n\",\n    \"    maxy : float\\n\",\n    \"        (optional) Limit the y-axis to this value\\n\",\n    \"    '''\\n\",\n    \"    plt.figure(figsize=(12,5))\\n\",\n    \"    \\n\",\n    \"    nchans = len(chan_ind)\\n\",\n    \"    \\n\",\n    \"    # Maximum of 3 plots per row\\n\",\n    \"    nrows = int(np.ceil(nchans / 3))\\n\",\n    \"    ncols = min(3, nchans)\\n\",\n    \"    \\n\",\n    \"    # Enumerate over the channels\\n\",\n    \"    for i,ch in enumerate(chan_ind):\\n\",\n    \"        # Figure out which subplot to draw to\\n\",\n    \"        plt.subplot(nrows,ncols,i+1)\\n\",\n    \"    \\n\",\n    \"        # Plot the PSD for each class\\n\",\n    \"        for cl in trials_PSD.keys():\\n\",\n    \"            plt.plot(freqs, np.mean(trials_PSD[cl][ch,:,:], axis=1), label=cl)\\n\",\n    \"    \\n\",\n    \"        # All plot decoration below...\\n\",\n    \"        \\n\",\n    \"        plt.xlim(1,30)\\n\",\n    \"        \\n\",\n    \"        if maxy != None:\\n\",\n    \"            plt.ylim(0,maxy)\\n\",\n    \"    \\n\",\n    \"        plt.grid()\\n\",\n    \"    \\n\",\n    \"        plt.xlabel('Frequency (Hz)')\\n\",\n    \"        \\n\",\n    \"        if chan_lab == None:\\n\",\n    \"            plt.title('Channel %d' % (ch+1))\\n\",\n    \"        else:\\n\",\n    \"            plt.title(chan_lab[i])\\n\",\n    \"\\n\",\n    \"        plt.legend()\\n\",\n    \"        \\n\",\n    \"    plt.tight_layout()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1200x500 with 3 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plot_psd(\\n\",\n    \"    trials_PSD,\\n\",\n    \"    freqs,\\n\",\n    \"    [channel_names.index(ch) for ch in ['C3', 'Cz', 'C4']],\\n\",\n    \"    chan_lab=['left', 'center', 'right'],\\n\",\n    \"    maxy=500\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import scipy.signal \\n\",\n    \"\\n\",\n    \"def bandpass(trials, lo, hi, sample_rate):\\n\",\n    \"    '''\\n\",\n    \"    Designs and applies a bandpass filter to the signal.\\n\",\n    \"    \\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    trials : 3d-array (channels x samples x trials)\\n\",\n    \"        The EEGsignal\\n\",\n    \"    lo : float\\n\",\n    \"        Lower frequency bound (in Hz)\\n\",\n    \"    hi : float\\n\",\n    \"        Upper frequency bound (in Hz)\\n\",\n    \"    sample_rate : float\\n\",\n    \"        Sample rate of the signal (in Hz)\\n\",\n    \"    \\n\",\n    \"    Returns\\n\",\n    \"    -------\\n\",\n    \"    trials_filt : 3d-array (channels x samples x trials)\\n\",\n    \"        The bandpassed signal\\n\",\n    \"    '''\\n\",\n    \"\\n\",\n    \"    # The iirfilter() function takes the filter order: higher numbers mean a sharper frequency cutoff,\\n\",\n    \"    # but the resulting signal might be shifted in time, lower numbers mean a soft frequency cutoff,\\n\",\n    \"    # but the resulting signal less distorted in time. It also takes the lower and upper frequency bounds\\n\",\n    \"    # to pass, divided by the niquist frequency, which is the sample rate divided by 2:\\n\",\n    \"    a, b = scipy.signal.iirfilter(6, [lo/(sample_rate/2.0), hi/(sample_rate/2.0)])\\n\",\n    \"\\n\",\n    \"    # Applying the filter to each trial\\n\",\n    \"    ntrials = trials.shape[2]\\n\",\n    \"    trials_filt = np.zeros((nchannels, 200, ntrials))\\n\",\n    \"    for i in range(ntrials):\\n\",\n    \"        trials_filt[:,:,i] = scipy.signal.filtfilt(a, b, trials[:,:,i], axis=1)\\n\",\n    \"    \\n\",\n    \"    return trials_filt\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Apply the function\\n\",\n    \"trials_filt = {1: bandpass(trialscl1, 8, 15, sample_rate),\\n\",\n    \"               2: bandpass(trialscl2, 8, 15, sample_rate)}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1200x500 with 3 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"psd_r, freqs = psd(trials_filt[1])\\n\",\n    \"psd_f, freqs = psd(trials_filt[2])\\n\",\n    \"trials_PSD = {1: psd_r, 2: psd_f}\\n\",\n    \"\\n\",\n    \"plot_psd(\\n\",\n    \"    trials_PSD,\\n\",\n    \"    freqs,\\n\",\n    \"    [channel_names.index(ch) for ch in ['C3', 'Cz', 'C4']],\\n\",\n    \"    chan_lab=['left', 'center', 'right'],\\n\",\n    \"    maxy=300\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Calculate the log(var) of the trials\\n\",\n    \"def logvar(trials):\\n\",\n    \"    '''\\n\",\n    \"    Calculate the log-var of each channel.\\n\",\n    \"    \\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    trials : 3d-array (channels x samples x trials)\\n\",\n    \"        The EEG signal.\\n\",\n    \"        \\n\",\n    \"    Returns\\n\",\n    \"    -------\\n\",\n    \"    logvar - 2d-array (channels x trials)\\n\",\n    \"        For each channel the logvar of the signal\\n\",\n    \"    '''\\n\",\n    \"    return np.log(np.var(trials, axis=1))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Apply the function\\n\",\n    \"trials_logvar = {1: logvar(trials_filt[1]),\\n\",\n    \"                 2: logvar(trials_filt[2])}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def plot_logvar(trials):\\n\",\n    \"    '''\\n\",\n    \"    Plots the log-var of each channel/component.\\n\",\n    \"    arguments:\\n\",\n    \"        trials - Dictionary containing the trials (log-vars x trials) for 2 classes.\\n\",\n    \"    '''\\n\",\n    \"    plt.figure(figsize=(12,5))\\n\",\n    \"    \\n\",\n    \"    x0 = np.arange(nchannels)\\n\",\n    \"    x1 = np.arange(nchannels) + 0.4\\n\",\n    \"\\n\",\n    \"    y0 = np.mean(trials[1], axis=1)\\n\",\n    \"    y1 = np.mean(trials[2], axis=1)\\n\",\n    \"\\n\",\n    \"    plt.bar(x0, y0, width=0.5, color='b')\\n\",\n    \"    plt.bar(x1, y1, width=0.4, color='r')\\n\",\n    \"\\n\",\n    \"    plt.xlim(-0.5, nchannels+0.5)\\n\",\n    \"\\n\",\n    \"    plt.gca().yaxis.grid(True)\\n\",\n    \"    plt.title('log-var of each channel/component')\\n\",\n    \"    plt.xlabel('channels/components')\\n\",\n    \"    plt.ylabel('log-var')\\n\",\n    \"    plt.legend(cl_lab)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1200x500 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"# Plot the log-vars\\n\",\n    \"plot_logvar(trials_logvar)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def plot_scatter(left, right):\\n\",\n    \"    plt.figure()\\n\",\n    \"    plt.scatter(left[0,:], left[-1,:], color='b')\\n\",\n    \"    plt.scatter(right[0,:], right[-1,:], color='r')\\n\",\n    \"    plt.xlabel('Last channel')\\n\",\n    \"    plt.ylabel('First channel')\\n\",\n    \"    plt.legend(cl_lab)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 28,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plot_scatter(trials_logvar[1], trials_logvar[2])\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 29,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from numpy import linalg\\n\",\n    \"\\n\",\n    \"def cov(trials):\\n\",\n    \"    ''' Calculate the covariance for each trial and return their average '''\\n\",\n    \"    ntrials = trials.shape[2]\\n\",\n    \"    covs = [ trials[:,:,i].dot(trials[:,:,i].T) / 200 for i in range(ntrials) ]\\n\",\n    \"    return np.mean(covs, axis=0)\\n\",\n    \"\\n\",\n    \"def whitening(sigma):\\n\",\n    \"    ''' Calculate a whitening matrix for covariance matrix sigma. '''\\n\",\n    \"    U, l, _ = linalg.svd(sigma)\\n\",\n    \"    return U.dot( np.diag(l ** -0.5) )\\n\",\n    \"\\n\",\n    \"def csp(trials_r, trials_f):\\n\",\n    \"    '''\\n\",\n    \"    Calculate the CSP transformation matrix W.\\n\",\n    \"    arguments:\\n\",\n    \"        trials_r - Array (channels x samples x trials) containing right hand movement trials\\n\",\n    \"        trials_f - Array (channels x samples x trials) containing foot movement trials\\n\",\n    \"    returns:\\n\",\n    \"        Mixing matrix W\\n\",\n    \"    '''\\n\",\n    \"    cov_r = cov(trials_r)\\n\",\n    \"    cov_f = cov(trials_f)\\n\",\n    \"    P = whitening(cov_r + cov_f)\\n\",\n    \"    B, _, _ = linalg.svd( P.T.dot(cov_f).dot(P) )\\n\",\n    \"    W = P.dot(B)\\n\",\n    \"    return W\\n\",\n    \"\\n\",\n    \"def apply_mix(W, trials):\\n\",\n    \"    ''' Apply a mixing matrix to each trial (basically multiply W with the EEG signal matrix)'''\\n\",\n    \"    ntrials = trials.shape[2]\\n\",\n    \"    trials_csp = np.zeros((nchannels, 200, ntrials))\\n\",\n    \"    for i in range(ntrials):\\n\",\n    \"        trials_csp[:,:,i] = W.T.dot(trials[:,:,i])\\n\",\n    \"    return trials_csp\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 30,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Apply the functions\\n\",\n    \"W = csp(trials_filt[1], trials_filt[2])\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 31,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"\\n\",\n    \"trials_csp = {1: apply_mix(W, trials_filt[1]),\\n\",\n    \"              2: apply_mix(W, trials_filt[2])}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 32,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1200x500 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"trials_logvar = {1: logvar(trials_csp[1]),\\n\",\n    \"                 2: logvar(trials_csp[2])}\\n\",\n    \"plot_logvar(trials_logvar)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 33,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1200x500 with 3 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"psd_r, freqs = psd(trials_csp[1])\\n\",\n    \"psd_f, freqs = psd(trials_csp[2])\\n\",\n    \"trials_PSD = {1: psd_r, 2: psd_f}\\n\",\n    \"\\n\",\n    \"plot_psd(trials_PSD, freqs, [0,28,-1], chan_lab=['first component', 'middle component', 'last component'], maxy=0.75)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 34,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def plot_scatter(left, right):\\n\",\n    \"    plt.figure()\\n\",\n    \"    plt.scatter(left[0,:], left[-1,:], color='b')\\n\",\n    \"    plt.scatter(right[0,:], right[-1,:], color='r')\\n\",\n    \"    plt.xlabel('Last component')\\n\",\n    \"    plt.ylabel('First component')\\n\",\n    \"    plt.legend(cl_lab)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 35,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plot_scatter(trials_logvar[1], trials_logvar[2])\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 36,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Percentage of trials to use for training (50-50 split here)\\n\",\n    \"train_percentage = 0.5 \\n\",\n    \"\\n\",\n    \"# Calculate the number of trials for each class the above percentage boils down to\\n\",\n    \"ntrain_r = int(trials_filt[1].shape[2] * train_percentage)\\n\",\n    \"ntrain_f = int(trials_filt[2].shape[2] * train_percentage)\\n\",\n    \"ntest_r = trials_filt[1].shape[2] - ntrain_r\\n\",\n    \"ntest_f = trials_filt[2].shape[2] - ntrain_f\\n\",\n    \"\\n\",\n    \"# Splitting the frequency filtered signal into a train and test set\\n\",\n    \"train = {1: trials_filt[1][:,:,:ntrain_r],\\n\",\n    \"         2: trials_filt[2][:,:,:ntrain_f]}\\n\",\n    \"\\n\",\n    \"test = {1: trials_filt[1][:,:,ntrain_r:],\\n\",\n    \"        2: trials_filt[2][:,:,ntrain_f:]}\\n\",\n    \"\\n\",\n    \"# Train the CSP on the training set only\\n\",\n    \"W = csp(train[1], train[2])\\n\",\n    \"\\n\",\n    \"# Apply the CSP on both the training and test set\\n\",\n    \"train[1] = apply_mix(W, train[1])\\n\",\n    \"train[2] = apply_mix(W, train[2])\\n\",\n    \"test[1] = apply_mix(W, test[1])\\n\",\n    \"test[2] = apply_mix(W, test[2])\\n\",\n    \"\\n\",\n    \"# Select only the first and last components for classification\\n\",\n    \"comp = np.array([0,-1])\\n\",\n    \"train[1] = train[1][comp,:,:]\\n\",\n    \"train[2] = train[2][comp,:,:]\\n\",\n    \"test[1] = test[1][comp,:,:]\\n\",\n    \"test[2] = test[2][comp,:,:]\\n\",\n    \"\\n\",\n    \"# Calculate the log-var\\n\",\n    \"train[1] = logvar(train[1])\\n\",\n    \"train[2] = logvar(train[2])\\n\",\n    \"test[1] = logvar(test[1])\\n\",\n    \"test[2] = logvar(test[2])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 37,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def train_lda(class1, class2):\\n\",\n    \"    '''\\n\",\n    \"    Trains the LDA algorithm.\\n\",\n    \"    arguments:\\n\",\n    \"        class1 - An array (observations x features) for class 1\\n\",\n    \"        class2 - An array (observations x features) for class 2\\n\",\n    \"    returns:\\n\",\n    \"        The projection matrix W\\n\",\n    \"        The offset b\\n\",\n    \"    '''\\n\",\n    \"    nclasses = 2\\n\",\n    \"    \\n\",\n    \"    nclass1 = class1.shape[0]\\n\",\n    \"    nclass2 = class2.shape[0]\\n\",\n    \"    \\n\",\n    \"    # Class priors: in this case, we have an equal number of training\\n\",\n    \"    # examples for each class, so both priors are 0.5\\n\",\n    \"    prior1 = nclass1 / float(nclass1 + nclass2)\\n\",\n    \"    prior2 = nclass2 / float(nclass1 + nclass1)\\n\",\n    \"   \\n\",\n    \"    mean1 = np.mean(class1, axis=0)\\n\",\n    \"    mean2 = np.mean(class2, axis=0)\\n\",\n    \"    \\n\",\n    \"    class1_centered = class1 - mean1\\n\",\n    \"    class2_centered = class2 - mean2\\n\",\n    \"    \\n\",\n    \"    # Calculate the covariance between the features\\n\",\n    \"    cov1 = class1_centered.T.dot(class1_centered) / (nclass1 - nclasses)\\n\",\n    \"    cov2 = class2_centered.T.dot(class2_centered) / (nclass2 - nclasses)\\n\",\n    \"   \\n\",\n    \"    W = (mean2 - mean1).dot(np.linalg.pinv(prior1*cov1 + prior2*cov2))\\n\",\n    \"    b = (prior1*mean1 + prior2*mean2).dot(W)\\n\",\n    \"    \\n\",\n    \"    return (W,b)\\n\",\n    \"\\n\",\n    \"def apply_lda(test, W, b):\\n\",\n    \"    '''\\n\",\n    \"    Applies a previously trained LDA to new data.\\n\",\n    \"    arguments:\\n\",\n    \"        test - An array (features x trials) containing the data\\n\",\n    \"        W    - The project matrix W as calculated by train_lda()\\n\",\n    \"        b    - The offsets b as calculated by train_lda()\\n\",\n    \"    returns:\\n\",\n    \"        A list containing a classlabel for each trial\\n\",\n    \"    '''\\n\",\n    \"    ntrials = test.shape[1]\\n\",\n    \"    \\n\",\n    \"    prediction = []\\n\",\n    \"    for i in range(ntrials):\\n\",\n    \"        # The line below is a generalization for:\\n\",\n    \"        # result = W[0] * test[0,i] + W[1] * test[1,i] - b\\n\",\n    \"        result = W.dot(test[:,i]) - b\\n\",\n    \"        if result <= 0:\\n\",\n    \"            prediction.append(1)\\n\",\n    \"        else:\\n\",\n    \"            prediction.append(2)\\n\",\n    \"    \\n\",\n    \"    return np.array(prediction)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 38,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"W: [ 5.52963938 -5.31347949]\\n\",\n      \"b: -0.38024720917511434\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"W,b = train_lda(train[1].T, train[2].T)\\n\",\n    \"\\n\",\n    \"print('W:', W)\\n\",\n    \"print('b:', b)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 39,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(-2.2, 1.0)\"\n      ]\n     },\n     \"execution_count\": 39,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"# Scatterplot like before\\n\",\n    \"plot_scatter(train[1], train[2])\\n\",\n    \"# plt.title('Training data')\\n\",\n    \"\\n\",\n    \"# Calculate decision boundary (x,y)\\n\",\n    \"x = np.arange(-5, 1, 0.1)\\n\",\n    \"y = (b - W[0]*x) / W[1]\\n\",\n    \"\\n\",\n    \"# Plot the decision boundary\\n\",\n    \"plt.plot(x,y, linestyle='--', linewidth=2, color='k')\\n\",\n    \"plt.xlim(-5, 1)\\n\",\n    \"plt.ylim(-2.2, 1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 40,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(-2.2, 1.0)\"\n      ]\n     },\n     \"execution_count\": 40,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plot_scatter(test[1], test[2])\\n\",\n    \"# title('Test data')\\n\",\n    \"plt.plot(x,y, linestyle='--', linewidth=2, color='k')\\n\",\n    \"plt.xlim(-5, 1)\\n\",\n    \"plt.ylim(-2.2, 1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 41,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Confusion matrix:\\n\",\n      \"[[46  5]\\n\",\n      \" [ 4 45]]\\n\",\n      \"\\n\",\n      \"Accuracy: 0.910\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Print confusion matrix\\n\",\n    \"conf = np.array([\\n\",\n    \"    [(apply_lda(test[1], W, b) == 1).sum(), (apply_lda(test[2], W, b) == 1).sum()],\\n\",\n    \"    [(apply_lda(test[1], W, b) == 2).sum(), (apply_lda(test[2], W, b) == 2).sum()],\\n\",\n    \"])\\n\",\n    \"\\n\",\n    \"print('Confusion matrix:')\\n\",\n    \"print(conf)\\n\",\n    \"print()\\n\",\n    \"print('Accuracy: %.3f' % (np.sum(np.diag(conf)) / float(np.sum(conf))))\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"ml\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.16\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        "eeg_process.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import scipy.io\\n\",\n    \"%matplotlib inline\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"m = scipy.io.loadmat('CLASubjectA1601083StLRHand.mat', struct_as_record=True)\\n\",\n    \"print(m.keys())\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"EEG = m['o']['data'][0][0].T\\n\",\n    \"list_markers = [s[0] for s in m['o']['marker'][0][0]]\\n\",\n    \"labels = np.asarray(list_markers)\\n\",\n    \"\\n\",\n    \"sample_rate = m['o']['sampFreq'][0][0][0][0]\\n\",\n    \"# Loading channel names\\n\",\n    \"channel_names = [s[0][0] for s in m['o']['chnames'][0][0]]\\n\",\n    \"nchannels, nsamples = EEG.shape\\n\",\n    \"list_markers = [s[0] for s in m['o']['marker'][0][0]]\\n\",\n    \"unique_events = np.unique(list_markers)\\n\",\n    \"\\n\",\n    \"print(\\\"EEG Dimensions: \\\", EEG.shape)\\n\",\n    \"print(\\\"Label Dimensions: \\\", labels.shape)\\n\",\n    \"print(\\\"Sample Rate:\\\", sample_rate)\\n\",\n    \"print(\\\"Number of channels:\\\", nchannels)\\n\",\n    \"print(\\\"Channel names:\\\", channel_names)\\n\",\n    \"print(\\\"Event codes:\\\", unique_events)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from matplotlib.collections import LineCollection\\n\",\n    \"\\n\",\n    \"def plot_eeg(EEG, vspace=200, color='k'):\\n\",\n    \"    '''\\n\",\n    \"    Plot the EEG data, stacking the channels horizontally on top of each other.\\n\",\n    \"\\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    EEG : array (channels x samples)\\n\",\n    \"        The EEG data\\n\",\n    \"    vspace : float (default 100)\\n\",\n    \"        Amount of vertical space to put between the channels\\n\",\n    \"    color : string (default 'k')\\n\",\n    \"        Color to draw the EEG in\\n\",\n    \"    '''\\n\",\n    \"    \\n\",\n    \"    bases = vspace * np.arange(22)\\n\",\n    \"    \\n\",\n    \"    EEG = EEG.T + bases\\n\",\n    \"    \\n\",\n    \"    # Calculate a timeline in seconds, knowing that the sample rate of the EEG recorder was 200 Hz.\\n\",\n    \"    samplerate = 200.\\n\",\n    \"    time = np.arange(EEG.shape[0]) / samplerate\\n\",\n    \"    \\n\",\n    \"    # Plot EEG versus time\\n\",\n    \"    plt.plot(time, EEG, color=color)\\n\",\n    \"\\n\",\n    \"    # Add gridlines to the plot\\n\",\n    \"    plt.grid()\\n\",\n    \"    \\n\",\n    \"    # Label the axes\\n\",\n    \"    plt.xlabel('Time (s)')\\n\",\n    \"    plt.ylabel('Channels')\\n\",\n    \"    \\n\",\n    \"    # The y-ticks are set to the locations of the electrodes. The international 10-20 system defines\\n\",\n    \"    # default names for them.\\n\",\n    \"    plt.gca().yaxis.set_ticks(bases)\\n\",\n    \"    plt.gca().yaxis.set_ticklabels(channel_names)\\n\",\n    \"    \\n\",\n    \"    # Put a nice title on top of the plot\\n\",\n    \"    plt.title('EEG data')\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"# Testing our function\\n\",\n    \"plt.figure(figsize=(25, 12))\\n\",\n    \"plot_eeg(EEG, 300)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"labels.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"non_zero_i = np.flatnonzero(labels)\\n\",\n    \"non_zero_i\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"onsets = [non_zero_i[0]]\\n\",\n    \"for i in range(1, len(non_zero_i)):\\n\",\n    \"    if non_zero_i[i - 1] != non_zero_i[i] - 1:\\n\",\n    \"        onsets.append(non_zero_i[i])\\n\",\n    \"onsets = np.asarray(onsets)\\n\",\n    \"onsets\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"plt.figure(figsize=(300, 100))\\n\",\n    \"plot_eeg(EEG, 400)\\n\",\n    \"for onset in onsets:\\n\",\n    \"    plt.axvline(onset / 200., color='r')\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Creating time slices with a window of 1 sec\\n\",\n    \"time_slices = [(s, int(s + 1* 200)) for s in onsets]\\n\",\n    \"print(\\\"Length of time_slices:\\\", len(time_slices))\\n\",\n    \"print(\\\"First 10 trials are:\\\")\\n\",\n    \"time_slices[:10] # Showing 10 trial onsets and ending times\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"trials = [EEG[:, s:e] for s, e in time_slices]\\n\",\n    \"trials = np.asarray(trials)\\n\",\n    \"print(\\\"Shape of trials:\\\", trials.shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"plot_eeg(trials[0], 20)\\n\",\n    \"print(trials[0].shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from scipy.signal import stft\\n\",\n    \"\\n\",\n    \"def apply_stft(signal, sampling_rate, window_size=64, overlap=0.5):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    Apply Short-Time Fourier Transform (STFT) to a given signal.\\n\",\n    \"\\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    signal : array\\n\",\n    \"        Input signal\\n\",\n    \"    sampling_rate : int\\n\",\n    \"        Sampling rate of the signal\\n\",\n    \"    window_size : int (default: 64)\\n\",\n    \"        Size of the STFT window\\n\",\n    \"    overlap : float (default: 0.5)\\n\",\n    \"        Overlap between consecutive STFT windows\\n\",\n    \"\\n\",\n    \"    Returns\\n\",\n    \"    -------\\n\",\n    \"    stft_output : array\\n\",\n    \"        STFT output\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    overlap = int(window_size * overlap)\\n\",\n    \"    f, t, stft_output = stft(signal, fs=sampling_rate, window='hann', nperseg=window_size, noverlap=overlap)\\n\",\n    \"    return f, t, stft_output\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"channel_names[4]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Apply STFT to the first trial's C3 channel\\n\",\n    \"f, t, stft_output = apply_stft(trials[0][4, :], sampling_rate=200, overlap=0.6)\\n\",\n    \"\\n\",\n    \"# Plot the spectrogram\\n\",\n    \"plt.pcolormesh(t, f, np.abs(stft_output), cmap='plasma')\\n\",\n    \"plt.ylabel('Frequency [Hz]')\\n\",\n    \"plt.xlabel('Time [sec]')\\n\",\n    \"plt.title('Spectrogram of the first trial\\\\'s C3 channel')\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"for trial in trials:\\n\",\n    \"    print(trial.shape)\\n\",\n    \"    break\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def avg_stft(trials, channels, sampling_rate, window_size=64, overlap=0.5):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    Compute the average STFT across selected channels for each trial.\\n\",\n    \"\\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    trials : array\\n\",\n    \"        EEG data trials\\n\",\n    \"    channels : list\\n\",\n    \"        List of channel indices to compute the average STFT for\\n\",\n    \"    sampling_rate : int\\n\",\n    \"        Sampling rate of the EEG data\\n\",\n    \"    window_size : int (default: 64)\\n\",\n    \"        Size of the STFT window\\n\",\n    \"    overlap : float (default: 0.5)\\n\",\n    \"        Overlap between consecutive STFT windows\\n\",\n    \"\\n\",\n    \"    Returns\\n\",\n    \"    -------\\n\",\n    \"    f : array\\n\",\n    \"        Array of frequencies\\n\",\n    \"    t : array\\n\",\n    \"        Array of time points\\n\",\n    \"    avg_stft : array\\n\",\n    \"        Array of averaged STFT values across selected channels\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    stft_all = []\\n\",\n    \"    for trial in trials:\\n\",\n    \"        stft_trial = []\\n\",\n    \"        for channel in channels:\\n\",\n    \"            f, t, stft_output = apply_stft(trial[channel, :], sampling_rate=sampling_rate, window_size=window_size, overlap=overlap)\\n\",\n    \"            stft_trial.append(np.abs(stft_output))\\n\",\n    \"        stft_trial = np.asarray(stft_trial)\\n\",\n    \"        stft_avg = np.mean(stft_trial, axis=0)\\n\",\n    \"        stft_all.append(stft_avg)\\n\",\n    \"    stft_all = np.asarray(stft_all)\\n\",\n    \"    # avg_stft = np.mean(stft_all, axis=0)\\n\",\n    \"    return f, t, stft_all\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"channels = [3, 4, 5, 6, 18, 19]\\n\",\n    \"f, t, stft_all = avg_stft(trials, channels, sampling_rate=200, overlap=0.6)\\n\",\n    \"\\n\",\n    \"plt.pcolormesh(t, f, abs(stft_all[0]), cmap='plasma')\\n\",\n    \"plt.ylabel('Frequency [Hz]')\\n\",\n    \"plt.xlabel('Time [sec]')\\n\",\n    \"plt.title('Average spectrogram for selected channels')\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"trials[0][4, :].shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"for i in range(5):\\n\",\n    \"    plt.pcolormesh(t, f, stft_all[i], cmap='plasma')\\n\",\n    \"    plt.ylabel('Frequency [Hz]')\\n\",\n    \"    plt.xlabel('Time [sec]')\\n\",\n    \"    plt.title('Average spectrogram for selected channels')\\n\",\n    \"    plt.show()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"stft_all[0].shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"non_zero_labels = [labels[onset] for onset in onsets]\\n\",\n    \"print(\\\"Number of trials:\\\", len(non_zero_labels))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print(\\\"stft_all shape:\\\", stft_all.shape)\\n\",\n    \"print(\\\"labels:\\\", len(non_zero_labels))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"# Create a dictionary to map labels to class directories\\n\",\n    \"label_to_class = {1: '1', 2: '2', 3: '3'}\\n\",\n    \"\\n\",\n    \"# Create the class directories if they don't exist\\n\",\n    \"for class_dir in label_to_class.values():\\n\",\n    \"    if not os.path.exists(class_dir):\\n\",\n    \"        os.makedirs(class_dir)\\n\",\n    \"\\n\",\n    \"# Iterate over all trials and generate STFT plots\\n\",\n    \"for i, trial in enumerate(stft_all):\\n\",\n    \"    # Generate the STFT plot\\n\",\n    \"    plt.pcolormesh(t, f, abs(trial), cmap='plasma')\\n\",\n    \"    plt.ylabel('Frequency [Hz]')\\n\",\n    \"    plt.xlabel('Time [sec]')\\n\",\n    \"    plt.title(f'Trial {i+1} - Average spectrogram for selected channels')\\n\",\n    \"    # Get the corresponding label for the trial\\n\",\n    \"    label = non_zero_labels[i]\\n\",\n    \"    # Get the class directory for the label\\n\",\n    \"    class_dir = label_to_class[label]\\n\",\n    \"    # Save the STFT plot as an image with the label in the filename in the respective class directory\\n\",\n    \"    plt.savefig(os.path.join(class_dir, f'trial_{i}_label_{label}_stft.png'))\\n\",\n    \"    plt.close()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Model: \\\"sequential_1\\\"\\n\",\n      \"_________________________________________________________________\\n\",\n      \"Layer (type)                 Output Shape              Param #   \\n\",\n      \"=================================================================\\n\",\n      \"conv2d_3 (Conv2D)            (None, 222, 222, 32)      896       \\n\",\n      \"_________________________________________________________________\\n\",\n      \"max_pooling2d_3 (MaxPooling2 (None, 111, 111, 32)      0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"conv2d_4 (Conv2D)            (None, 109, 109, 64)      18496     \\n\",\n      \"_________________________________________________________________\\n\",\n      \"max_pooling2d_4 (MaxPooling2 (None, 54, 54, 64)        0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"conv2d_5 (Conv2D)            (None, 52, 52, 128)       73856     \\n\",\n      \"_________________________________________________________________\\n\",\n      \"max_pooling2d_5 (MaxPooling2 (None, 26, 26, 128)       0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"flatten_1 (Flatten)          (None, 86528)             0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"dense_2 (Dense)              (None, 64)                5537856   \\n\",\n      \"_________________________________________________________________\\n\",\n      \"dense_3 (Dense)              (None, 1)                 65        \\n\",\n      \"=================================================================\\n\",\n      \"Total params: 5,631,169\\n\",\n      \"Trainable params: 5,631,169\\n\",\n      \"Non-trainable params: 0\\n\",\n      \"_________________________________________________________________\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from keras.models import Sequential\\n\",\n    \"from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\\n\",\n    \"\\n\",\n    \"# Define the input shape of the CNN\\n\",\n    \"input_shape = (224, 224, 3)\\n\",\n    \"\\n\",\n    \"# Define the CNN architecture\\n\",\n    \"model = Sequential()\\n\",\n    \"model.add(Conv2D(32, (3, 3), activation='relu', input_shape=input_shape))\\n\",\n    \"model.add(MaxPooling2D((2, 2)))\\n\",\n    \"model.add(Conv2D(64, (3, 3), activation='relu'))\\n\",\n    \"model.add(MaxPooling2D((2, 2)))\\n\",\n    \"model.add(Conv2D(128, (3, 3), activation='relu'))\\n\",\n    \"model.add(MaxPooling2D((2, 2)))\\n\",\n    \"model.add(Flatten())\\n\",\n    \"model.add(Dense(64, activation='relu'))\\n\",\n    \"model.add(Dense(1, activation='sigmoid'))\\n\",\n    \"\\n\",\n    \"# Compile the model\\n\",\n    \"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\\n\",\n    \"\\n\",\n    \"# Print the model summary\\n\",\n    \"model.summary()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Found 851 images belonging to 3 classes.\\n\",\n      \"Found 109 images belonging to 3 classes.\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import cv2\\n\",\n    \"from keras.preprocessing.image import ImageDataGenerator\\n\",\n    \"\\n\",\n    \"# Define the path to the directory containing the STFT plot images\\n\",\n    \"train_dir = 'train'\\n\",\n    \"test_dir = 'validation'\\n\",\n    \"\\n\",\n    \"# Define the image size and batch size\\n\",\n    \"img_size = (224, 224)\\n\",\n    \"batch_size = 32\\n\",\n    \"\\n\",\n    \"# Define the ImageDataGenerator object for preprocessing the images\\n\",\n    \"datagen = ImageDataGenerator(\\n\",\n    \"    rescale=1./255,\\n\",\n    \"    preprocessing_function=lambda img: cv2.resize(img, img_size))\\n\",\n    \"\\n\",\n    \"# Define the training and validation generators\\n\",\n    \"train_generator = datagen.flow_from_directory(\\n\",\n    \"    directory=train_dir,\\n\",\n    \"    target_size=img_size,\\n\",\n    \"    batch_size=batch_size,\\n\",\n    \"    class_mode='binary')\\n\",\n    \"\\n\",\n    \"valid_generator = datagen.flow_from_directory(\\n\",\n    \"    directory=test_dir,\\n\",\n    \"    target_size=img_size,\\n\",\n    \"    batch_size=batch_size,\\n\",\n    \"    class_mode='binary')\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"data batch shape: (32, 224, 224, 3)\\n\",\n      \"labels batch shape: (32,)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"for data_batch, labels_batch in train_generator:\\n\",\n    \"    print('data batch shape:', data_batch.shape)\\n\",\n    \"    print('labels batch shape:', labels_batch.shape)\\n\",\n    \"    break\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Epoch 1/30\\n\",\n      \"27/27 [==============================] - 5s 189ms/step - loss: 0.2959 - accuracy: 0.3608 - val_loss: -1.2969 - val_accuracy: 0.3028\\n\",\n      \"Epoch 2/30\\n\",\n      \"27/27 [==============================] - 5s 186ms/step - loss: -0.0973 - accuracy: 0.3608 - val_loss: -3.7730 - val_accuracy: 0.3028\\n\",\n      \"Epoch 3/30\\n\",\n      \"27/27 [==============================] - 5s 186ms/step - loss: 0.0857 - accuracy: 0.3643 - val_loss: -3.2833 - val_accuracy: 0.3028\\n\",\n      \"Epoch 4/30\\n\",\n      \"27/27 [==============================] - 5s 185ms/step - loss: -2.8298 - accuracy: 0.3608 - val_loss: -17.4720 - val_accuracy: 0.3028\\n\",\n      \"Epoch 5/30\\n\",\n      \"27/27 [==============================] - 5s 188ms/step - loss: -17.8126 - accuracy: 0.3737 - val_loss: -121.3252 - val_accuracy: 0.3028\\n\",\n      \"Epoch 6/30\\n\",\n      \"27/27 [==============================] - 5s 187ms/step - loss: -194.7553 - accuracy: 0.3608 - val_loss: -1026.3634 - val_accuracy: 0.3028\\n\",\n      \"Epoch 7/30\\n\",\n      \"27/27 [==============================] - 5s 190ms/step - loss: -914.5147 - accuracy: 0.3690 - val_loss: -6997.7612 - val_accuracy: 0.3028\\n\",\n      \"Epoch 8/30\\n\",\n      \"27/27 [==============================] - 5s 187ms/step - loss: -6816.2866 - accuracy: 0.3608 - val_loss: -39421.5195 - val_accuracy: 0.3028\\n\",\n      \"Epoch 9/30\\n\",\n      \" 6/27 [=====>........................] - ETA: 3s - loss: -36509.7383 - accuracy: 0.3575\"\n     ]\n    },\n    {\n     \"ename\": \"KeyboardInterrupt\",\n     \"evalue\": \"\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[1;31mKeyboardInterrupt\\u001b[0m                         Traceback (most recent call last)\",\n      \"Cell \\u001b[1;32mIn[10], line 1\\u001b[0m\\n\\u001b[1;32m----> 1\\u001b[0m history \\u001b[39m=\\u001b[39m model\\u001b[39m.\\u001b[39;49mfit(train_generator,  epochs\\u001b[39m=\\u001b[39;49m\\u001b[39m30\\u001b[39;49m, validation_data\\u001b[39m=\\u001b[39;49mvalid_generator, verbose\\u001b[39m=\\u001b[39;49m\\u001b[39m1\\u001b[39;49m)\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\keras\\\\engine\\\\training.py:1184\\u001b[0m, in \\u001b[0;36mModel.fit\\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\\u001b[0m\\n\\u001b[0;32m   1177\\u001b[0m \\u001b[39mwith\\u001b[39;00m tf\\u001b[39m.\\u001b[39mprofiler\\u001b[39m.\\u001b[39mexperimental\\u001b[39m.\\u001b[39mTrace(\\n\\u001b[0;32m   1178\\u001b[0m     \\u001b[39m'\\u001b[39m\\u001b[39mtrain\\u001b[39m\\u001b[39m'\\u001b[39m,\\n\\u001b[0;32m   1179\\u001b[0m     epoch_num\\u001b[39m=\\u001b[39mepoch,\\n\\u001b[0;32m   1180\\u001b[0m     step_num\\u001b[39m=\\u001b[39mstep,\\n\\u001b[0;32m   1181\\u001b[0m     batch_size\\u001b[39m=\\u001b[39mbatch_size,\\n\\u001b[0;32m   1182\\u001b[0m     _r\\u001b[39m=\\u001b[39m\\u001b[39m1\\u001b[39m):\\n\\u001b[0;32m   1183\\u001b[0m   callbacks\\u001b[39m.\\u001b[39mon_train_batch_begin(step)\\n\\u001b[1;32m-> 1184\\u001b[0m   tmp_logs \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49mtrain_function(iterator)\\n\\u001b[0;32m   1185\\u001b[0m   \\u001b[39mif\\u001b[39;00m data_handler\\u001b[39m.\\u001b[39mshould_sync:\\n\\u001b[0;32m   1186\\u001b[0m     context\\u001b[39m.\\u001b[39masync_wait()\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\eager\\\\def_function.py:885\\u001b[0m, in \\u001b[0;36mFunction.__call__\\u001b[1;34m(self, *args, **kwds)\\u001b[0m\\n\\u001b[0;32m    882\\u001b[0m compiler \\u001b[39m=\\u001b[39m \\u001b[39m\\\"\\u001b[39m\\u001b[39mxla\\u001b[39m\\u001b[39m\\\"\\u001b[39m \\u001b[39mif\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_jit_compile \\u001b[39melse\\u001b[39;00m \\u001b[39m\\\"\\u001b[39m\\u001b[39mnonXla\\u001b[39m\\u001b[39m\\\"\\u001b[39m\\n\\u001b[0;32m    884\\u001b[0m \\u001b[39mwith\\u001b[39;00m OptionalXlaContext(\\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_jit_compile):\\n\\u001b[1;32m--> 885\\u001b[0m   result \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_call(\\u001b[39m*\\u001b[39margs, \\u001b[39m*\\u001b[39m\\u001b[39m*\\u001b[39mkwds)\\n\\u001b[0;32m    887\\u001b[0m new_tracing_count \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39mexperimental_get_tracing_count()\\n\\u001b[0;32m    888\\u001b[0m without_tracing \\u001b[39m=\\u001b[39m (tracing_count \\u001b[39m==\\u001b[39m new_tracing_count)\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\eager\\\\def_function.py:917\\u001b[0m, in \\u001b[0;36mFunction._call\\u001b[1;34m(self, *args, **kwds)\\u001b[0m\\n\\u001b[0;32m    914\\u001b[0m   \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_lock\\u001b[39m.\\u001b[39mrelease()\\n\\u001b[0;32m    915\\u001b[0m   \\u001b[39m# In this case we have created variables on the first call, so we run the\\u001b[39;00m\\n\\u001b[0;32m    916\\u001b[0m   \\u001b[39m# defunned version which is guaranteed to never create variables.\\u001b[39;00m\\n\\u001b[1;32m--> 917\\u001b[0m   \\u001b[39mreturn\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_stateless_fn(\\u001b[39m*\\u001b[39margs, \\u001b[39m*\\u001b[39m\\u001b[39m*\\u001b[39mkwds)  \\u001b[39m# pylint: disable=not-callable\\u001b[39;00m\\n\\u001b[0;32m    918\\u001b[0m \\u001b[39melif\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_stateful_fn \\u001b[39mis\\u001b[39;00m \\u001b[39mnot\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m:\\n\\u001b[0;32m    919\\u001b[0m   \\u001b[39m# Release the lock early so that multiple threads can perform the call\\u001b[39;00m\\n\\u001b[0;32m    920\\u001b[0m   \\u001b[39m# in parallel.\\u001b[39;00m\\n\\u001b[0;32m    921\\u001b[0m   \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_lock\\u001b[39m.\\u001b[39mrelease()\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\eager\\\\function.py:3039\\u001b[0m, in \\u001b[0;36mFunction.__call__\\u001b[1;34m(self, *args, **kwargs)\\u001b[0m\\n\\u001b[0;32m   3036\\u001b[0m \\u001b[39mwith\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_lock:\\n\\u001b[0;32m   3037\\u001b[0m   (graph_function,\\n\\u001b[0;32m   3038\\u001b[0m    filtered_flat_args) \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_maybe_define_function(args, kwargs)\\n\\u001b[1;32m-> 3039\\u001b[0m \\u001b[39mreturn\\u001b[39;00m graph_function\\u001b[39m.\\u001b[39;49m_call_flat(\\n\\u001b[0;32m   3040\\u001b[0m     filtered_flat_args, captured_inputs\\u001b[39m=\\u001b[39;49mgraph_function\\u001b[39m.\\u001b[39;49mcaptured_inputs)\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\eager\\\\function.py:1963\\u001b[0m, in \\u001b[0;36mConcreteFunction._call_flat\\u001b[1;34m(self, args, captured_inputs, cancellation_manager)\\u001b[0m\\n\\u001b[0;32m   1959\\u001b[0m possible_gradient_type \\u001b[39m=\\u001b[39m gradients_util\\u001b[39m.\\u001b[39mPossibleTapeGradientTypes(args)\\n\\u001b[0;32m   1960\\u001b[0m \\u001b[39mif\\u001b[39;00m (possible_gradient_type \\u001b[39m==\\u001b[39m gradients_util\\u001b[39m.\\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\\n\\u001b[0;32m   1961\\u001b[0m     \\u001b[39mand\\u001b[39;00m executing_eagerly):\\n\\u001b[0;32m   1962\\u001b[0m   \\u001b[39m# No tape is watching; skip to running the function.\\u001b[39;00m\\n\\u001b[1;32m-> 1963\\u001b[0m   \\u001b[39mreturn\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_build_call_outputs(\\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49m_inference_function\\u001b[39m.\\u001b[39;49mcall(\\n\\u001b[0;32m   1964\\u001b[0m       ctx, args, cancellation_manager\\u001b[39m=\\u001b[39;49mcancellation_manager))\\n\\u001b[0;32m   1965\\u001b[0m forward_backward \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_select_forward_and_backward_functions(\\n\\u001b[0;32m   1966\\u001b[0m     args,\\n\\u001b[0;32m   1967\\u001b[0m     possible_gradient_type,\\n\\u001b[0;32m   1968\\u001b[0m     executing_eagerly)\\n\\u001b[0;32m   1969\\u001b[0m forward_function, args_with_tangents \\u001b[39m=\\u001b[39m forward_backward\\u001b[39m.\\u001b[39mforward()\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\eager\\\\function.py:591\\u001b[0m, in \\u001b[0;36m_EagerDefinedFunction.call\\u001b[1;34m(self, ctx, args, cancellation_manager)\\u001b[0m\\n\\u001b[0;32m    589\\u001b[0m \\u001b[39mwith\\u001b[39;00m _InterpolateFunctionError(\\u001b[39mself\\u001b[39m):\\n\\u001b[0;32m    590\\u001b[0m   \\u001b[39mif\\u001b[39;00m cancellation_manager \\u001b[39mis\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m:\\n\\u001b[1;32m--> 591\\u001b[0m     outputs \\u001b[39m=\\u001b[39m execute\\u001b[39m.\\u001b[39;49mexecute(\\n\\u001b[0;32m    592\\u001b[0m         \\u001b[39mstr\\u001b[39;49m(\\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49msignature\\u001b[39m.\\u001b[39;49mname),\\n\\u001b[0;32m    593\\u001b[0m         num_outputs\\u001b[39m=\\u001b[39;49m\\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49m_num_outputs,\\n\\u001b[0;32m    594\\u001b[0m         inputs\\u001b[39m=\\u001b[39;49margs,\\n\\u001b[0;32m    595\\u001b[0m         attrs\\u001b[39m=\\u001b[39;49mattrs,\\n\\u001b[0;32m    596\\u001b[0m         ctx\\u001b[39m=\\u001b[39;49mctx)\\n\\u001b[0;32m    597\\u001b[0m   \\u001b[39melse\\u001b[39;00m:\\n\\u001b[0;32m    598\\u001b[0m     outputs \\u001b[39m=\\u001b[39m execute\\u001b[39m.\\u001b[39mexecute_with_cancellation(\\n\\u001b[0;32m    599\\u001b[0m         \\u001b[39mstr\\u001b[39m(\\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39msignature\\u001b[39m.\\u001b[39mname),\\n\\u001b[0;32m    600\\u001b[0m         num_outputs\\u001b[39m=\\u001b[39m\\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_num_outputs,\\n\\u001b[1;32m   (...)\\u001b[0m\\n\\u001b[0;32m    603\\u001b[0m         ctx\\u001b[39m=\\u001b[39mctx,\\n\\u001b[0;32m    604\\u001b[0m         cancellation_manager\\u001b[39m=\\u001b[39mcancellation_manager)\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\techi\\\\anaconda3\\\\envs\\\\ml\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\eager\\\\execute.py:59\\u001b[0m, in \\u001b[0;36mquick_execute\\u001b[1;34m(op_name, num_outputs, inputs, attrs, ctx, name)\\u001b[0m\\n\\u001b[0;32m     57\\u001b[0m \\u001b[39mtry\\u001b[39;00m:\\n\\u001b[0;32m     58\\u001b[0m   ctx\\u001b[39m.\\u001b[39mensure_initialized()\\n\\u001b[1;32m---> 59\\u001b[0m   tensors \\u001b[39m=\\u001b[39m pywrap_tfe\\u001b[39m.\\u001b[39;49mTFE_Py_Execute(ctx\\u001b[39m.\\u001b[39;49m_handle, device_name, op_name,\\n\\u001b[0;32m     60\\u001b[0m                                       inputs, attrs, num_outputs)\\n\\u001b[0;32m     61\\u001b[0m \\u001b[39mexcept\\u001b[39;00m core\\u001b[39m.\\u001b[39m_NotOkStatusException \\u001b[39mas\\u001b[39;00m e:\\n\\u001b[0;32m     62\\u001b[0m   \\u001b[39mif\\u001b[39;00m name \\u001b[39mis\\u001b[39;00m \\u001b[39mnot\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m:\\n\",\n      \"\\u001b[1;31mKeyboardInterrupt\\u001b[0m: \"\n     ]\n    }\n   ],\n   \"source\": [\n    \"history = model.fit(train_generator,  epochs=30, validation_data=valid_generator, verbose=1)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"from scipy import signal\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"def plot_power_vs_freq(channel, eeg, fs=200):\\n\",\n    \"    \\\"\\\"\\\"Extract power (in dB) vs freq graph from a specific channel of EEG data.\\n\",\n    \"    \\n\",\n    \"    Args:\\n\",\n    \"        channel (int): The channel number (0-indexed) for which the power spectrum is to be computed.\\n\",\n    \"        eeg (ndarray): The EEG data array of shape (num_channels, num_samples).\\n\",\n    \"        fs (float): The sampling frequency in Hz (default: 200 Hz).\\n\",\n    \"        \\n\",\n    \"    Returns:\\n\",\n    \"        None (displays a plot of power vs frequency).\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    # Select the specific channel of EEG data\\n\",\n    \"    eeg_channel = eeg[channel, :]\\n\",\n    \"    \\n\",\n    \"    # Compute the power spectrum density using Welch's method\\n\",\n    \"    f, psd = signal.welch(eeg_channel, fs=fs, nperseg=fs*2, nfft=fs*8)\\n\",\n    \"    \\n\",\n    \"    # Convert power to dB scale\\n\",\n    \"    psd_db = 10 * np.log10(psd)\\n\",\n    \"    \\n\",\n    \"    # Plot the power vs frequency graph\\n\",\n    \"    plt.plot(f, psd_db)\\n\",\n    \"    plt.title(f\\\"Power vs Frequency for Channel {channel}\\\")\\n\",\n    \"    plt.xlabel(\\\"Frequency (Hz)\\\")\\n\",\n    \"    plt.ylabel(\\\"Power Spectral Density (dB/Hz)\\\")\\n\",\n    \"    plt.show()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Example usage\\n\",\n    \"\\n\",\n    \"plot_power_vs_freq(4, EEG)  # plot power vs frequency for channel 4\\n\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"ml\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.16\"\n  },\n  \"orig_nbformat\": 4,\n  \"vscode\": {\n   \"interpreter\": {\n    \"hash\": \"0bd6827e5b9b024a8afcecbb4b32b3f39bbe94aa5ba060866c09f0f3ec848126\"\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        "epilepsy.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# For example, here's several helpful packages to load\\n\",\n    \"\\n\",\n    \"import numpy as np # linear algebra\\n\",\n    \"import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import seaborn as sn\\n\",\n    \"import warnings\\n\",\n    \"warnings.filterwarnings('ignore')\\n\",\n    \"\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>X1</th>\\n\",\n       \"      <th>X2</th>\\n\",\n       \"      <th>X3</th>\\n\",\n       \"      <th>X4</th>\\n\",\n       \"      <th>X5</th>\\n\",\n       \"      <th>X6</th>\\n\",\n       \"      <th>X7</th>\\n\",\n       \"      <th>X8</th>\\n\",\n       \"      <th>X9</th>\\n\",\n       \"      <th>X10</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>X170</th>\\n\",\n       \"      <th>X171</th>\\n\",\n       \"      <th>X172</th>\\n\",\n       \"      <th>X173</th>\\n\",\n       \"      <th>X174</th>\\n\",\n       \"      <th>X175</th>\\n\",\n       \"      <th>X176</th>\\n\",\n       \"      <th>X177</th>\\n\",\n       \"      <th>X178</th>\\n\",\n       \"      <th>y</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>135</td>\\n\",\n       \"      <td>190</td>\\n\",\n       \"      <td>229</td>\\n\",\n       \"      <td>223</td>\\n\",\n       \"      <td>192</td>\\n\",\n       \"      <td>125</td>\\n\",\n       \"      <td>55</td>\\n\",\n       \"      <td>-9</td>\\n\",\n       \"      <td>-33</td>\\n\",\n       \"      <td>-38</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>-17</td>\\n\",\n       \"      <td>-15</td>\\n\",\n       \"      <td>-31</td>\\n\",\n       \"      <td>-77</td>\\n\",\n       \"      <td>-103</td>\\n\",\n       \"      <td>-127</td>\\n\",\n       \"      <td>-116</td>\\n\",\n       \"      <td>-83</td>\\n\",\n       \"      <td>-51</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>386</td>\\n\",\n       \"      <td>382</td>\\n\",\n       \"      <td>356</td>\\n\",\n       \"      <td>331</td>\\n\",\n       \"      <td>320</td>\\n\",\n       \"      <td>315</td>\\n\",\n       \"      <td>307</td>\\n\",\n       \"      <td>272</td>\\n\",\n       \"      <td>244</td>\\n\",\n       \"      <td>232</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>164</td>\\n\",\n       \"      <td>150</td>\\n\",\n       \"      <td>146</td>\\n\",\n       \"      <td>152</td>\\n\",\n       \"      <td>157</td>\\n\",\n       \"      <td>156</td>\\n\",\n       \"      <td>154</td>\\n\",\n       \"      <td>143</td>\\n\",\n       \"      <td>129</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>-32</td>\\n\",\n       \"      <td>-39</td>\\n\",\n       \"      <td>-47</td>\\n\",\n       \"      <td>-37</td>\\n\",\n       \"      <td>-32</td>\\n\",\n       \"      <td>-36</td>\\n\",\n       \"      <td>-57</td>\\n\",\n       \"      <td>-73</td>\\n\",\n       \"      <td>-85</td>\\n\",\n       \"      <td>-94</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>57</td>\\n\",\n       \"      <td>64</td>\\n\",\n       \"      <td>48</td>\\n\",\n       \"      <td>19</td>\\n\",\n       \"      <td>-12</td>\\n\",\n       \"      <td>-30</td>\\n\",\n       \"      <td>-35</td>\\n\",\n       \"      <td>-35</td>\\n\",\n       \"      <td>-36</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>-105</td>\\n\",\n       \"      <td>-101</td>\\n\",\n       \"      <td>-96</td>\\n\",\n       \"      <td>-92</td>\\n\",\n       \"      <td>-89</td>\\n\",\n       \"      <td>-95</td>\\n\",\n       \"      <td>-102</td>\\n\",\n       \"      <td>-100</td>\\n\",\n       \"      <td>-87</td>\\n\",\n       \"      <td>-79</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>-82</td>\\n\",\n       \"      <td>-81</td>\\n\",\n       \"      <td>-80</td>\\n\",\n       \"      <td>-77</td>\\n\",\n       \"      <td>-85</td>\\n\",\n       \"      <td>-77</td>\\n\",\n       \"      <td>-72</td>\\n\",\n       \"      <td>-69</td>\\n\",\n       \"      <td>-65</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>-9</td>\\n\",\n       \"      <td>-65</td>\\n\",\n       \"      <td>-98</td>\\n\",\n       \"      <td>-102</td>\\n\",\n       \"      <td>-78</td>\\n\",\n       \"      <td>-48</td>\\n\",\n       \"      <td>-16</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-21</td>\\n\",\n       \"      <td>-59</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>-12</td>\\n\",\n       \"      <td>-32</td>\\n\",\n       \"      <td>-41</td>\\n\",\n       \"      <td>-65</td>\\n\",\n       \"      <td>-83</td>\\n\",\n       \"      <td>-89</td>\\n\",\n       \"      <td>-73</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>5 rows \u00d7 179 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"    X1   X2   X3   X4   X5   X6   X7   X8   X9  X10  ...  X170  X171  X172  \\\\\\n\",\n       \"0  135  190  229  223  192  125   55   -9  -33  -38  ...   -17   -15   -31   \\n\",\n       \"1  386  382  356  331  320  315  307  272  244  232  ...   164   150   146   \\n\",\n       \"2  -32  -39  -47  -37  -32  -36  -57  -73  -85  -94  ...    57    64    48   \\n\",\n       \"3 -105 -101  -96  -92  -89  -95 -102 -100  -87  -79  ...   -82   -81   -80   \\n\",\n       \"4   -9  -65  -98 -102  -78  -48  -16    0  -21  -59  ...     4     2   -12   \\n\",\n       \"\\n\",\n       \"   X173  X174  X175  X176  X177  X178  y  \\n\",\n       \"0   -77  -103  -127  -116   -83   -51  4  \\n\",\n       \"1   152   157   156   154   143   129  1  \\n\",\n       \"2    19   -12   -30   -35   -35   -36  5  \\n\",\n       \"3   -77   -85   -77   -72   -69   -65  5  \\n\",\n       \"4   -32   -41   -65   -83   -89   -73  5  \\n\",\n       \"\\n\",\n       \"[5 rows x 179 columns]\"\n      ]\n     },\n     \"execution_count\": 4,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"ESR = pd.read_csv('Epileptic Seizure Recognition.csv')\\n\",\n    \"ESR = ESR.drop(columns = ESR.columns[0]) \\n\",\n    \"ESR.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0    9200\\n\",\n       \"1    2300\\n\",\n       \"Name: y, dtype: int64\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"cols = ESR.columns\\n\",\n    \"tgt = ESR.y\\n\",\n    \"tgt[tgt > 1] = 0\\n\",\n    \"tgt.value_counts()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"The number of trials for the non-seizure class is: 9200\\n\",\n      \"The number of trials for the seizure class is: 2300\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"non_seizure, seizure = tgt.value_counts()\\n\",\n    \"print('The number of trials for the non-seizure class is:', non_seizure)\\n\",\n    \"print('The number of trials for the seizure class is:', seizure)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0\"\n      ]\n     },\n     \"execution_count\": 13,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"ESR.isnull().sum().sum()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>X1</th>\\n\",\n       \"      <th>X2</th>\\n\",\n       \"      <th>X3</th>\\n\",\n       \"      <th>X4</th>\\n\",\n       \"      <th>X5</th>\\n\",\n       \"      <th>X6</th>\\n\",\n       \"      <th>X7</th>\\n\",\n       \"      <th>X8</th>\\n\",\n       \"      <th>X9</th>\\n\",\n       \"      <th>X10</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>X170</th>\\n\",\n       \"      <th>X171</th>\\n\",\n       \"      <th>X172</th>\\n\",\n       \"      <th>X173</th>\\n\",\n       \"      <th>X174</th>\\n\",\n       \"      <th>X175</th>\\n\",\n       \"      <th>X176</th>\\n\",\n       \"      <th>X177</th>\\n\",\n       \"      <th>X178</th>\\n\",\n       \"      <th>y</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>count</th>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.00000</td>\\n\",\n       \"      <td>11500.00000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"      <td>11500.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>mean</th>\\n\",\n       \"      <td>-11.581391</td>\\n\",\n       \"      <td>-10.911565</td>\\n\",\n       \"      <td>-10.187130</td>\\n\",\n       \"      <td>-9.143043</td>\\n\",\n       \"      <td>-8.009739</td>\\n\",\n       \"      <td>-7.003478</td>\\n\",\n       \"      <td>-6.502087</td>\\n\",\n       \"      <td>-6.68713</td>\\n\",\n       \"      <td>-6.55800</td>\\n\",\n       \"      <td>-6.168435</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>-10.145739</td>\\n\",\n       \"      <td>-11.630348</td>\\n\",\n       \"      <td>-12.943478</td>\\n\",\n       \"      <td>-13.668870</td>\\n\",\n       \"      <td>-13.363304</td>\\n\",\n       \"      <td>-13.045043</td>\\n\",\n       \"      <td>-12.705130</td>\\n\",\n       \"      <td>-12.426000</td>\\n\",\n       \"      <td>-12.195652</td>\\n\",\n       \"      <td>0.200000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>std</th>\\n\",\n       \"      <td>165.626284</td>\\n\",\n       \"      <td>166.059609</td>\\n\",\n       \"      <td>163.524317</td>\\n\",\n       \"      <td>161.269041</td>\\n\",\n       \"      <td>160.998007</td>\\n\",\n       \"      <td>161.328725</td>\\n\",\n       \"      <td>161.467837</td>\\n\",\n       \"      <td>162.11912</td>\\n\",\n       \"      <td>162.03336</td>\\n\",\n       \"      <td>160.436352</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>164.652883</td>\\n\",\n       \"      <td>166.149790</td>\\n\",\n       \"      <td>168.554058</td>\\n\",\n       \"      <td>168.556486</td>\\n\",\n       \"      <td>167.257290</td>\\n\",\n       \"      <td>164.241019</td>\\n\",\n       \"      <td>162.895832</td>\\n\",\n       \"      <td>162.886311</td>\\n\",\n       \"      <td>164.852015</td>\\n\",\n       \"      <td>0.400017</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>min</th>\\n\",\n       \"      <td>-1839.000000</td>\\n\",\n       \"      <td>-1838.000000</td>\\n\",\n       \"      <td>-1835.000000</td>\\n\",\n       \"      <td>-1845.000000</td>\\n\",\n       \"      <td>-1791.000000</td>\\n\",\n       \"      <td>-1757.000000</td>\\n\",\n       \"      <td>-1832.000000</td>\\n\",\n       \"      <td>-1778.00000</td>\\n\",\n       \"      <td>-1840.00000</td>\\n\",\n       \"      <td>-1867.000000</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>-1867.000000</td>\\n\",\n       \"      <td>-1865.000000</td>\\n\",\n       \"      <td>-1642.000000</td>\\n\",\n       \"      <td>-1723.000000</td>\\n\",\n       \"      <td>-1866.000000</td>\\n\",\n       \"      <td>-1863.000000</td>\\n\",\n       \"      <td>-1781.000000</td>\\n\",\n       \"      <td>-1727.000000</td>\\n\",\n       \"      <td>-1829.000000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25%</th>\\n\",\n       \"      <td>-54.000000</td>\\n\",\n       \"      <td>-55.000000</td>\\n\",\n       \"      <td>-54.000000</td>\\n\",\n       \"      <td>-54.000000</td>\\n\",\n       \"      <td>-54.000000</td>\\n\",\n       \"      <td>-54.000000</td>\\n\",\n       \"      <td>-54.000000</td>\\n\",\n       \"      <td>-55.00000</td>\\n\",\n       \"      <td>-55.00000</td>\\n\",\n       \"      <td>-54.000000</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>-55.000000</td>\\n\",\n       \"      <td>-56.000000</td>\\n\",\n       \"      <td>-56.000000</td>\\n\",\n       \"      <td>-56.000000</td>\\n\",\n       \"      <td>-55.000000</td>\\n\",\n       \"      <td>-56.000000</td>\\n\",\n       \"      <td>-55.000000</td>\\n\",\n       \"      <td>-55.000000</td>\\n\",\n       \"      <td>-55.000000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>50%</th>\\n\",\n       \"      <td>-8.000000</td>\\n\",\n       \"      <td>-8.000000</td>\\n\",\n       \"      <td>-7.000000</td>\\n\",\n       \"      <td>-8.000000</td>\\n\",\n       \"      <td>-8.000000</td>\\n\",\n       \"      <td>-8.000000</td>\\n\",\n       \"      <td>-8.000000</td>\\n\",\n       \"      <td>-8.00000</td>\\n\",\n       \"      <td>-7.00000</td>\\n\",\n       \"      <td>-7.000000</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>-9.000000</td>\\n\",\n       \"      <td>-10.000000</td>\\n\",\n       \"      <td>-10.000000</td>\\n\",\n       \"      <td>-10.000000</td>\\n\",\n       \"      <td>-10.000000</td>\\n\",\n       \"      <td>-9.000000</td>\\n\",\n       \"      <td>-9.000000</td>\\n\",\n       \"      <td>-9.000000</td>\\n\",\n       \"      <td>-9.000000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>75%</th>\\n\",\n       \"      <td>34.000000</td>\\n\",\n       \"      <td>35.000000</td>\\n\",\n       \"      <td>36.000000</td>\\n\",\n       \"      <td>36.000000</td>\\n\",\n       \"      <td>35.000000</td>\\n\",\n       \"      <td>36.000000</td>\\n\",\n       \"      <td>35.000000</td>\\n\",\n       \"      <td>36.00000</td>\\n\",\n       \"      <td>36.00000</td>\\n\",\n       \"      <td>35.250000</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>34.000000</td>\\n\",\n       \"      <td>34.000000</td>\\n\",\n       \"      <td>33.000000</td>\\n\",\n       \"      <td>33.000000</td>\\n\",\n       \"      <td>34.000000</td>\\n\",\n       \"      <td>34.000000</td>\\n\",\n       \"      <td>34.000000</td>\\n\",\n       \"      <td>34.000000</td>\\n\",\n       \"      <td>34.000000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>max</th>\\n\",\n       \"      <td>1726.000000</td>\\n\",\n       \"      <td>1713.000000</td>\\n\",\n       \"      <td>1697.000000</td>\\n\",\n       \"      <td>1612.000000</td>\\n\",\n       \"      <td>1518.000000</td>\\n\",\n       \"      <td>1816.000000</td>\\n\",\n       \"      <td>2047.000000</td>\\n\",\n       \"      <td>2047.00000</td>\\n\",\n       \"      <td>2047.00000</td>\\n\",\n       \"      <td>2047.000000</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>1777.000000</td>\\n\",\n       \"      <td>1472.000000</td>\\n\",\n       \"      <td>1319.000000</td>\\n\",\n       \"      <td>1436.000000</td>\\n\",\n       \"      <td>1733.000000</td>\\n\",\n       \"      <td>1958.000000</td>\\n\",\n       \"      <td>2047.000000</td>\\n\",\n       \"      <td>2047.000000</td>\\n\",\n       \"      <td>1915.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>8 rows \u00d7 179 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                 X1            X2            X3            X4            X5  \\\\\\n\",\n       \"count  11500.000000  11500.000000  11500.000000  11500.000000  11500.000000   \\n\",\n       \"mean     -11.581391    -10.911565    -10.187130     -9.143043     -8.009739   \\n\",\n       \"std      165.626284    166.059609    163.524317    161.269041    160.998007   \\n\",\n       \"min    -1839.000000  -1838.000000  -1835.000000  -1845.000000  -1791.000000   \\n\",\n       \"25%      -54.000000    -55.000000    -54.000000    -54.000000    -54.000000   \\n\",\n       \"50%       -8.000000     -8.000000     -7.000000     -8.000000     -8.000000   \\n\",\n       \"75%       34.000000     35.000000     36.000000     36.000000     35.000000   \\n\",\n       \"max     1726.000000   1713.000000   1697.000000   1612.000000   1518.000000   \\n\",\n       \"\\n\",\n       \"                 X6            X7           X8           X9           X10  \\\\\\n\",\n       \"count  11500.000000  11500.000000  11500.00000  11500.00000  11500.000000   \\n\",\n       \"mean      -7.003478     -6.502087     -6.68713     -6.55800     -6.168435   \\n\",\n       \"std      161.328725    161.467837    162.11912    162.03336    160.436352   \\n\",\n       \"min    -1757.000000  -1832.000000  -1778.00000  -1840.00000  -1867.000000   \\n\",\n       \"25%      -54.000000    -54.000000    -55.00000    -55.00000    -54.000000   \\n\",\n       \"50%       -8.000000     -8.000000     -8.00000     -7.00000     -7.000000   \\n\",\n       \"75%       36.000000     35.000000     36.00000     36.00000     35.250000   \\n\",\n       \"max     1816.000000   2047.000000   2047.00000   2047.00000   2047.000000   \\n\",\n       \"\\n\",\n       \"       ...          X170          X171          X172          X173  \\\\\\n\",\n       \"count  ...  11500.000000  11500.000000  11500.000000  11500.000000   \\n\",\n       \"mean   ...    -10.145739    -11.630348    -12.943478    -13.668870   \\n\",\n       \"std    ...    164.652883    166.149790    168.554058    168.556486   \\n\",\n       \"min    ...  -1867.000000  -1865.000000  -1642.000000  -1723.000000   \\n\",\n       \"25%    ...    -55.000000    -56.000000    -56.000000    -56.000000   \\n\",\n       \"50%    ...     -9.000000    -10.000000    -10.000000    -10.000000   \\n\",\n       \"75%    ...     34.000000     34.000000     33.000000     33.000000   \\n\",\n       \"max    ...   1777.000000   1472.000000   1319.000000   1436.000000   \\n\",\n       \"\\n\",\n       \"               X174          X175          X176          X177          X178  \\\\\\n\",\n       \"count  11500.000000  11500.000000  11500.000000  11500.000000  11500.000000   \\n\",\n       \"mean     -13.363304    -13.045043    -12.705130    -12.426000    -12.195652   \\n\",\n       \"std      167.257290    164.241019    162.895832    162.886311    164.852015   \\n\",\n       \"min    -1866.000000  -1863.000000  -1781.000000  -1727.000000  -1829.000000   \\n\",\n       \"25%      -55.000000    -56.000000    -55.000000    -55.000000    -55.000000   \\n\",\n       \"50%      -10.000000     -9.000000     -9.000000     -9.000000     -9.000000   \\n\",\n       \"75%       34.000000     34.000000     34.000000     34.000000     34.000000   \\n\",\n       \"max     1733.000000   1958.000000   2047.000000   2047.000000   1915.000000   \\n\",\n       \"\\n\",\n       \"                  y  \\n\",\n       \"count  11500.000000  \\n\",\n       \"mean       0.200000  \\n\",\n       \"std        0.400017  \\n\",\n       \"min        0.000000  \\n\",\n       \"25%        0.000000  \\n\",\n       \"50%        0.000000  \\n\",\n       \"75%        0.000000  \\n\",\n       \"max        1.000000  \\n\",\n       \"\\n\",\n       \"[8 rows x 179 columns]\"\n      ]\n     },\n     \"execution_count\": 14,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"ESR.describe()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(11500,)\"\n      ]\n     },\n     \"execution_count\": 15,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"Y = ESR.iloc[:,178].values\\n\",\n    \"Y.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([0, 1, 0, ..., 0, 0, 0], dtype=int64)\"\n      ]\n     },\n     \"execution_count\": 16,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"Y[Y>1]=0\\n\",\n    \"Y\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(11500, 177)\"\n      ]\n     },\n     \"execution_count\": 17,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"X = ESR.iloc[:,1:178].values\\n\",\n    \"X.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from sklearn.model_selection import train_test_split, cross_val_score\\n\",\n    \"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from sklearn.preprocessing import StandardScaler\\n\",\n    \"sc = StandardScaler()\\n\",\n    \"X_train = sc.fit_transform(X_train)\\n\",\n    \"X_test = sc.transform(X_test)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Accuracy is: 98.16%\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from sklearn.svm import SVC\\n\",\n    \"clf = SVC()\\n\",\n    \"clf.fit(X_train, y_train)\\n\",\n    \"y_pred_svc = clf.predict(X_test)\\n\",\n    \"acc_svc = round(clf.score(X_train, y_train) * 100, 2)\\n\",\n    \"print(\\\"Accuracy is:\\\",(str(acc_svc)+'%'))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[X1      -55\\n\",\n       \" X2       -9\\n\",\n       \" X3       52\\n\",\n       \" X4      111\\n\",\n       \" X5      135\\n\",\n       \"        ... \\n\",\n       \" X173    -62\\n\",\n       \" X174    -41\\n\",\n       \" X175    -26\\n\",\n       \" X176     11\\n\",\n       \" X177     67\\n\",\n       \" Name: 6, Length: 177, dtype: int64]\"\n      ]\n     },\n     \"execution_count\": 21,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"new_input1 = [ESR.iloc[6, :177]]\\n\",\n    \"new_input1\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([1], dtype=int64)\"\n      ]\n     },\n     \"execution_count\": 22,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"new_output = clf.predict(new_input1)\\n\",\n    \"new_output\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\\"yes\\\" you might get seizure be conscious about it\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"new_output\\n\",\n    \"if new_output==[1]:\\n\",\n    \"    print('\\\"yes\\\" you might get seizure be conscious about it')\\n\",\n    \"else:\\n\",\n    \"    print('You are safe no worries :)')\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"ml\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.16\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        }
    },
    "Hyperparameter-Optimization-CNN-Differential-Evolution": {
        "README.md": {
            "code": "# Hyperparameter Optimization of CNN Using Differential Evolution Algorithm\nThis repository contains the code implementation for the Hyperparameter Optimization of Convolutional Neural Networks for Speech Command Recognition using Differential Evolution\n\n## Introduction\n\n### Differential Evolution:  \nDifferential Evolution (DE) is a population-based optimization algorithm and is a powerful as well as versatile evolutionary algorithm commonly used to solve optimization problems, especially in continuous domains.\n\nDE belongs to the class of evolutionary algorithms that mimic the process of natural selection and evolution. Inspired by the principle of survival of the fittest, DE aims to iteratively improve a population of candidate solutions to find the optimal or near-optimal solution to a given problem.\n\n### Dataset and Problem Statement:  \nThis implementation uses Differential Evolution based Hyperparameter Search for Convolutional Neural Networks for the Google Speech Commands dataset to optimize recognition of speech commands for 8 classes: \"down\", \"go\", \"left\", \"no\", \"right\", \"stop\", \"up\" and \"yes\".  \nThe approach is then compared to Optimization of CNN using Genetic Algorithm (GA) and performance of Pre-Trained Deep CNN (DCNN) Models on the same dataset.\n\n## Libraries Used:\n- Tensorflow (for CNN Model Architecture, Model Training, Pre-Trained models)\n- Librosa (Audio Signal Processing)\n- Numpy\n- Sklearn (for metrics)\n"
        },
        "Speech_Command_Classification_DE.ipynb": {
            "code": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"vzkLHet6JIPX\",\n        \"outputId\": \"17f4607f-6a1a-41dc-fe00-dfb3e9306004\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"!pip install python_speech_features\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"khcp0u_yJMQL\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import os\\n\",\n        \"import pathlib\\n\",\n        \"from tensorflow.keras.layers.experimental import preprocessing\\n\",\n        \"from tensorflow.keras import layers\\n\",\n        \"from tensorflow.keras import models\\n\",\n        \"from IPython import display\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"import numpy as np\\n\",\n        \"import seaborn as sns\\n\",\n        \"import tensorflow as tf\\n\",\n        \"import os\\n\",\n        \"from scipy.io import wavfile\\n\",\n        \"import pandas as pd\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"import numpy as np\\n\",\n        \"from keras.layers import Conv2D,MaxPooling2D,Flatten,LSTM,BatchNormalization,GlobalAveragePooling2D\\n\",\n        \"from keras.layers import Dropout,Dense,TimeDistributed\\n\",\n        \"from keras.models import Sequential\\n\",\n        \"from keras.applications.resnet import ResNet50\\n\",\n        \"from keras.utils.np_utils import to_categorical\\n\",\n        \"from sklearn.utils.class_weight import compute_class_weight\\n\",\n        \"from tqdm import tqdm\\n\",\n        \"from python_speech_features import mfcc\\n\",\n        \"import pickle\\n\",\n        \"from keras.callbacks import ModelCheckpoint\\n\",\n        \" \\n\",\n        \"import librosa as lr\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 36\n        },\n        \"id\": \"3wH84isvy6rt\",\n        \"outputId\": \"dd2c97a2-3df5-471a-e573-7714e5ca14f2\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import tensorflow as tf\\n\",\n        \"tf.__version__\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"mPKbqPPdJSEW\",\n        \"outputId\": \"10ecc694-864f-4ac2-ae3b-2e53120c5150\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"data_dir = pathlib.Path('data/mini_speech_commands')\\n\",\n        \"if not data_dir.exists():\\n\",\n        \"  tf.keras.utils.get_file(\\n\",\n        \"      'mini_speech_commands.zip',\\n\",\n        \"      origin=\\\"http://storage.googleapis.com/download.tensorflow.org/data/mini_speech_commands.zip\\\",\\n\",\n        \"      extract=True,\\n\",\n        \"      cache_dir='.', cache_subdir='data')\\n\",\n        \" \\n\",\n        \"commands = np.array(tf.io.gfile.listdir(str(data_dir)))\\n\",\n        \"commands = commands[commands != 'README.md']\\n\",\n        \"print('Commands:', commands)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"filenames = tf.io.gfile.glob(str(data_dir) + '/*/*')\\n\",\n        \"filenames = tf.random.shuffle(filenames)\\n\",\n        \"num_samples = len(filenames)\\n\",\n        \"print('Number of total examples:', num_samples)\\n\",\n        \"print('Number of examples per label:',\\n\",\n        \"      len(tf.io.gfile.listdir(str(data_dir/commands[0]))))\\n\",\n        \"print('Example file tensor:', filenames[0])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"KfIB-0XhJWRn\",\n        \"outputId\": \"55bbf5e4-299f-4e89-bd87-a3ac626be622\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"train_files = filenames[:6400]\\n\",\n        \"val_files = filenames[6400: 6400 + 1000]\\n\",\n        \"test_files = filenames[-600:]\\n\",\n        \" \\n\",\n        \"print('Training set size', len(train_files))\\n\",\n        \"print('Validation set size', len(val_files))\\n\",\n        \"print('Test set size', len(test_files))\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def decode_audio(audio_binary):\\n\",\n        \"  audio, _ = tf.audio.decode_wav(audio_binary)\\n\",\n        \"  return tf.squeeze(audio, axis=-1)\\n\",\n        \" \\n\",\n        \"def get_label(file_path):\\n\",\n        \"  parts = tf.strings.split(file_path, os.path.sep)\\n\",\n        \" \\n\",\n        \"  # Note: You'll use indexing here instead of tuple unpacking to enable this \\n\",\n        \"  # to work in a TensorFlow graph.\\n\",\n        \"  return parts[-2] \"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 1000\n        },\n        \"id\": \"Kut1NFEwJZk5\",\n        \"outputId\": \"c3b14a16-52a3-4693-b49c-03289232408b\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def get_waveform_and_label(file_path):\\n\",\n        \"  label = get_label(file_path)\\n\",\n        \"  print(\\\"label\\\")\\n\",\n        \"  print(label)\\n\",\n        \"  audio_binary = tf.io.read_file(file_path)\\n\",\n        \"  waveform = decode_audio(audio_binary)\\n\",\n        \"  print(\\\"waveform\\\")\\n\",\n        \"  print(waveform)\\n\",\n        \"  return waveform, label\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"AUTOTUNE = tf.data.AUTOTUNE\\n\",\n        \"files_ds = tf.data.Dataset.from_tensor_slices(train_files)\\n\",\n        \"waveform_ds = files_ds.map(get_waveform_and_label, num_parallel_calls=AUTOTUNE)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"rows = 3\\n\",\n        \"cols = 3\\n\",\n        \"n = rows*cols\\n\",\n        \"fig, axes = plt.subplots(rows, cols, figsize=(10, 12))\\n\",\n        \"for i, (audio, label) in enumerate(waveform_ds.take(n)):\\n\",\n        \"  r = i // cols\\n\",\n        \"  c = i % cols\\n\",\n        \"  ax = axes[r][c]\\n\",\n        \"  ax.plot(audio.numpy())\\n\",\n        \"  ax.set_yticks(np.arange(-1.2, 1.2, 0.2))\\n\",\n        \"  label = label.numpy().decode('utf-8')\\n\",\n        \"  ax.set_title(label)\\n\",\n        \" \\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def get_spectrogram(waveform):\\n\",\n        \"  # Padding for files with less than 16000 samples\\n\",\n        \"  zero_padding = tf.zeros([16000] - tf.shape(waveform), dtype=tf.float32)\\n\",\n        \" \\n\",\n        \"  # Concatenate audio with padding so that all audio clips will be of the \\n\",\n        \"  # same length\\n\",\n        \"  waveform = tf.cast(waveform, tf.float32)\\n\",\n        \"  equal_length = tf.concat([waveform, zero_padding], 0)\\n\",\n        \"  spectrogram = tf.signal.stft(\\n\",\n        \"      equal_length, frame_length=255, frame_step=128)\\n\",\n        \"      \\n\",\n        \"  spectrogram = tf.abs(spectrogram)\\n\",\n        \" \\n\",\n        \"  return spectrogram\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"for waveform, label in waveform_ds.take(1):\\n\",\n        \"  label = label.numpy().decode('utf-8')\\n\",\n        \"  spectrogram = get_spectrogram(waveform)\\n\",\n        \" \\n\",\n        \"print('Label:', label)\\n\",\n        \"print('Waveform shape:', waveform.shape)\\n\",\n        \"print('Spectrogram shape:', spectrogram.shape)\\n\",\n        \"print('Audio playback')\\n\",\n        \"display.display(display.Audio(waveform, rate=16000))\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def plot_spectrogram(spectrogram, ax):\\n\",\n        \"  # Convert to frequencies to log scale and transpose so that the time is\\n\",\n        \"  # represented in the x-axis (columns).\\n\",\n        \"  log_spec = np.log(spectrogram.T)\\n\",\n        \"  height = log_spec.shape[0]\\n\",\n        \"  width = log_spec.shape[1]\\n\",\n        \"  X = np.linspace(0, np.size(spectrogram), num=width, dtype=int)\\n\",\n        \"  Y = range(height)\\n\",\n        \"  ax.pcolormesh(X, Y, log_spec)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"fig, axes = plt.subplots(2, figsize=(12, 8))\\n\",\n        \"timescale = np.arange(waveform.shape[0])\\n\",\n        \"axes[0].plot(timescale, waveform.numpy())\\n\",\n        \"axes[0].set_title('Waveform')\\n\",\n        \"axes[0].set_xlim([0, 16000])\\n\",\n        \"plot_spectrogram(spectrogram.numpy(), axes[1])\\n\",\n        \"axes[1].set_title('Spectrogram')\\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def get_spectrogram_and_label_id(audio, label):\\n\",\n        \"  spectrogram = get_spectrogram(audio)\\n\",\n        \"  spectrogram = tf.expand_dims(spectrogram, -1)\\n\",\n        \"  label_id = tf.argmax(label == commands)\\n\",\n        \"  return spectrogram, label_id\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"spectrogram_ds = waveform_ds.map(\\n\",\n        \"    get_spectrogram_and_label_id, num_parallel_calls=AUTOTUNE)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"rows = 3\\n\",\n        \"cols = 3\\n\",\n        \"n = rows*cols\\n\",\n        \"fig, axes = plt.subplots(rows, cols, figsize=(10, 10))\\n\",\n        \"for i, (spectrogram, label_id) in enumerate(spectrogram_ds.take(n)):\\n\",\n        \"  r = i // cols\\n\",\n        \"  c = i % cols\\n\",\n        \"  ax = axes[r][c]\\n\",\n        \"  plot_spectrogram(np.squeeze(spectrogram.numpy()), ax)\\n\",\n        \"  ax.set_title(commands[label_id.numpy()])\\n\",\n        \"  ax.axis('off')\\n\",\n        \"  \\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def preprocess_dataset(files):\\n\",\n        \"  files_ds = tf.data.Dataset.from_tensor_slices(files)\\n\",\n        \"  output_ds = files_ds.map(get_waveform_and_label, num_parallel_calls=AUTOTUNE)\\n\",\n        \"  output_ds = output_ds.map(\\n\",\n        \"      get_spectrogram_and_label_id,  num_parallel_calls=AUTOTUNE)\\n\",\n        \"  return output_ds\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"train_ds = spectrogram_ds\\n\",\n        \"val_ds = preprocess_dataset(val_files)\\n\",\n        \"test_ds = preprocess_dataset(test_files)\\n\",\n        \"print(\\\"test_ds\\\")\\n\",\n        \"print(type(train_ds)) \\n\",\n        \" \\n\",\n        \"batch_size = 64\\n\",\n        \"train_ds = train_ds.batch(batch_size)\\n\",\n        \"val_ds = val_ds.batch(batch_size)\\n\",\n        \"test_ds = test_ds.batch(batch_size) \\n\",\n        \" \\n\",\n        \"train_ds = train_ds.cache().prefetch(AUTOTUNE)\\n\",\n        \"val_ds = val_ds.cache().prefetch(AUTOTUNE)\\n\",\n        \"test_ds = test_ds.cache().prefetch(AUTOTUNE)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"8G-TeIYUJdJv\",\n        \"outputId\": \"dbb879d3-5d38-43bd-92f8-b54c1c6450c4\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"iterator = train_ds.__iter__()\\n\",\n        \"next_element = iterator.get_next()\\n\",\n        \"pt = next_element[0]\\n\",\n        \"en = next_element[1]\\n\",\n        \"print(pt.numpy().shape)\\n\",\n        \"print(en.numpy())\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"1E9Y8ucDJevt\",\n        \"outputId\": \"bc2bca74-a032-44eb-9ccc-c901b650a0b4\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"iterator1 = val_ds.__iter__()\\n\",\n        \"next_element1 = iterator1.get_next()\\n\",\n        \"pt1 = next_element1[0]\\n\",\n        \"en1 = next_element1[1]\\n\",\n        \"print(pt1.numpy().shape)\\n\",\n        \"print(en1.numpy().shape)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"3FseP7xZJgdL\",\n        \"outputId\": \"c3c492c5-433c-4505-9f45-b5fa94689dfd\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"for spectrogram, _ in spectrogram_ds.take(1):\\n\",\n        \"  input_shape = spectrogram.shape\\n\",\n        \"print('Input shape:', input_shape)\\n\",\n        \"num_labels = len(commands)\\n\",\n        \"\\n\",\n        \"norm_layer = preprocessing.Normalization()\\n\",\n        \"norm_layer.adapt(spectrogram_ds.map(lambda x, _: x))\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"u1EViQPkJiCO\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"from keras import layers\\n\",\n        \"from keras import models\\n\",\n        \"from keras.callbacks import EarlyStopping\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"1pxkqTjpJj4T\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def CNN_model(f1, f2, f3, f4, k, a1, a2, d1, d2, op, ep, fitness):\\n\",\n        \"  model = models.Sequential([\\n\",\n        \"    layers.Input(shape=input_shape),\\n\",\n        \"    preprocessing.Resizing(32, 32), \\n\",\n        \"    norm_layer,\\n\",\n        \"  ])\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(input_shape=(32,32, 1),filters=f1,kernel_size=(k,k),padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f1,kernel_size=(k,k),padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d1))\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d2))\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d2))\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d1))\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d1))\\n\",\n        \"\\n\",\n        \"  model.add(Flatten())\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(Dense(units=f4,activation=a1))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(Dense(units=f4,activation=a1))\\n\",\n        \"  model.add(Dense(units=num_labels, activation=\\\"softmax\\\"))\\n\",\n        \"\\n\",\n        \"  model.compile(\\n\",\n        \"    optimizer=op,\\n\",\n        \"    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\\n\",\n        \"    metrics=['accuracy'],\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"  EPOCHS = ep\\n\",\n        \"  \\n\",\n        \"  history = model.fit(\\n\",\n        \"    train_ds, \\n\",\n        \"    validation_data=val_ds,  \\n\",\n        \"    epochs=EPOCHS,\\n\",\n        \"    callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=10),\\n\",\n        \"  )\\n\",\n        \"  fitness.append((history.history[\\\"val_accuracy\\\"][-1], history.history[\\\"accuracy\\\"][-1]))\\n\",\n        \"  return model, history\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"vPtvheG1Jmfz\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# Generating the bounds list for every hyperparameter\\n\",\n        \"bounds = [\\n\",\n        \"    [16, 32, 64],                               # f1\\n\",\n        \"    [32, 64, 128],                              # f2\\n\",\n        \"    [32, 64, 128],                              # f3\\n\",\n        \"    [128, 256, 512],                            # f4\\n\",\n        \"    [3, 5],                                      # k\\n\",\n        \"    [\\\"relu\\\", \\\"selu\\\", \\\"elu\\\"],                    # a1\\n\",\n        \"    [\\\"relu\\\", \\\"selu\\\", \\\"elu\\\"],                    # a2\\n\",\n        \"    (0.1, 0.5),                                 # d1\\n\",\n        \"    (0.1, 0.5),                                 # d2\\n\",\n        \"    [\\\"adamax\\\", \\\"adadelta\\\", \\\"adam\\\", \\\"adagrad\\\"],  # op\\n\",\n        \"    [50, 60, 70, 80, 90, 100]                   # ep\\n\",\n        \"]\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"-xhY8ADOJqKN\",\n        \"outputId\": \"5d1473ff-ae15-45ad-96c5-204be71485b7\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import random\\n\",\n        \"\\n\",\n        \"pop_size = 15\\n\",\n        \"# Initializing a population of size 15\\n\",\n        \"population = [[random.choice(item) if type(item) is list else round(random.uniform(item[0], item[1]), 1) if type(item) is tuple else item for item in bounds] for _ in range(pop_size)]\\n\",\n        \"print(\\\"Population:\\\")\\n\",\n        \"for i, hyperparameters in enumerate(population):\\n\",\n        \"    print(\\\"Hyperparameters set\\\", i+1, \\\":\\\", hyperparameters)\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"Ig3_3HeDWX9G\"\n      },\n      \"source\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"zbdQyQ4HhzDn\",\n        \"outputId\": \"6dcd7c06-d860-4ef1-d5ea-ed919d69dd20\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"population\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"pJM7rSl3J_pc\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def mutation(individual, population, bounds, mutation_factor=0.8):\\n\",\n        \"\\n\",\n        \"    population_copy = population.copy()\\n\",\n        \"    population_copy.remove(individual)\\n\",\n        \"    a, b, c = random.sample(population_copy, 3)\\n\",\n        \"\\n\",\n        \"        \\n\",\n        \"    # Compute the difference between b and c\\n\",\n        \"    diff = [round(b_i - c_i, 1) if isinstance(b_i, (int, float)) else b_i for b_i, c_i in zip(b, c)]\\n\",\n        \"    \\n\",\n        \"    # Mutate the individual x by adding the difference multiplied by the mutation factor\\n\",\n        \"    mut_individual = [int(a_i + mutation_factor * d) if i in [0,1,2,3,4,10] and \\n\",\n        \"                        isinstance(a_i, (int, float)) else random.choice(bounds[i])  \\n\",\n        \"                        if i in [0,1,2,3,4,10] and not isinstance(a_i, (int, float)) else round(a_i + mutation_factor * d, 1)\\n\",\n        \"                        if isinstance(a_i, (int, float)) else random.choice(bounds[i]) for i,(a_i, d) in enumerate(zip(a, diff))]\\n\",\n        \"    \\n\",\n        \"    # make sure that f1, f2, f3, f4 are within (32, 256) bounds\\n\",\n        \"    for j in range(4):\\n\",\n        \"        if mut_individual[j] < 32:\\n\",\n        \"            mut_individual[j] = 32\\n\",\n        \"        elif mut_individual[j] > 256:\\n\",\n        \"            mut_individual[j] = 256\\n\",\n        \"    # Make sure dropout rate stays between (0.1, 0.5)\\n\",\n        \"    for j in [7,8]:\\n\",\n        \"        if mut_individual[j] <= 0:\\n\",\n        \"            mut_individual[j] = 0.1\\n\",\n        \"        elif mut_individual[j] >= 0.5:\\n\",\n        \"            mut_individual[j] = 0.5\\n\",\n        \"            \\n\",\n        \"    if mut_individual[4] < 3:\\n\",\n        \"        mut_individual[4] = 3\\n\",\n        \"            \\n\",\n        \"            \\n\",\n        \"\\n\",\n        \"    # Min 50 epochs\\n\",\n        \"    if mut_individual[10] < 50:\\n\",\n        \"        mut_individual[10] = 50\\n\",\n        \"    return mut_individual\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"OylLdZatJ5Mn\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def recombination(individual, population, bounds, CR=0.9):\\n\",\n        \"    # Mutate the individual first\\n\",\n        \"    new_individual = mutation(individual, population, bounds)\\n\",\n        \"    \\n\",\n        \"    # Pick a random index R in range 1 to n where n is the dimensionality of the problem being optimized.\\n\",\n        \"    R = random.randint(1, len(bounds))\\n\",\n        \"    \\n\",\n        \"    # Compute the agent's potentially new position\\n\",\n        \"    y = []\\n\",\n        \"    for i in range(len(bounds)):\\n\",\n        \"        # Pick a uniformly distributed random number r_i in range(0,1)\\n\",\n        \"        r = random.uniform(0, 1)\\n\",\n        \"        if (r < CR) or (i == R):\\n\",\n        \"            y_i = new_individual[i]\\n\",\n        \"        else:\\n\",\n        \"            y_i = individual[i]\\n\",\n        \"        y.append(y_i)\\n\",\n        \"    \\n\",\n        \"    # If f(y)>=f(x) then replace the agent x in the population with the improved or equal candidate solution y\\n\",\n        \"\\n\",\n        \"    fitness_y = []\\n\",\n        \"    fitness_x = []\\n\",\n        \"    print(y)\\n\",\n        \"    print(individual)\\n\",\n        \"    CNN_model(*y, fitness_y)\\n\",\n        \"    CNN_model(*individual, fitness_x)\\n\",\n        \"\\n\",\n        \"    # Comparing based on validation accuracy\\n\",\n        \"    if fitness_y[0][0] >= fitness_x[0][0]:\\n\",\n        \"        return y\\n\",\n        \"    else:\\n\",\n        \"        return individual\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"s1QMmNFVlUW5\",\n        \"outputId\": \"9bea0bad-3d62-485c-f356-373946af240f\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"from tensorflow.compat.v1 import ConfigProto\\n\",\n        \"from tensorflow.compat.v1 import InteractiveSession\\n\",\n        \"\\n\",\n        \"config = ConfigProto()\\n\",\n        \"config.gpu_options.allow_growth = True\\n\",\n        \"session = InteractiveSession(config=config)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"mJfyGsBuyAng\",\n        \"outputId\": \"7985e388-f60c-418a-ee4b-f9e03fe95347\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"iterations = 10\\n\",\n        \"\\n\",\n        \"with open(\\\"generation_info.txt\\\", \\\"w\\\") as f:\\n\",\n        \"    for iterator in range(iterations):  \\n\",\n        \"        for i in range(len(population)):\\n\",\n        \"            # The below call to recombination also has the mutation call within it so it mutates\\n\",\n        \"            new_individual = recombination(population[i], population, bounds)\\n\",\n        \"            population[i] = new_individual\\n\",\n        \"        print(\\\"Iteration\\\", iterator + 1, \\\"over\\\")\\n\",\n        \"        print(\\\"Current population: \\\", population)\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"        fitness_gen = []\\n\",\n        \"        for item in population: # Do this for the current population of a generation\\n\",\n        \"            CNN_model(*item, fitness_gen)\\n\",\n        \"            max_valaccuracy_index = fitness_gen.index(max(fitness_gen))\\n\",\n        \"        f.write(\\\"Generation: \\\" + str(iterator + 1) + \\\"\\\\n\\\")\\n\",\n        \"        f.write(str(fitness_gen[max_valaccuracy_index]) + \\\"\\\\n\\\")\\n\",\n        \"        f.write(str(population[max_valaccuracy_index]) + \\\"\\\\n\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"vgJF8lwFSVrm\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"best = [36, 183, 256, 56, 6, 'elu', 'relu', 0.1, 0.2, 'adagrad', 114]\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"-RAwAqLCSW6U\",\n        \"outputId\": \"262ccace-3cb4-4c4a-b223-a2be2fb2e001\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"fitnessbest = []\\n\",\n        \"best_model, history = CNN_model(*best, fitnessbest)\\n\",\n        \"best_model.evaluate(test_ds)\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"accelerator\": \"GPU\",\n    \"colab\": {\n      \"machine_shape\": \"hm\",\n      \"provenance\": []\n    },\n    \"gpuClass\": \"premium\",\n    \"kernelspec\": {\n      \"display_name\": \"Python 3\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\"\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        },
        "Speech_Command_Classification_GA.ipynb": {
            "code": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"LwmjLot9BfYU\",\n        \"outputId\": \"0fdc84c1-e5d7-4ad8-bda3-999c1893df70\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"!pip install python_speech_features\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 1000\n        },\n        \"id\": \"PHdAgO5CqSKr\",\n        \"outputId\": \"0b476678-e2ba-48ee-b1ca-6c438cd94199\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import os\\n\",\n        \"import pathlib\\n\",\n        \"from tensorflow.keras.layers.experimental import preprocessing\\n\",\n        \"from tensorflow.keras import layers\\n\",\n        \"from tensorflow.keras import models\\n\",\n        \"from IPython import display\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"import numpy as np\\n\",\n        \"import seaborn as sns\\n\",\n        \"import tensorflow as tf\\n\",\n        \"import os\\n\",\n        \"from scipy.io import wavfile\\n\",\n        \"import pandas as pd\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"import numpy as np\\n\",\n        \"from keras.layers import Conv2D,MaxPooling2D,Flatten,LSTM,BatchNormalization,GlobalAveragePooling2D\\n\",\n        \"from keras.layers import Dropout,Dense,TimeDistributed\\n\",\n        \"from keras.models import Sequential\\n\",\n        \"from keras.applications.resnet import ResNet50\\n\",\n        \"from keras.utils.np_utils import to_categorical\\n\",\n        \"from sklearn.utils.class_weight import compute_class_weight\\n\",\n        \"from tqdm import tqdm\\n\",\n        \"from python_speech_features import mfcc\\n\",\n        \"import pickle\\n\",\n        \"from keras.callbacks import ModelCheckpoint\\n\",\n        \" \\n\",\n        \"import librosa as lr\\n\",\n        \" \\n\",\n        \"data_dir = pathlib.Path('data/mini_speech_commands')\\n\",\n        \"if not data_dir.exists():\\n\",\n        \"  tf.keras.utils.get_file(\\n\",\n        \"      'mini_speech_commands.zip',\\n\",\n        \"      origin=\\\"http://storage.googleapis.com/download.tensorflow.org/data/mini_speech_commands.zip\\\",\\n\",\n        \"      extract=True,\\n\",\n        \"      cache_dir='.', cache_subdir='data')\\n\",\n        \" \\n\",\n        \"commands = np.array(tf.io.gfile.listdir(str(data_dir)))\\n\",\n        \"commands = commands[commands != 'README.md']\\n\",\n        \"print('Commands:', commands)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"filenames = tf.io.gfile.glob(str(data_dir) + '/*/*')\\n\",\n        \"filenames = tf.random.shuffle(filenames)\\n\",\n        \"num_samples = len(filenames)\\n\",\n        \"print('Number of total examples:', num_samples)\\n\",\n        \"print('Number of examples per label:',\\n\",\n        \"      len(tf.io.gfile.listdir(str(data_dir/commands[0]))))\\n\",\n        \"print('Example file tensor:', filenames[0])\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"train_files = filenames[:6400]\\n\",\n        \"val_files = filenames[6400: 6400 + 1000]\\n\",\n        \"test_files = filenames[-600:]\\n\",\n        \" \\n\",\n        \"print('Training set size', len(train_files))\\n\",\n        \"print('Validation set size', len(val_files))\\n\",\n        \"print('Test set size', len(test_files))\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def decode_audio(audio_binary):\\n\",\n        \"  audio, _ = tf.audio.decode_wav(audio_binary)\\n\",\n        \"  return tf.squeeze(audio, axis=-1)\\n\",\n        \" \\n\",\n        \"def get_label(file_path):\\n\",\n        \"  parts = tf.strings.split(file_path, os.path.sep)\\n\",\n        \" \\n\",\n        \"  # Note: You'll use indexing here instead of tuple unpacking to enable this \\n\",\n        \"  # to work in a TensorFlow graph.\\n\",\n        \"  return parts[-2] \\n\",\n        \" \\n\",\n        \"def get_waveform_and_label(file_path):\\n\",\n        \"  label = get_label(file_path)\\n\",\n        \"  print(\\\"label\\\")\\n\",\n        \"  print(label)\\n\",\n        \"  audio_binary = tf.io.read_file(file_path)\\n\",\n        \"  waveform = decode_audio(audio_binary)\\n\",\n        \"  print(\\\"waveform\\\")\\n\",\n        \"  print(waveform)\\n\",\n        \"  return waveform, label\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"AUTOTUNE = tf.data.AUTOTUNE\\n\",\n        \"files_ds = tf.data.Dataset.from_tensor_slices(train_files)\\n\",\n        \"waveform_ds = files_ds.map(get_waveform_and_label, num_parallel_calls=AUTOTUNE)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"rows = 3\\n\",\n        \"cols = 3\\n\",\n        \"n = rows*cols\\n\",\n        \"fig, axes = plt.subplots(rows, cols, figsize=(10, 12))\\n\",\n        \"for i, (audio, label) in enumerate(waveform_ds.take(n)):\\n\",\n        \"  r = i // cols\\n\",\n        \"  c = i % cols\\n\",\n        \"  ax = axes[r][c]\\n\",\n        \"  ax.plot(audio.numpy())\\n\",\n        \"  ax.set_yticks(np.arange(-1.2, 1.2, 0.2))\\n\",\n        \"  label = label.numpy().decode('utf-8')\\n\",\n        \"  ax.set_title(label)\\n\",\n        \" \\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def get_spectrogram(waveform):\\n\",\n        \"  # Padding for files with less than 16000 samples\\n\",\n        \"  zero_padding = tf.zeros([16000] - tf.shape(waveform), dtype=tf.float32)\\n\",\n        \" \\n\",\n        \"  # Concatenate audio with padding so that all audio clips will be of the \\n\",\n        \"  # same length\\n\",\n        \"  waveform = tf.cast(waveform, tf.float32)\\n\",\n        \"  equal_length = tf.concat([waveform, zero_padding], 0)\\n\",\n        \"  spectrogram = tf.signal.stft(\\n\",\n        \"      equal_length, frame_length=255, frame_step=128)\\n\",\n        \"      \\n\",\n        \"  spectrogram = tf.abs(spectrogram)\\n\",\n        \" \\n\",\n        \"  return spectrogram\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"for waveform, label in waveform_ds.take(1):\\n\",\n        \"  label = label.numpy().decode('utf-8')\\n\",\n        \"  spectrogram = get_spectrogram(waveform)\\n\",\n        \" \\n\",\n        \"print('Label:', label)\\n\",\n        \"print('Waveform shape:', waveform.shape)\\n\",\n        \"print('Spectrogram shape:', spectrogram.shape)\\n\",\n        \"print('Audio playback')\\n\",\n        \"display.display(display.Audio(waveform, rate=16000))\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def plot_spectrogram(spectrogram, ax):\\n\",\n        \"  # Convert to frequencies to log scale and transpose so that the time is\\n\",\n        \"  # represented in the x-axis (columns).\\n\",\n        \"  log_spec = np.log(spectrogram.T)\\n\",\n        \"  height = log_spec.shape[0]\\n\",\n        \"  width = log_spec.shape[1]\\n\",\n        \"  X = np.linspace(0, np.size(spectrogram), num=width, dtype=int)\\n\",\n        \"  Y = range(height)\\n\",\n        \"  ax.pcolormesh(X, Y, log_spec)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"fig, axes = plt.subplots(2, figsize=(12, 8))\\n\",\n        \"timescale = np.arange(waveform.shape[0])\\n\",\n        \"axes[0].plot(timescale, waveform.numpy())\\n\",\n        \"axes[0].set_title('Waveform')\\n\",\n        \"axes[0].set_xlim([0, 16000])\\n\",\n        \"plot_spectrogram(spectrogram.numpy(), axes[1])\\n\",\n        \"axes[1].set_title('Spectrogram')\\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def get_spectrogram_and_label_id(audio, label):\\n\",\n        \"  spectrogram = get_spectrogram(audio)\\n\",\n        \"  spectrogram = tf.expand_dims(spectrogram, -1)\\n\",\n        \"  label_id = tf.argmax(label == commands)\\n\",\n        \"  return spectrogram, label_id\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"spectrogram_ds = waveform_ds.map(\\n\",\n        \"    get_spectrogram_and_label_id, num_parallel_calls=AUTOTUNE)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"rows = 3\\n\",\n        \"cols = 3\\n\",\n        \"n = rows*cols\\n\",\n        \"fig, axes = plt.subplots(rows, cols, figsize=(10, 10))\\n\",\n        \"for i, (spectrogram, label_id) in enumerate(spectrogram_ds.take(n)):\\n\",\n        \"  r = i // cols\\n\",\n        \"  c = i % cols\\n\",\n        \"  ax = axes[r][c]\\n\",\n        \"  plot_spectrogram(np.squeeze(spectrogram.numpy()), ax)\\n\",\n        \"  ax.set_title(commands[label_id.numpy()])\\n\",\n        \"  ax.axis('off')\\n\",\n        \"  \\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def preprocess_dataset(files):\\n\",\n        \"  files_ds = tf.data.Dataset.from_tensor_slices(files)\\n\",\n        \"  output_ds = files_ds.map(get_waveform_and_label, num_parallel_calls=AUTOTUNE)\\n\",\n        \"  output_ds = output_ds.map(\\n\",\n        \"      get_spectrogram_and_label_id,  num_parallel_calls=AUTOTUNE)\\n\",\n        \"  return output_ds\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"train_ds = spectrogram_ds\\n\",\n        \"val_ds = preprocess_dataset(val_files)\\n\",\n        \"test_ds = preprocess_dataset(test_files)\\n\",\n        \"print(\\\"test_ds\\\")\\n\",\n        \"print(type(train_ds)) \\n\",\n        \" \\n\",\n        \"batch_size = 64\\n\",\n        \"train_ds = train_ds.batch(batch_size)\\n\",\n        \"val_ds = val_ds.batch(batch_size)\\n\",\n        \"test_ds = test_ds.batch(batch_size) \\n\",\n        \" \\n\",\n        \"train_ds = train_ds.cache().prefetch(AUTOTUNE)\\n\",\n        \"val_ds = val_ds.cache().prefetch(AUTOTUNE)\\n\",\n        \"test_ds = test_ds.cache().prefetch(AUTOTUNE)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"xpX6p3OrpzUx\",\n        \"outputId\": \"71bf1315-5da2-4dd0-aee8-868333351b1b\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"iterator = train_ds.__iter__()\\n\",\n        \"next_element = iterator.get_next()\\n\",\n        \"pt = next_element[0]\\n\",\n        \"en = next_element[1]\\n\",\n        \"print(pt.numpy().shape)\\n\",\n        \"print(en.numpy())\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"7pWELHqysCe_\",\n        \"outputId\": \"889a61b3-a51a-43c4-a024-3662e1c9752b\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"iterator1 = val_ds.__iter__()\\n\",\n        \"next_element1 = iterator1.get_next()\\n\",\n        \"pt1 = next_element1[0]\\n\",\n        \"en1 = next_element1[1]\\n\",\n        \"print(pt1.numpy().shape)\\n\",\n        \"print(en1.numpy().shape)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"2GlOJ7jRrGFw\"\n      },\n      \"outputs\": [],\n      \"source\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"c4mFyDRP5dZL\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import os\\n\",\n        \"from scipy.io import wavfile\\n\",\n        \"import pandas as pd\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"import numpy as np\\n\",\n        \"from keras.layers import Conv2D,MaxPooling2D,Flatten,LSTM,BatchNormalization,GlobalAveragePooling2D\\n\",\n        \"from keras.layers import Dropout,Dense,TimeDistributed\\n\",\n        \"from keras.models import Sequential\\n\",\n        \"from keras.utils.np_utils import to_categorical\\n\",\n        \"from sklearn.utils.class_weight import compute_class_weight\\n\",\n        \"from tqdm import tqdm\\n\",\n        \"from python_speech_features import mfcc\\n\",\n        \"import pickle\\n\",\n        \"from keras.callbacks import ModelCheckpoint\\n\",\n        \"\\n\",\n        \"import librosa as lr\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"GeSanShI671x\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import tensorflow as tf\\n\",\n        \"from tensorflow import keras\\n\",\n        \"import numpy as np\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"AIqV5naeKbql\",\n        \"outputId\": \"3f96ef45-68f7-4c10-cf11-dc8be512b539\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"for spectrogram, _ in spectrogram_ds.take(1):\\n\",\n        \"  input_shape = spectrogram.shape\\n\",\n        \"print('Input shape:', input_shape)\\n\",\n        \"num_labels = len(commands)\\n\",\n        \"\\n\",\n        \"norm_layer = preprocessing.Normalization()\\n\",\n        \"norm_layer.adapt(spectrogram_ds.map(lambda x, _: x))\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"ueKjpXWOjJ5o\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"from keras import layers\\n\",\n        \"from keras import models\\n\",\n        \"from keras.callbacks import EarlyStopping\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"cEk9qXHW4eXx\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def CNN_model( f1, f2, f3, f4, k, a1, a2, d1, d2, op, ep):\\n\",\n        \"  model = models.Sequential([\\n\",\n        \"    layers.Input(shape=input_shape),\\n\",\n        \"    preprocessing.Resizing(32, 32), \\n\",\n        \"    norm_layer,\\n\",\n        \"  ])\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(input_shape=(32,32, 1),filters=f1,kernel_size=(k,k),padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f1,kernel_size=(k,k),padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d1))\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d2))\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a2))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d2))\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f2, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d1))\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(Conv2D(filters=f3, kernel_size=(k,k), padding=\\\"same\\\", activation=a1))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))\\n\",\n        \"  model.add(Dropout(d1))\\n\",\n        \"\\n\",\n        \"  model.add(Flatten())\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(Dense(units=f4,activation=a1))\\n\",\n        \"  model.add(BatchNormalization())\\n\",\n        \"  model.add(Dense(units=f4,activation=a1))\\n\",\n        \"  model.add(Dense(units=num_labels, activation=\\\"softmax\\\"))\\n\",\n        \"\\n\",\n        \"  model.compile(\\n\",\n        \"    optimizer=op,\\n\",\n        \"    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\\n\",\n        \"    metrics=['accuracy'],\\n\",\n        \"  )\\n\",\n        \"  EPOCHS = ep\\n\",\n        \"  history = model.fit(\\n\",\n        \"    train_ds, \\n\",\n        \"    validation_data=val_ds,  \\n\",\n        \"    epochs=EPOCHS,\\n\",\n        \"    callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=6),\\n\",\n        \"  )\\n\",\n        \"  #store history values in global dic.\\n\",\n        \"  return model, history\\n\",\n        \"\\n\",\n        \"\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"TZRN4Zkh1Yu_\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"from random import choice\\n\",\n        \"from random import uniform\\n\",\n        \"from numpy.random import randint\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"i6oy-UhmslXQ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def initialization():  \\n\",\n        \"  parameters = {}\\n\",\n        \"  f1 = choice([16, 32, 64])\\n\",\n        \"  parameters[\\\"f1\\\"] = f1\\n\",\n        \"  f2 = choice([32, 64, 128])\\n\",\n        \"  parameters[\\\"f2\\\"] = f2\\n\",\n        \"  f3 = choice([32, 64, 128])\\n\",\n        \"  parameters[\\\"f3\\\"] = f3\\n\",\n        \"  f4 = choice([128, 256, 512])\\n\",\n        \"  parameters[\\\"f4\\\"] = f4\\n\",\n        \"  k = choice([3,5])\\n\",\n        \"  parameters[\\\"k\\\"] = k\\n\",\n        \"  a1 = choice([\\\"relu\\\", \\\"selu\\\", \\\"elu\\\"])\\n\",\n        \"  parameters[\\\"a1\\\"] = a1\\n\",\n        \"  a2 = choice([\\\"relu\\\", \\\"selu\\\", \\\"elu\\\"])\\n\",\n        \"  parameters[\\\"a2\\\"] = a2\\n\",\n        \"  d1 = round(uniform(0.1, 0.5), 1)\\n\",\n        \"  parameters[\\\"d1\\\"] = d1\\n\",\n        \"  d2 = round(uniform(0.1, 0.5), 1)\\n\",\n        \"  parameters[\\\"d2\\\"] = d2\\n\",\n        \"  op = choice([\\\"adamax\\\", \\\"adadelta\\\", \\\"adam\\\", \\\"adagrad\\\"])\\n\",\n        \"  parameters[\\\"op\\\"] = op\\n\",\n        \"  ep = randint(50,100)\\n\",\n        \"  parameters[\\\"ep\\\"] = ep\\n\",\n        \"  return parameters\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"87ThhBE96zCm\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def generate_population(n):\\n\",\n        \"  population = []\\n\",\n        \"  for i in range(n):\\n\",\n        \"    chromosome = initialization()\\n\",\n        \"    population.append(chromosome)\\n\",\n        \"  return population\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"SomjG3tQ310Z\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# Fitness evaluation metric: Classification Accuracy \\n\",\n        \"def fitness_evaluation(model):\\n\",\n        \"  metrics = model.evaluate(test_ds)\\n\",\n        \"  print(f\\\"metrics:{metrics}\\\")\\n\",\n        \"  return metrics[1]\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"-d8QyqTQ35O1\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# Roulette wheel selection method\\n\",\n        \"def selection(population_fitness):\\n\",\n        \"  total = sum(population_fitness)a\\n\",\n        \"  percentage = [round((x/total) * 100) for x in population_fitness]\\n\",\n        \"  selection_wheel = []\\n\",\n        \"  for pop_index,num in enumerate(percentage):\\n\",\n        \"    selection_wheel.extend([pop_index]*num)\\n\",\n        \"  parent1_ind = choice(selection_wheel)\\n\",\n        \"  parent2_ind = choice(selection_wheel)\\n\",\n        \"  return [parent1_ind, parent2_ind]\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"9tw9NKnz379Q\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def crossover(parent1, parent2):\\n\",\n        \"  child1 = {}\\n\",\n        \"  child2 = {}\\n\",\n        \"\\n\",\n        \"  child1[\\\"f1\\\"] = choice([parent1[\\\"f1\\\"], parent2[\\\"f1\\\"]])\\n\",\n        \"  child1[\\\"f2\\\"] = choice([parent1[\\\"f2\\\"], parent2[\\\"f2\\\"]])\\n\",\n        \"  child1[\\\"f3\\\"] = choice([parent1[\\\"f3\\\"], parent2[\\\"f3\\\"]])\\n\",\n        \"  child1[\\\"f4\\\"] = choice([parent1[\\\"f4\\\"], parent2[\\\"f4\\\"]])\\n\",\n        \"\\n\",\n        \"  child2[\\\"f1\\\"] = choice([parent1[\\\"f1\\\"], parent2[\\\"f1\\\"]])\\n\",\n        \"  child2[\\\"f2\\\"] = choice([parent1[\\\"f2\\\"], parent2[\\\"f2\\\"]])\\n\",\n        \"  child2[\\\"f3\\\"] = choice([parent1[\\\"f3\\\"], parent2[\\\"f3\\\"]])\\n\",\n        \"  child2[\\\"f4\\\"] = choice([parent1[\\\"f4\\\"], parent2[\\\"f4\\\"]])\\n\",\n        \"\\n\",\n        \"  child1[\\\"k\\\"] = choice([parent1[\\\"k\\\"], parent2[\\\"k\\\"]])\\n\",\n        \"  child2[\\\"k\\\"] = choice([parent1[\\\"k\\\"], parent2[\\\"k\\\"]])\\n\",\n        \"\\n\",\n        \"  child1[\\\"a1\\\"] = parent1[\\\"a2\\\"]\\n\",\n        \"  child2[\\\"a1\\\"] = parent2[\\\"a2\\\"]\\n\",\n        \"\\n\",\n        \"  child1[\\\"a2\\\"] = parent2[\\\"a1\\\"]\\n\",\n        \"  child2[\\\"a2\\\"] = parent1[\\\"a1\\\"]\\n\",\n        \"\\n\",\n        \"  child1[\\\"d1\\\"] = parent1[\\\"d1\\\"]\\n\",\n        \"  child2[\\\"d1\\\"] = parent2[\\\"d1\\\"]\\n\",\n        \"\\n\",\n        \"  child1[\\\"d2\\\"] = parent2[\\\"d2\\\"]\\n\",\n        \"  child2[\\\"d2\\\"] = parent1[\\\"d2\\\"]\\n\",\n        \"\\n\",\n        \"  child1[\\\"op\\\"] = parent2[\\\"op\\\"]\\n\",\n        \"  child2[\\\"op\\\"] = parent1[\\\"op\\\"]\\n\",\n        \"\\n\",\n        \"  child1[\\\"ep\\\"] = parent1[\\\"ep\\\"]\\n\",\n        \"  child2[\\\"ep\\\"] = parent2[\\\"ep\\\"]\\n\",\n        \"  return [child1, child2]\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"OvHJT5d23-AN\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def mutation(chromosome):\\n\",\n        \"  flag = randint(0,40)\\n\",\n        \"  if flag <= 20:\\n\",\n        \"    chromosome[\\\"ep\\\"] += randint(0, 10)\\n\",\n        \"  return chromosome\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"background_save\": true,\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"oHz68ueB4Bv6\",\n        \"outputId\": \"b6dfbd9e-081f-4421-c6b1-617411346c41\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"generations = 12\\n\",\n        \"threshold = 90\\n\",\n        \"num_pop = 10\\n\",\n        \"\\n\",\n        \"population = generate_population(num_pop)\\n\",\n        \"acc_best = []\\n\",\n        \"par_total = []\\n\",\n        \"acc_total = []\\n\",\n        \"par_best = []\\n\",\n        \"for generation in range(generations):\\n\",\n        \"\\n\",\n        \"  population_fitness = []\\n\",\n        \"  per1=[]\\n\",\n        \"  for chromosome in population:\\n\",\n        \"    f1 = chromosome[\\\"f1\\\"]\\n\",\n        \"    f2 = chromosome[\\\"f2\\\"]\\n\",\n        \"    f3 = chromosome[\\\"f3\\\"]\\n\",\n        \"    f4 = chromosome[\\\"f4\\\"]\\n\",\n        \"    k = chromosome[\\\"k\\\"]\\n\",\n        \"    a1 = chromosome[\\\"a1\\\"]\\n\",\n        \"    a2 = chromosome[\\\"a2\\\"]\\n\",\n        \"    d1 = chromosome[\\\"d1\\\"]\\n\",\n        \"    d2 = chromosome[\\\"d2\\\"]\\n\",\n        \"    op = chromosome[\\\"op\\\"]\\n\",\n        \"    ep = chromosome[\\\"ep\\\"]\\n\",\n        \"\\n\",\n        \"    try:\\n\",\n        \"      model = CNN_model(f1, f2, f3, f4, k, a1, a2, d1, d2, op, ep)\\n\",\n        \"      acc = fitness_evaluation(model)\\n\",\n        \"      par_total.append(chromosome)\\n\",\n        \"      acc_total.append(acc)\\n\",\n        \"      per1.append(chromosome)\\n\",\n        \"      print(\\\"Parameters: \\\", chromosome)\\n\",\n        \"      print(\\\"Accuracy: \\\", round(acc,3))\\n\",\n        \"    except:\\n\",\n        \"      acc=0\\n\",\n        \"      print(\\\"Parameters: \\\", chromosome)\\n\",\n        \"      print(\\\"Invalid parameters - Build fail\\\")\\n\",\n        \"\\n\",\n        \"    population_fitness.append(acc)\\n\",\n        \"  print(population_fitness)\\n\",\n        \"  parents_ind = selection(population_fitness)\\n\",\n        \"  parent1 = population[parents_ind[0]]\\n\",\n        \"  parent2 = population[parents_ind[1]]\\n\",\n        \"\\n\",\n        \"  children = crossover(parent1, parent2)\\n\",\n        \"  child1 = mutation(children[0])\\n\",\n        \"  child2 = mutation(children[1])\\n\",\n        \"\\n\",\n        \"  population.append(child1)\\n\",\n        \"  population.append(child2)\\n\",\n        \"\\n\",\n        \"  print(\\\"Generation \\\", generation+1,\\\" Outcome: \\\")\\n\",\n        \"  if max(population_fitness) >= threshold:\\n\",\n        \"    print(\\\"Obtained desired accuracy: \\\", max(population_fitness))\\n\",\n        \"    break\\n\",\n        \"  else:\\n\",\n        \"    print(\\\"Maximum accuracy in generation {} : {}\\\".format(generation+1, max(population_fitness)))\\n\",\n        \"    max_pop = max(population_fitness)\\n\",\n        \"    c1=population_fitness.index(max_pop)\\n\",\n        \"    par_best.append(per1[c1])\\n\",\n        \"    acc_best.append(max_pop)\\n\",\n        \"\\n\",\n        \"  first_min = min(population_fitness)\\n\",\n        \"  first_min_ind = population_fitness.index(first_min)\\n\",\n        \"  population.remove(population[first_min_ind])\\n\",\n        \"  second_min = min(population_fitness)\\n\",\n        \"  second_min_ind = population_fitness.index(second_min)\\n\",\n        \"  population.remove(population[second_min_ind])\\n\",\n        \"\\n\",\n        \"print(par_total)\\n\",\n        \"print(acc_total)\\n\",\n        \"print(par_best)\\n\",\n        \"print(acc_best)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"9pACtZPGxVhc\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"var1=len(acc_best)\\n\",\n        \"acc_best.sort()\\n\",\n        \"print(acc_best[var1-1])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"12wploAK1JAa\",\n        \"outputId\": \"1e4f4f4b-b9ac-474d-f204-3dc3cd2291d4\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"best_model, best_history = CNN_model(*[32, 128, 64, 128, 3, 'selu', 'relu', 0.4, 0.2, 'adam', 94])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"riQe2Ou93fCe\",\n        \"outputId\": \"d0adce7b-fb5e-488d-e390-140648ad3391\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"best_model.evaluate(test_ds)\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"accelerator\": \"GPU\",\n    \"colab\": {\n      \"machine_shape\": \"hm\",\n      \"provenance\": []\n    },\n    \"gpuClass\": \"premium\",\n    \"kernelspec\": {\n      \"display_name\": \"ml\",\n      \"language\": \"python\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"codemirror_mode\": {\n        \"name\": \"ipython\",\n        \"version\": 3\n      },\n      \"file_extension\": \".py\",\n      \"mimetype\": \"text/x-python\",\n      \"name\": \"python\",\n      \"nbconvert_exporter\": \"python\",\n      \"pygments_lexer\": \"ipython3\",\n      \"version\": \"3.9.15\"\n    },\n    \"vscode\": {\n      \"interpreter\": {\n        \"hash\": \"0bd6827e5b9b024a8afcecbb4b32b3f39bbe94aa5ba060866c09f0f3ec848126\"\n      }\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        },
        "Speech_Command_Classification_PRETRAINED.ipynb": {
            "code": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"u22n2d1MbjW6\",\n        \"outputId\": \"3e87fb31-c394-4871-f77c-a10ffa99d58f\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"!pip install python_speech_features\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"ZLOltoq7opN3\",\n        \"outputId\": \"5ea550ae-8898-4b05-caed-f990fbc829ce\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"!pip install image-classifiers\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"khcp0u_yJMQL\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import os\\n\",\n        \"import pathlib\\n\",\n        \"from tensorflow.keras.layers.experimental import preprocessing\\n\",\n        \"from IPython import display\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"import numpy as np\\n\",\n        \"import seaborn as sns\\n\",\n        \"import tensorflow as tf\\n\",\n        \"import os\\n\",\n        \"from scipy.io import wavfile\\n\",\n        \"import pandas as pd\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"from keras.layers import Conv2D,MaxPooling2D,Flatten,LSTM,BatchNormalization,GlobalAveragePooling2D\\n\",\n        \"from keras.layers import Dropout,Dense,TimeDistributed\\n\",\n        \"from keras.models import Sequential\\n\",\n        \"from keras.applications.resnet import ResNet50\\n\",\n        \"from keras.utils.np_utils import to_categorical\\n\",\n        \"from sklearn.utils.class_weight import compute_class_weight\\n\",\n        \"from tqdm import tqdm\\n\",\n        \"from python_speech_features import mfcc\\n\",\n        \"import pickle\\n\",\n        \"from keras.callbacks import ModelCheckpoint\\n\",\n        \" \\n\",\n        \"import librosa as lr\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 36\n        },\n        \"id\": \"3wH84isvy6rt\",\n        \"outputId\": \"d68dabb6-7c82-4616-8dfb-11c7dae7d46e\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"tf.__version__\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"RZI50B2Wbi0z\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# Set the random seed for TensorFlow and NumPy\\n\",\n        \"tf.random.set_seed(1)\\n\",\n        \"np.random.seed(1)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"mPKbqPPdJSEW\",\n        \"outputId\": \"2594d7b7-f1b5-49a7-8a96-ded2125dadde\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"data_dir = pathlib.Path('data/mini_speech_commands')\\n\",\n        \"if not data_dir.exists():\\n\",\n        \"  tf.keras.utils.get_file(\\n\",\n        \"      'mini_speech_commands.zip',\\n\",\n        \"      origin=\\\"http://storage.googleapis.com/download.tensorflow.org/data/mini_speech_commands.zip\\\",\\n\",\n        \"      extract=True,\\n\",\n        \"      cache_dir='.', cache_subdir='data')\\n\",\n        \" \\n\",\n        \"commands = np.array(tf.io.gfile.listdir(str(data_dir)))\\n\",\n        \"commands = commands[commands != 'README.md']\\n\",\n        \"print('Commands:', commands)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"filenames = tf.io.gfile.glob(str(data_dir) + '/*/*')\\n\",\n        \"filenames = tf.random.shuffle(filenames)\\n\",\n        \"num_samples = len(filenames)\\n\",\n        \"print('Number of total examples:', num_samples)\\n\",\n        \"print('Number of examples per label:',\\n\",\n        \"      len(tf.io.gfile.listdir(str(data_dir/commands[0]))))\\n\",\n        \"print('Example file tensor:', filenames[0])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"KfIB-0XhJWRn\",\n        \"outputId\": \"9e16e3da-1485-44d7-e64e-73be7dca491f\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"train_files = filenames[:6400]\\n\",\n        \"val_files = filenames[6400: 6400 + 1000]\\n\",\n        \"test_files = filenames[-600:]\\n\",\n        \" \\n\",\n        \"print('Training set size', len(train_files))\\n\",\n        \"print('Validation set size', len(val_files))\\n\",\n        \"print('Test set size', len(test_files))\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def decode_audio(audio_binary):\\n\",\n        \"  audio, _ = tf.audio.decode_wav(audio_binary)\\n\",\n        \"  return tf.squeeze(audio, axis=-1)\\n\",\n        \" \\n\",\n        \"def get_label(file_path):\\n\",\n        \"  parts = tf.strings.split(file_path, os.path.sep)\\n\",\n        \" \\n\",\n        \"  # Note: You'll use indexing here instead of tuple unpacking to enable this \\n\",\n        \"  # to work in a TensorFlow graph.\\n\",\n        \"  return parts[-2] \"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 1000\n        },\n        \"id\": \"Kut1NFEwJZk5\",\n        \"outputId\": \"47377c9a-cae7-4c7b-c3f0-3f3897766610\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def get_waveform_and_label(file_path):\\n\",\n        \"  label = get_label(file_path)\\n\",\n        \"  print(\\\"label\\\")\\n\",\n        \"  print(label)\\n\",\n        \"  audio_binary = tf.io.read_file(file_path)\\n\",\n        \"  waveform = decode_audio(audio_binary)\\n\",\n        \"  print(\\\"waveform\\\")\\n\",\n        \"  print(waveform)\\n\",\n        \"  return waveform, label\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"AUTOTUNE = tf.data.AUTOTUNE\\n\",\n        \"files_ds = tf.data.Dataset.from_tensor_slices(train_files)\\n\",\n        \"waveform_ds = files_ds.map(get_waveform_and_label, num_parallel_calls=AUTOTUNE)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"rows = 3\\n\",\n        \"cols = 3\\n\",\n        \"n = rows*cols\\n\",\n        \"fig, axes = plt.subplots(rows, cols, figsize=(10, 12))\\n\",\n        \"for i, (audio, label) in enumerate(waveform_ds.take(n)):\\n\",\n        \"  r = i // cols\\n\",\n        \"  c = i % cols\\n\",\n        \"  ax = axes[r][c]\\n\",\n        \"  ax.plot(audio.numpy())\\n\",\n        \"  ax.set_yticks(np.arange(-1.2, 1.2, 0.2))\\n\",\n        \"  label = label.numpy().decode('utf-8')\\n\",\n        \"  ax.set_title(label)\\n\",\n        \" \\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def get_spectrogram(waveform):\\n\",\n        \"  # Padding for files with less than 16000 samples\\n\",\n        \"  zero_padding = tf.zeros([16000] - tf.shape(waveform), dtype=tf.float32)\\n\",\n        \" \\n\",\n        \"  # Concatenate audio with padding so that all audio clips will be of the \\n\",\n        \"  # same length\\n\",\n        \"  waveform = tf.cast(waveform, tf.float32)\\n\",\n        \"  equal_length = tf.concat([waveform, zero_padding], 0)\\n\",\n        \"  spectrogram = tf.signal.stft(\\n\",\n        \"      equal_length, frame_length=255, frame_step=128)\\n\",\n        \"      \\n\",\n        \"  spectrogram = tf.abs(spectrogram)\\n\",\n        \" \\n\",\n        \"  return spectrogram\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"for waveform, label in waveform_ds.take(1):\\n\",\n        \"  label = label.numpy().decode('utf-8')\\n\",\n        \"  spectrogram = get_spectrogram(waveform)\\n\",\n        \" \\n\",\n        \"print('Label:', label)\\n\",\n        \"print('Waveform shape:', waveform.shape)\\n\",\n        \"print('Spectrogram shape:', spectrogram.shape)\\n\",\n        \"print('Audio playback')\\n\",\n        \"display.display(display.Audio(waveform, rate=16000))\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def plot_spectrogram(spectrogram, ax):\\n\",\n        \"  # Convert to frequencies to log scale and transpose so that the time is\\n\",\n        \"  # represented in the x-axis (columns).\\n\",\n        \"  log_spec = np.log(spectrogram.T)\\n\",\n        \"  height = log_spec.shape[0]\\n\",\n        \"  width = log_spec.shape[1]\\n\",\n        \"  X = np.linspace(0, np.size(spectrogram), num=width, dtype=int)\\n\",\n        \"  Y = range(height)\\n\",\n        \"  ax.pcolormesh(X, Y, log_spec)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"fig, axes = plt.subplots(2, figsize=(12, 8))\\n\",\n        \"timescale = np.arange(waveform.shape[0])\\n\",\n        \"axes[0].plot(timescale, waveform.numpy())\\n\",\n        \"axes[0].set_title('Waveform')\\n\",\n        \"axes[0].set_xlim([0, 16000])\\n\",\n        \"plot_spectrogram(spectrogram.numpy(), axes[1])\\n\",\n        \"axes[1].set_title('Spectrogram')\\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def get_spectrogram_and_label_id(audio, label):\\n\",\n        \"  spectrogram = get_spectrogram(audio)\\n\",\n        \"  spectrogram = tf.expand_dims(spectrogram, -1)\\n\",\n        \"  label_id = tf.argmax(label == commands)\\n\",\n        \"  return spectrogram, label_id\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"spectrogram_ds = waveform_ds.map(\\n\",\n        \"    get_spectrogram_and_label_id, num_parallel_calls=AUTOTUNE)\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"rows = 3\\n\",\n        \"cols = 3\\n\",\n        \"n = rows*cols\\n\",\n        \"fig, axes = plt.subplots(rows, cols, figsize=(10, 10))\\n\",\n        \"for i, (spectrogram, label_id) in enumerate(spectrogram_ds.take(n)):\\n\",\n        \"  r = i // cols\\n\",\n        \"  c = i % cols\\n\",\n        \"  ax = axes[r][c]\\n\",\n        \"  plot_spectrogram(np.squeeze(spectrogram.numpy()), ax)\\n\",\n        \"  ax.set_title(commands[label_id.numpy()])\\n\",\n        \"  ax.axis('off')\\n\",\n        \"  \\n\",\n        \"plt.show()\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"def preprocess_dataset(files):\\n\",\n        \"  files_ds = tf.data.Dataset.from_tensor_slices(files)\\n\",\n        \"  output_ds = files_ds.map(get_waveform_and_label, num_parallel_calls=AUTOTUNE)\\n\",\n        \"  output_ds = output_ds.map(\\n\",\n        \"      get_spectrogram_and_label_id,  num_parallel_calls=AUTOTUNE)\\n\",\n        \"  return output_ds\\n\",\n        \" \\n\",\n        \" \\n\",\n        \"train_ds = spectrogram_ds\\n\",\n        \"val_ds = preprocess_dataset(val_files)\\n\",\n        \"test_ds = preprocess_dataset(test_files)\\n\",\n        \"print(\\\"test_ds\\\")\\n\",\n        \"print(type(train_ds)) \\n\",\n        \" \\n\",\n        \"batch_size = 64\\n\",\n        \"train_ds = train_ds.batch(batch_size)\\n\",\n        \"val_ds = val_ds.batch(batch_size)\\n\",\n        \"test_ds = test_ds.batch(batch_size) \\n\",\n        \" \\n\",\n        \"train_ds = train_ds.cache().prefetch(AUTOTUNE)\\n\",\n        \"val_ds = val_ds.cache().prefetch(AUTOTUNE)\\n\",\n        \"test_ds = test_ds.cache().prefetch(AUTOTUNE)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"8G-TeIYUJdJv\",\n        \"outputId\": \"afe782ae-9dde-4760-8352-b761b603d1dd\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"iterator = train_ds.__iter__()\\n\",\n        \"next_element = iterator.get_next()\\n\",\n        \"pt = next_element[0]\\n\",\n        \"en = next_element[1]\\n\",\n        \"print(pt.numpy().shape)\\n\",\n        \"print(en.numpy())\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"1E9Y8ucDJevt\",\n        \"outputId\": \"0588aa48-dac6-4379-f9fa-6a73ec5f7ca3\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"iterator1 = val_ds.__iter__()\\n\",\n        \"next_element1 = iterator1.get_next()\\n\",\n        \"pt1 = next_element1[0]\\n\",\n        \"en1 = next_element1[1]\\n\",\n        \"print(pt1.numpy().shape)\\n\",\n        \"print(en1.numpy().shape)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"3FseP7xZJgdL\",\n        \"outputId\": \"1d2d43a5-8e5c-467b-d147-071eb9fcbe8d\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"for spectrogram, _ in spectrogram_ds.take(1):\\n\",\n        \"  input_shape = spectrogram.shape\\n\",\n        \"print('Input shape:', input_shape)\\n\",\n        \"num_labels = len(commands)\\n\",\n        \"\\n\",\n        \"norm_layer = preprocessing.Normalization()\\n\",\n        \"norm_layer.adapt(spectrogram_ds.map(lambda x, _: x))\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"u1EViQPkJiCO\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"from keras import layers\\n\",\n        \"from keras import models\\n\",\n        \"from keras.callbacks import EarlyStopping\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"EQg-8Udtvjxg\",\n        \"outputId\": \"ee4cc1df-0cf7-4414-ff4a-a8d6d204039e\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"input_shape\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"0Y6U03BWbsCk\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"def preprocess(spectrogram, label):\\n\",\n        \"    spectrogram = tf.repeat(spectrogram, repeats=3, axis=-1)\\n\",\n        \"    return spectrogram, label\\n\",\n        \"\\n\",\n        \"spectrogram_ds = spectrogram_ds.map(preprocess)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"Mh5GPwy-fZpD\",\n        \"outputId\": \"f36d9f85-507f-4620-8bca-3db044e14f22\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"spectrogram_ds\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"91l_5g-ElQ78\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"num_val_samples = 1000\\n\",\n        \"# Split spectrogram_ds into train_ds and val_ds\\n\",\n        \"train_ds = spectrogram_ds.skip(num_val_samples)\\n\",\n        \"val_ds = spectrogram_ds.take(num_val_samples)\\n\",\n        \"test_split = 0.6\\n\",\n        \"# Further split val_ds into val_ds and test_ds\\n\",\n        \"num_test_samples = int(num_val_samples * test_split)\\n\",\n        \"test_ds = val_ds.take(num_test_samples)\\n\",\n        \"val_ds = val_ds.skip(num_test_samples)\\n\",\n        \"\\n\",\n        \"# Set batch size and shuffle the train_ds\\n\",\n        \"batch_size = 64\\n\",\n        \"train_ds = train_ds.shuffle(buffer_size=1000).batch(batch_size)\\n\",\n        \"test_ds = test_ds.batch(batch_size)\\n\",\n        \"val_ds = val_ds.batch(batch_size)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"O7A8qp9cbi04\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# Define a function to extract the labels from the dataset\\n\",\n        \"def get_label(spectrogram, label):\\n\",\n        \"    return label\\n\",\n        \"\\n\",\n        \"# Map the get_label function to the train_ds to extract the labels\\n\",\n        \"train_labels_ds = train_ds.map(get_label)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"BRBo3IUYbi04\",\n        \"outputId\": \"44c903bd-fe4b-4604-fc3a-23f4789cbd45\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"test_labels_ds = test_ds.map(get_label)\\n\",\n        \"test_labels_ds\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"tq6wXBGa0qbR\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"from tensorflow.keras import layers\\n\",\n        \"from tensorflow.keras import models\\n\",\n        \"from tensorflow.keras import optimizers\\n\",\n        \"from tensorflow.keras.applications import VGG19\\n\",\n        \"from tensorflow.keras.applications import VGG16\\n\",\n        \"from tensorflow.keras.applications import ResNet50\\n\",\n        \"from tensorflow.keras.applications import InceptionV3\\n\",\n        \"from tensorflow.keras.applications import Xception\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"Fjc7Chru6dNL\",\n        \"outputId\": \"07b97980-b2fd-4880-bb73-faf747a5de71\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# VGG19\\n\",\n        \"# Define the input shape\\n\",\n        \"input_shape = (124, 129, 3)\\n\",\n        \"\\n\",\n        \"# Define the VGG19 model with pre-trained weights\\n\",\n        \"base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\\n\",\n        \"\\n\",\n        \"# Freeze all layers in the base model\\n\",\n        \"for layer in base_model.layers:\\n\",\n        \"    layer.trainable = False\\n\",\n        \"\\n\",\n        \"# Add a custom head to the model\\n\",\n        \"x = layers.Flatten()(base_model.output)\\n\",\n        \"x = layers.Dense(256, activation='relu')(x)\\n\",\n        \"x = layers.Dropout(0.5)(x)\\n\",\n        \"output = layers.Dense(num_labels, activation='softmax')(x)\\n\",\n        \"\\n\",\n        \"# Compile the model\\n\",\n        \"vgg19_model = models.Model(inputs=base_model.input, outputs=output)\\n\",\n        \"vgg19_model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizers.Adam(learning_rate=0.001), metrics=['accuracy'])\\n\",\n        \"\\n\",\n        \"print(\\\"VGG19\\\")\\n\",\n        \"# Train the model on the train dataset\\n\",\n        \"vgg19_model.fit(train_ds, epochs=50, validation_data=val_ds, callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=5))\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"J8djwcRv6dV2\",\n        \"outputId\": \"c55fe70b-9adc-477a-c607-4934c7bd17fe\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# VGG16\\n\",\n        \"# Define the input shape\\n\",\n        \"input_shape = (124, 129, 3)\\n\",\n        \"\\n\",\n        \"# Define the VGG16 model with pre-trained weights\\n\",\n        \"base_model = VGG16(weights='imagenet', include_top=False, input_shape=input_shape)\\n\",\n        \"\\n\",\n        \"# Freeze all layers in the base model\\n\",\n        \"for layer in base_model.layers:\\n\",\n        \"    layer.trainable = False\\n\",\n        \"\\n\",\n        \"# Add a custom head to the model\\n\",\n        \"x = layers.Flatten()(base_model.output)\\n\",\n        \"x = layers.Dense(256, activation='relu')(x)\\n\",\n        \"x = layers.Dropout(0.5)(x)\\n\",\n        \"output = layers.Dense(num_labels, activation='softmax')(x)\\n\",\n        \"\\n\",\n        \"# Compile the model\\n\",\n        \"vgg16_model = models.Model(inputs=base_model.input, outputs=output)\\n\",\n        \"vgg16_model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizers.Adam(learning_rate=0.001), metrics=['accuracy'])\\n\",\n        \"\\n\",\n        \"print(\\\"VGG16\\\")\\n\",\n        \"# Train the model on the train dataset\\n\",\n        \"vgg16_model.fit(train_ds, epochs=50, validation_data=val_ds, callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=5))\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"5PfH58epgcYb\",\n        \"outputId\": \"441353e8-4997-4382-8d4a-ab4cd985f57b\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# RESNET50\\n\",\n        \"# Define the input shape\\n\",\n        \"input_shape = (124, 129, 3)\\n\",\n        \"\\n\",\n        \"# Define the ResNet50 model with pre-trained weights\\n\",\n        \"base_model = ResNet50(weights='imagenet', include_top=False, input_shape=input_shape)\\n\",\n        \"\\n\",\n        \"# Freeze all layers in the base model\\n\",\n        \"for layer in base_model.layers:\\n\",\n        \"    layer.trainable = True\\n\",\n        \"\\n\",\n        \"# Add a custom head to the model\\n\",\n        \"x = layers.GlobalAveragePooling2D()(base_model.output)\\n\",\n        \"x = layers.Dense(256, activation='relu')(x)\\n\",\n        \"x = layers.Dropout(0.5)(x)\\n\",\n        \"output = layers.Dense(num_labels, activation='softmax')(x)\\n\",\n        \"\\n\",\n        \"# Compile the model\\n\",\n        \"resnet_model = models.Model(inputs=base_model.input, outputs=output)\\n\",\n        \"resnet_model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizers.Adam(learning_rate=0.00015), metrics=['accuracy'])\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"print(\\\"ResNet50\\\")\\n\",\n        \"# Train the model on the train dataset\\n\",\n        \"resnet_model.fit(train_ds, epochs=100, validation_data=val_ds, callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=1))\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"ViDfepakgdiD\",\n        \"outputId\": \"891349c0-8c52-4997-dc6e-9243b29d0d6c\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# INCEPTIONV3\\n\",\n        \"\\n\",\n        \"# Define the input shape\\n\",\n        \"input_shape = (124, 129, 3)\\n\",\n        \"\\n\",\n        \"# Define the InceptionV3 model with pre-trained weights\\n\",\n        \"base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=input_shape)\\n\",\n        \"\\n\",\n        \"# Freeze all layers in the base model\\n\",\n        \"for layer in base_model.layers:\\n\",\n        \"    layer.trainable = True\\n\",\n        \"\\n\",\n        \"# Add a custom head to the model\\n\",\n        \"x = layers.GlobalAveragePooling2D()(base_model.output)\\n\",\n        \"x = layers.Dense(256, activation='relu')(x)\\n\",\n        \"x = layers.Dropout(0.5)(x)\\n\",\n        \"output = layers.Dense(num_labels, activation='softmax')(x)\\n\",\n        \"\\n\",\n        \"# Compile the model\\n\",\n        \"inception_model = models.Model(inputs=base_model.input, outputs=output)\\n\",\n        \"inception_model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizers.Adam(learning_rate=0.00017), metrics=['accuracy'])\\n\",\n        \"\\n\",\n        \"print(\\\"InceptionV3\\\")\\n\",\n        \"# Train the model on the train dataset\\n\",\n        \"inception_model.fit(train_ds, epochs=100, validation_data=val_ds, callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=1))\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"zaMxormdgs4J\",\n        \"outputId\": \"b6a5adb9-0e17-46bd-9a4e-bfc69cabfa89\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# XCEPTION\\n\",\n        \"\\n\",\n        \"# Define the input shape\\n\",\n        \"input_shape = (124, 129, 3)\\n\",\n        \"\\n\",\n        \"# Define the Xception model with pre-trained weights\\n\",\n        \"base_model = Xception(weights='imagenet', include_top=False, input_shape=input_shape)\\n\",\n        \"\\n\",\n        \"# Freeze all layers in the base model\\n\",\n        \"for layer in base_model.layers:\\n\",\n        \"    layer.trainable = True\\n\",\n        \"\\n\",\n        \"# Add a custom head to the model\\n\",\n        \"x = layers.Flatten()(base_model.output)\\n\",\n        \"x = layers.Dense(256, activation='relu')(x)\\n\",\n        \"x = layers.Dropout(0.5)(x)\\n\",\n        \"output = layers.Dense(num_labels, activation='softmax')(x)\\n\",\n        \"\\n\",\n        \"# Compile the model\\n\",\n        \"xception_model = models.Model(inputs=base_model.input, outputs=output)\\n\",\n        \"xception_model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizers.Adam(learning_rate=0.00001), metrics=['accuracy'])\\n\",\n        \"\\n\",\n        \"print(\\\"Xception\\\")\\n\",\n        \"# Train the model on the train dataset\\n\",\n        \"xception_model.fit(train_ds, epochs=80, validation_data=val_ds, callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=1))\\n\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"accelerator\": \"GPU\",\n    \"colab\": {\n      \"machine_shape\": \"hm\",\n      \"provenance\": []\n    },\n    \"gpuClass\": \"premium\",\n    \"kernelspec\": {\n      \"display_name\": \"ml\",\n      \"language\": \"python\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"codemirror_mode\": {\n        \"name\": \"ipython\",\n        \"version\": 3\n      },\n      \"file_extension\": \".py\",\n      \"mimetype\": \"text/x-python\",\n      \"name\": \"python\",\n      \"nbconvert_exporter\": \"python\",\n      \"pygments_lexer\": \"ipython3\",\n      \"version\": \"3.9.15\"\n    },\n    \"vscode\": {\n      \"interpreter\": {\n        \"hash\": \"0bd6827e5b9b024a8afcecbb4b32b3f39bbe94aa5ba060866c09f0f3ec848126\"\n      }\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        }
    },
    "moviepp": {
        "README.md": {
            "code": "MOVIE++ \n===\n\nGetting recommendations for movies is hard. There's just so much to choose from once you open up IMDb!\n\nSo I present my (first!) project, MOVIE++, a movie recommender system using Singular Value Decomposition Matrix Factorization Algorithms and item-based Collaborative Filtering.  \nIt takes a movie name as user input through the form, and spits out 15 recommended movies based on my Machine Learning model.\n\n## Live Demo:\nDeployed at: [MOVIE++](https://techie5879.github.io/moviepp/) (Using Github Pages)  \nThe deployed verion uses an SVD model item-based CF recommender system (same as the one detailed in the main code), but it has been trained on a smaller dataset to reduce model file size for deployment. It has been trained using the smaller 100K MovieLens small-latest dataset [MovieLens Small-Latest Permalink](https://grouplens.org/datasets/movielens/latest/). It won't provide the same recommendations as the model trained using the 25M Dataset does, but I've tuned the hyperparameters to give recommendations that seem good enough.\n\n## Technologies Used:\n\n### Frontend:\n- ReactJS\n- CSS\n\n### Backend:\n- Flask API\n\n### Model Training:\n- Surprise (Python Library)\n- Scikit-learn (Python Library)\n\n## Screenshots:\n### Home page:\n![Home page](/images/home.png?raw=true \"Home Page\")\n### Autocomplete suggestions for movies:\n\n![suggestions](/images/suggestions.png?raw=true \"Home Page_Suggestions\")\n\n### Predictions page for The Dark Knight (2008):\n---\n![predictions for The Dark Knight (2008)](/images/pred_TDK.png?raw=true \"TDK\")\n\n\n### Predictions page for Good Will Hunting (1997):\n---\n![predictions for Good Will Hunting (1997)](/images/pred_GWH.png?raw=true \"GWH\")\n\n### How It Works Page:\n---\n![how it works page](/images/how.png?raw=true \"How It Works\")\n\n### About Page:\n---\n![about page](/images/about.png?raw=true \"about\")\n\n### Error Page (for movie not found):\n---\n![error page](/images/apology.png?raw=true \"apology\")\n\n\n\n## Usage:\n\n1. User types name of movie, selects a movie from the suggestions list, and clicks the Recommend! button\n2. A page with the details of the chosen movie and list of predicted movies with links to their IMDb Pages is displayed. \n3. A user can click on the Poster of any movie to be taken to it's respective IMDb Page\n\n## How It Works: \n\nThe SVD model was first trained using the Surprise Library in Python. The training was done using the MovieLens 25M dataset provided by GroupLens (permalink: [MovieLens 25M dataset](https://grouplens.org/datasets/movielens/25m/))\nIt contains approximately 25M ratings across 62423 movies.\n\nThe Matrix Factorization method of Singular Value Decomposition is a Dimensionality Reduction method which breaks down the user-product preference matrix into a user-feature and item-feature matrix. This reduces the dimension of the user-product preference space.\n\nThen, SciPy vector cosine distance was used to compute similarity of items (movies) by taking the dot product of the latent feature vectors corresponding to each movie. \n\nThe similarity is calculated over all the movies available in the database, and the 15 most similar movies are returned by the Flask API, along with information from the TMDB (The Movie Database) API which has been used to get the poster paths and IMDb IDs of the movies. These are received by the React Frontend and then rendered in the web browser.\n\n### Here's a diagram describing the Data Flow:\n![Data flow](/images/flow_data.png?raw=true \"Flow of Data\")\n\n## For running on localhost:\n- To get this project up and running on your localhost, you need to have NodeJS installed. Also the requirements from `requirements.txt` must be installed in the environment you're working on. The movielens dataset must be downloaded too and movies.csv, links.csv and ratings.csv are to be placed in the project directory.  \n- Then `cd` into the repo directory, and use the `svd_train.ipynb` to generate the model.  \n- Then use `npm start` to start the frontend, and `flask run` to get the backend running\n\n## Challenges Faced and Things Learned: \nSince this was my first ML project (and first project in general), getting to this point was quite a challenge. First, I had to learn about how recommender systems worked, types of recommender systems (like Content-based, Collaborative Filtering). It was a continuous process of googling, finding something new, and trying to learn how to implement that! Then I came across the Netflix Prize ([More about Netflix Challenge here](https://en.wikipedia.org/wiki/Netflix_Prize) and [here](https://datajobs.com/data-science-repo/Recommender-Systems-[Netflix].pdf)), where a modification of a certain technique called SVD which was quite a bit more efficient than other models grabbed the prize. So naturally I was drawn to learn what it is, and how to implement it. I finally settled on a SVD and item-based Collaborative Filtering model to recommend movies.\n\nThen, the next step was training the model, and there was trouble here too. Although the RMSE error was very respectable, the recommendations didnt look that relevant - there was obscure noise in the data. I used a very primitive method and removed some of the noise by leaving out some obscure movies and their ratings while training. This can probably be improved further to reduce the noise more efficiently. This resulted in very relevant recommendations, so I was satisfied.\n\nNext was the frontend. Even though I had some basic HTML, CSS, Javascript knowledge, I didn't really have any experience. So I decided to learn ReactJS instead of just using HTML Templates with Jinja syntax. I learned how to create multi-page React Websites, conditional routing, use of hooks, states, and requesting and handling data. I also implemented an autocomplete feature in the form.\n\nDeployment of this app to a hosting service is a bit of a difficulty as of now, as the model file generated was of 300+ MB. Hosting such a large model online to get predictions along with a Flask server is quite a problem.  \nThe project has been deployed by making the model smaller by training it on the movielens-small-latest dataset. \n"
        },
        "app.py": {
            "code": "import os\r\nfrom dotenv import load_dotenv\r\nfrom flask import Flask, request\r\nfrom predict import get_recs\r\nimport urllib.request\r\n\r\nimport json\r\nload_dotenv()\r\n\r\nAPI_KEY = os.getenv(\"API_KEY\")\r\n\r\napp = Flask(__name__)\r\n\r\nobj = {}\r\n\r\nimdb_result = {}\r\n\r\n\r\n@app.route('/movies')\r\ndef movies():\r\n    with open(\"movies_obj.json\") as file:\r\n        movies_obj = json.load(file)\r\n    \r\n    movies = movies_obj[\"title\"]\r\n    return movies\r\n\r\n\r\n\r\n@app.route('/predictor', methods=[\"POST\"])\r\ndef predict():\r\n\r\n    if request.method == \"POST\":\r\n        \r\n        movie = request.get_json()\r\n        movie_title = movie[\"title\"]\r\n        # If movie title isnt empty\r\n        if movie_title:\r\n            predictions = get_recs(movie_title)\r\n            # If movie title in csv list\r\n            if predictions:\r\n                \r\n                final = json.loads(predictions)\r\n                rec_titles = final[\"imdbId\"]\r\n                obj.update(rec_titles)\r\n\r\n                # If movie title isnt in csv list\r\n                for i in range(16):\r\n                    imdbId = (list(obj.values()))[i]\r\n                    url = \"https://api.themoviedb.org/3/find/tt{}?api_key={}&language=en-US&external_source=imdb_id\".format(imdbId, API_KEY)\r\n                    response = urllib.request.urlopen(url)\r\n                    data = response.read()\r\n                    intermediate = json.loads(data)\r\n                    intermediate[\"imdbId\"] = imdbId\r\n                    final = json.dumps(intermediate)\r\n                    imdb_result[i] = json.loads(final)\r\n                \r\n                return imdb_result\r\n            else: \r\n                \r\n                return None\r\n\r\n"
        },
        "csvtojson.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import pandas as pd\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>title</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Toy Story (1995)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>Jumanji (1995)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>Grumpier Old Men (1995)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>Waiting to Exhale (1995)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>Father of the Bride Part II (1995)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>62418</th>\\n\",\n       \"      <td>We (2018)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>62419</th>\\n\",\n       \"      <td>Window of the Soul (2001)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>62420</th>\\n\",\n       \"      <td>Bad Poems (2018)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>62421</th>\\n\",\n       \"      <td>A Girl Thing (2001)</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>62422</th>\\n\",\n       \"      <td>Women of Devil's Island (1962)</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>62423 rows \u00d7 1 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                                    title\\n\",\n       \"0                        Toy Story (1995)\\n\",\n       \"1                          Jumanji (1995)\\n\",\n       \"2                 Grumpier Old Men (1995)\\n\",\n       \"3                Waiting to Exhale (1995)\\n\",\n       \"4      Father of the Bride Part II (1995)\\n\",\n       \"...                                   ...\\n\",\n       \"62418                           We (2018)\\n\",\n       \"62419           Window of the Soul (2001)\\n\",\n       \"62420                    Bad Poems (2018)\\n\",\n       \"62421                 A Girl Thing (2001)\\n\",\n       \"62422      Women of Devil's Island (1962)\\n\",\n       \"\\n\",\n       \"[62423 rows x 1 columns]\"\n      ]\n     },\n     \"execution_count\": 11,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df = pd.read_csv(\\\"movies.csv\\\").drop(\\\"movieId\\\", axis=1)\\n\",\n    \"df\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df.to_json(r\\\"D:\\\\flask_react\\\\movies_obj.json\\\")\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3.9.13 ('tf_gpu')\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.13\"\n  },\n  \"orig_nbformat\": 4,\n  \"vscode\": {\n   \"interpreter\": {\n    \"hash\": \"6727180ec7706371f309a591245f258a273227390eee838732d970e81ce0dc77\"\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        }
    },
    "qiskit-practice": {
        "1_Single Qubits.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from dotenv import load_dotenv\\n\",\n    \"import os\\n\",\n    \"from qiskit import *\\n\",\n    \"from qiskit_ibm_provider import IBMProvider\\n\",\n    \"from math import *\\n\",\n    \"import qiskit\\n\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Initial Setup for Qiskit, loading accounts and Providers\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'qiskit-terra': '0.24.0', 'qiskit-aer': '0.12.0', 'qiskit-ignis': None, 'qiskit-ibmq-provider': '0.20.2', 'qiskit': '0.43.0', 'qiskit-nature': None, 'qiskit-finance': None, 'qiskit-optimization': None, 'qiskit-machine-learning': None}\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"qiskit.__qiskit_version__\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"load_dotenv()\\n\",\n    \"IBM_KEY = os.getenv(\\\"API_KEY\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"provider = IBMProvider()\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Code for initializing a qubit\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"QuantumRegister(1, 'q')\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Initializing a single qubit to |0> and naming the qubit as 'q'\\n\",\n    \"qr = QuantumRegister(1, \\\"q\\\")\\n\",\n    \"qr\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"Qubit(QuantumRegister(1, 'q'), 0)\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"qr[0]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<pre style=\\\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\\\">   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\",\n       \"q: \u2524 Initialize(0.70711,0.70711) \u251c\\n\",\n       \"   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre>\"\n      ],\n      \"text/plain\": [\n       \"   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\",\n       \"q: \u2524 Initialize(0.70711,0.70711) \u251c\\n\",\n       \"   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Initializing a qubit to a desired state\\n\",\n    \"desired_state = [1/sqrt(2), 1/sqrt(2)]\\n\",\n    \"qr = QuantumRegister(1, \\\"q\\\")\\n\",\n    \"qc = QuantumCircuit(qr)\\n\",\n    \"qc.initialize(desired_state, qr[0])\\n\",\n    \"qc.draw()\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Some basic gates are as follows\\n\",\n    \"\\n\",\n    \"$$X = \\\\begin{bmatrix} 0 & 1 \\\\\\\\ 1 & 0 \\\\end{bmatrix}$$\\n\",\n    \"$$Y = \\\\begin{bmatrix} 0 & -i \\\\\\\\ i & 0 \\\\end{bmatrix}$$\\n\",\n    \"$$Z = \\\\begin{bmatrix} 1 & 0 \\\\\\\\ 0 & -1 \\\\end{bmatrix}$$\\n\",\n    \"$$H = \\\\frac{1}{\\\\sqrt2}\\\\begin{bmatrix} 1 & 1 \\\\\\\\ 1 & -1 \\\\end{bmatrix}$$\\n\",\n    \"$$S = \\\\begin{bmatrix} 1 & 0 \\\\\\\\ 0 & i \\\\end{bmatrix}$$\\n\",\n    \"$$T = \\\\begin{bmatrix} 1 & 0 \\\\\\\\ 0 & e^{i\\\\pi /4} \\\\end{bmatrix}$$\\n\",\n    \"\\n\",\n    \"##### Some useful states that can also be used as basis since they are orthogonal are:\\n\",\n    \"\\n\",\n    \"$$| + \\\\rangle = \\\\frac{1}{\\\\sqrt2}(|0\\\\rangle + |1\\\\rangle)$$\\n\",\n    \"$$| - \\\\rangle = \\\\frac{1}{\\\\sqrt2}(|0\\\\rangle - |1\\\\rangle)$$\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### A quantum circuit implementing gates H, Z, X\\n\",\n    \"\\n\",\n    \"This circuit uses H, Z, and X gates in that order to obtain the state $\\\\frac{1}{\\\\sqrt2}(|1\\\\rangle - |0\\\\rangle)$ from $|0\\\\rangle$\\n\",\n    \"\\n\",\n    \"First, by default, qr is initialized to $|0\\\\rangle$, and on application of H, we obtained $\\\\frac{1}{\\\\sqrt2}(|0\\\\rangle + |1\\\\rangle)$  \\n\",\n    \"Then application of Z gate makes qr evolve to $\\\\frac{1}{\\\\sqrt2}(|0\\\\rangle - |1\\\\rangle)$  \\n\",\n    \"Finally, X acts similar to the classical NOT gate and qr finally evolves to $\\\\frac{1}{\\\\sqrt2}(|1\\\\rangle - |0\\\\rangle)$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<pre style=\\\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\\\">    \u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\\n\",\n       \"q0: \u2524 H \u251c\u2524 Z \u251c\u2524 X \u251c\\n\",\n       \"    \u2514\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518</pre>\"\n      ],\n      \"text/plain\": [\n       \"    \u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\\n\",\n       \"q0: \u2524 H \u251c\u2524 Z \u251c\u2524 X \u251c\\n\",\n       \"    \u2514\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"qr = QuantumRegister(1)\\n\",\n    \"qc = QuantumCircuit(qr)\\n\",\n    \"qc.h(qr)\\n\",\n    \"qc.z(qr)\\n\",\n    \"qc.x(qr)\\n\",\n    \"qc.draw()\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Generalization of single qubit gates\\n\",\n    \"\\n\",\n    \"$$U_3(\\\\theta, \\\\phi, \\\\lambda) = \\\\begin{bmatrix} \\\\cos \\\\frac{\\\\theta}{2} & -e^{i\\\\lambda}\\\\sin \\\\frac{\\\\theta}{2} \\\\\\\\[6pt] e^{i\\\\phi}\\\\sin \\\\frac{\\\\theta}{2} & e^{i(\\\\phi + \\\\lambda)\\\\cos \\\\frac{\\\\theta}{2}} \\\\end{bmatrix}$$  \\n\",\n    \"We can express X gate as $U_3(\\\\pi, 0, \\\\pi)$, H gate as $U_3(\\\\frac{\\\\pi}{2}, 0, \\\\pi)$\\n\",\n    \"\\n\",\n    \"#### Other common parametric gates $U_1$ and $U_2$ are as follows:\\n\",\n    \"$$U_1(\\\\lambda) = \\\\begin{bmatrix} 1 & 0 \\\\\\\\[6pt] 0 & e^{i\\\\lambda} \\\\end{bmatrix} = U_3(0, 0, \\\\lambda)$$\\n\",\n    \"\\n\",\n    \"$$U_2(\\\\phi, \\\\lambda) = \\\\frac{1}{\\\\sqrt2}\\\\begin{bmatrix} 1 & -e^{i\\\\lambda} \\\\\\\\[6pt] e^{i\\\\phi} & e^{i(\\\\phi + \\\\lambda)} \\\\end{bmatrix} = U_3(\\\\frac{\\\\pi}{2}, \\\\phi, \\\\lambda)$$\\n\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Evolving to the same state as above using U1, U2, U3 gates\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<qiskit.circuit.instructionset.InstructionSet at 0x1e847e0d480>\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"qr = QuantumRegister(1)\\n\",\n    \"qc = QuantumCircuit(qr)\\n\",\n    \"qc.u(pi/2, 0, pi, qr) #u2 gate\\n\",\n    \"qc.u(0, 0, pi, qr) #u1 gate\\n\",\n    \"qc.u(pi, 0, pi, qr) #u3 gate\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Statevector([-0.70710678+8.65956056e-17j,  0.70710678+0.00000000e+00j],\\n\",\n      \"            dims=(2,))\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"backend = Aer.get_backend('statevector_simulator')\\n\",\n    \"qjob = execute(qc, backend)\\n\",\n    \"out_vector = qjob.result().get_statevector()\\n\",\n    \"print(out_vector)\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Single Qubit Measurement\\n\",\n    \"\\n\",\n    \"We flip the qubit qr and measure it 100 times. Since initial state of qr was $|0\\\\rangle$, flipping it makes its state $|1\\\\rangle$, so measuring it 100 times should give us the state $|1\\\\rangle$ 100 times.  \\n\",\n    \"This measurement is performed in computational basis, and qubit will collapse to one of $|0\\\\rangle$ or $|1\\\\rangle$ on measurement\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"{'1': 100}\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Creating Quantum Register, Classical Register, and Quantum Circuit\\n\",\n    \"qr = QuantumRegister(1)\\n\",\n    \"cr = ClassicalRegister(1)  # Helps in storing the output of the qubit measurement\\n\",\n    \"qc = QuantumCircuit(qr, cr)\\n\",\n    \"\\n\",\n    \"# Flipping qubit qr and measuring it\\n\",\n    \"qc.x(qr)\\n\",\n    \"qc.measure(qr, cr) # Measure the qubit qr and store the ouput in cr\\n\",\n    \"\\n\",\n    \"# Executing on backend\\n\",\n    \"backend = Aer.get_backend('qasm_simulator')\\n\",\n    \"qjob = execute(qc, backend, shots=100) # shots specifies the number of times the circuit (including measurement) will be repeated\\n\",\n    \"# Resulting measurement statistic will be stored in result object\\n\",\n    \"# This mimics measuring 100 qubits in computational basis\\n\",\n    \"measurement = qjob.result().get_counts()\\n\",\n    \"print(measurement)\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Measuring in Hadamard Basis\\n\",\n    \"\\n\",\n    \"We can measure the state of the qubit in any orthogonal basis. If we want to know whether the output is $|+\\\\rangle$ or $|-\\\\rangle$, then we have to measure in the Hadamard Basis: $\\\\{ |+\\\\rangle, |-\\\\rangle \\\\}$  \\n\",\n    \"Any state $|\\\\phi \\\\rangle = \\\\alpha |0\\\\rangle + \\\\beta |1\\\\rangle$ can be represented in Hadamard basis using the following:\\n\",\n    \"$$|\\\\phi \\\\rangle = \\\\frac{(\\\\alpha + \\\\beta)}{\\\\sqrt2} |+\\\\rangle + \\\\frac{(\\\\alpha - \\\\beta)}{\\\\sqrt2} |-\\\\rangle$$\\n\",\n    \"\\n\",\n    \"Now, if we apply $H^{\\\\dagger}$ on $|\\\\phi\\\\rangle$, we have:\\n\",\n    \"$$H^{\\\\dagger} |\\\\phi \\\\rangle = \\\\frac{(\\\\alpha + \\\\beta)}{\\\\sqrt2} |0\\\\rangle + \\\\frac{(\\\\alpha - \\\\beta)}{\\\\sqrt2} |1\\\\rangle$$\\n\",\n    \"i.e., $H^{\\\\dagger}$ maps $|+\\\\rangle$ to $|0\\\\rangle$ and $|-\\\\rangle$ to $|1\\\\rangle$\\n\",\n    \"\\n\",\n    \"So, measuring $H^\\\\dagger |\\\\phi \\\\rangle$ in computational basis is the same as measuring $|\\\\phi \\\\rangle$ in Hadamard Basis  \\n\",\n    \"This is called Transformation of Basis\\n\",\n    \"\\n\",\n    \"Note: $H = H^\\\\dagger$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"{'1': 488, '0': 536}\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"qr = QuantumRegister(1)\\n\",\n    \"cr = ClassicalRegister(1)\\n\",\n    \"qc = QuantumCircuit(qr, cr)\\n\",\n    \"\\n\",\n    \"qc.x(qr)\\n\",\n    \"# Now we need to measure whether output is one of the Hadamard Basis\\n\",\n    \"# So first apply H^dagger = H on qr to transform to computational basis\\n\",\n    \"# In output, 0 corresponds to + and 1 corresponds to -\\n\",\n    \"\\n\",\n    \"qc.h(qr)\\n\",\n    \"qc.measure(qr, cr)\\n\",\n    \"\\n\",\n    \"backend = Aer.get_backend('qasm_simulator')\\n\",\n    \"qjob = execute(qc, backend) # Default shots = 1024\\n\",\n    \"counts = qjob.result().get_counts()\\n\",\n    \"print(counts)\\n\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Slight deviation due to randomness, otherwise should have been prob = $\\\\frac{1}{2}$ for each exactly  \\n\",\n    \"Note: In output, $|0\\\\rangle$ corresponds to $|+\\\\rangle$ and $|1\\\\rangle$ corresponds to $|-\\\\rangle$\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"quantum\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.3\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        "2_QTRNG.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from dotenv import load_dotenv\\n\",\n    \"import os\\n\",\n    \"from qiskit import *\\n\",\n    \"from qiskit_ibm_provider import IBMProvider\\n\",\n    \"from math import *\\n\",\n    \"import qiskit\\n\",\n    \"\\n\",\n    \"load_dotenv()\\n\",\n    \"IBM_KEY = os.getenv(\\\"API_KEY\\\")\\n\",\n    \"provider = IBMProvider()\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Quantum True Random Number Generator (QTRNG)\\n\",\n    \"\\n\",\n    \"Hadamard gate and measurement in computational basis will give rise to true random sequences (due to inherent property of randomness of quantum states)  \\n\",\n    \"This isn't possible with a classical scenario with PRNG (Pseudo Random Number Generators)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"0\\n\",\n      \"1\\n\",\n      \"0\\n\",\n      \"0\\n\",\n      \"0\\n\",\n      \"0\\n\",\n      \"1\\n\",\n      \"0\\n\",\n      \"1\\n\",\n      \"0\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"for i in range(10):\\n\",\n    \"    q = QuantumRegister(1)\\n\",\n    \"    c = ClassicalRegister(1)\\n\",\n    \"    qc = QuantumCircuit(q, c)\\n\",\n    \"\\n\",\n    \"    qc.h(q)\\n\",\n    \"    qc.measure(q, c)\\n\",\n    \"\\n\",\n    \"    backend = Aer.get_backend('qasm_simulator')\\n\",\n    \"    qjob = execute(qc, backend, shots=1)\\n\",\n    \"    counts = qjob.result().get_counts()\\n\",\n    \"    for key in counts.keys():\\n\",\n    \"        print(key)\\n\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"quantum\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.3\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        "3_Multiple Qubits.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from dotenv import load_dotenv\\n\",\n    \"import os\\n\",\n    \"from qiskit import *\\n\",\n    \"from qiskit_ibm_provider import IBMProvider\\n\",\n    \"from math import *\\n\",\n    \"import qiskit\\n\",\n    \"\\n\",\n    \"load_dotenv()\\n\",\n    \"IBM_KEY = os.getenv(\\\"API_KEY\\\")\\n\",\n    \"provider = IBMProvider()\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Multiple Qubits\\n\",\n    \"\\n\",\n    \"For two qubits, we can have a superposition of the 4 states:\\n\",\n    \"$$|\\\\psi \\\\rangle = \\\\alpha_0 |00\\\\rangle + \\\\alpha_1 |01\\\\rangle  + \\\\alpha_2 |10\\\\rangle  + \\\\alpha_3 |11\\\\rangle $$\\n\",\n    \"Amplitude of $|\\\\psi\\\\rangle$ is denoted as a column vector\\n\",\n    \"\\n\",\n    \"$$|\\\\psi \\\\rangle = \\\\begin{bmatrix}\\\\alpha_0 \\\\\\\\ \\\\alpha_1 \\\\\\\\ \\\\alpha_2 \\\\\\\\ \\\\alpha_3\\\\end{bmatrix}$$\\n\",\n    \"\\n\",\n    \"$|ab\\\\rangle$ denotes the tensor product $|a\\\\rangle \\\\otimes |b\\\\rangle$  \\n\",\n    \"For two vectors $|a\\\\rangle, |b\\\\rangle$\\n\",\n    \"\\n\",\n    \"$$|a\\\\rangle = \\\\begin{bmatrix}a_1 \\\\\\\\ a_2 \\\\\\\\ \\\\vdots \\\\\\\\ a_n\\\\end{bmatrix}, |b\\\\rangle = \\\\begin{bmatrix}b_1 \\\\\\\\ b_2 \\\\\\\\ \\\\vdots \\\\\\\\ b_m\\\\end{bmatrix}$$\\n\",\n    \"$$|a\\\\rangle \\\\otimes |b\\\\rangle = \\\\begin{bmatrix}a_1 \\\\cdot b_1 \\\\\\\\ \\\\vdots \\\\\\\\ a_1\\\\cdot b_m \\\\\\\\ \\\\vdots \\\\\\\\ a_n\\\\cdot b_1 \\\\\\\\ \\\\vdots \\\\\\\\ a_n\\\\cdot b_m\\\\end{bmatrix}$$\\n\",\n    \"\\n\",\n    \"Dimension of tensor product is $(n\\\\cdot m) \\\\times 1$\\n\",\n    \"\\n\",\n    \"Tensor Product of two matrices $A = (a_{ij})_{m\\\\times n}, B = (b_{ij})_{p\\\\times q}$ is given by:\\n\",\n    \"$$A\\\\otimes B = \\\\begin{bmatrix}a_{11}B & a_{12}B & \\\\dots & a_{1n}B \\\\\\\\a_{12}B & a_{22}B & \\\\dots & a_{2n}B \\\\\\\\ \\\\vdots & & \\\\ddots & \\\\vdots \\\\\\\\ a_{m1}B & a_{m2}B & \\\\dots & a_{mn}B\\\\end{bmatrix}_{mp\\\\times nq}$$\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"System composed of two qubits of state $|\\\\phi_1\\\\rangle, |\\\\phi_2\\\\rangle$ can be written as $|\\\\psi\\\\rangle = |\\\\phi_1\\\\rangle \\\\otimes |\\\\phi_2\\\\rangle$  \\n\",\n    \"\\n\",\n    \"Similarly, state of n-qubit system which is composed of n single qubits with states $|\\\\phi_1 \\\\rangle, |\\\\phi_2\\\\rangle, \\\\dots |\\\\phi_n \\\\rangle$ can be denoted as:\\n\",\n    \"$$|\\\\psi \\\\rangle = |\\\\phi_1\\\\rangle \\\\otimes |\\\\phi_2\\\\rangle \\\\otimes \\\\dots \\\\otimes |\\\\phi_n\\\\rangle$$\\n\",\n    \"\\n\",\n    \"But we cannot always express an arbitrary n-qubit quantum system as a tensor product of n single qubit states, due to Quantum Entanglement\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Quantum Entanglement\\n\",\n    \"\\n\",\n    \"A set of qubits whose combined state is $|\\\\psi \\\\rangle$ is said to be in a state of entanglement if $|\\\\psi \\\\rangle$ cannot be decomposed as $|\\\\psi \\\\rangle = |\\\\phi \\\\rangle \\\\otimes |\\\\xi \\\\rangle$ where $|\\\\phi \\\\rangle$ and $|\\\\xi \\\\rangle$ are two independent quantum states.\\n\",\n    \"\\n\",\n    \"In $|\\\\psi\\\\rangle = \\\\frac{1}{\\\\sqrt2}(|00\\\\rangle + |11\\\\rangle)$, $|\\\\psi\\\\rangle$ cannot be written as a tensor product of two single qubit states - they are in a state of entanglement.  \\n\",\n    \"However, in the above, if we conduct a measurement of the first qubit, we obtain $|0\\\\rangle$ with a probability of $\\\\frac{1}{2}$ and $|1\\\\rangle$ with a probability of $\\\\frac{1}{2}$ (same situation if we measure the second qubit first).  \\n\",\n    \"Suppose we have obtained $|0\\\\rangle$ on first qubit measurement $\\\\rightarrow$ we will obtain a measurement of $|0\\\\rangle$ with a probability of $1$ for the second qubit (as the state of the system has been collapsed to $|00\\\\rangle$). So from just measuring any one of the qubits, we can learn about the measurement outcome for the remaining qubit.\\n\",\n    \"\\n\",\n    \"Measurement of first qubit $\\\\rightarrow$ Probabilistic  \\n\",\n    \"Measurement of subsequent second qubit $\\\\rightarrow$ Determined exactly\\n\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Bell States or EPR Pairs (Important Two-Qubit States):\\n\",\n    \"\\n\",\n    \"$$|\\\\Phi^+\\\\rangle = \\\\frac{1}{\\\\sqrt2}(|00\\\\rangle + |11\\\\rangle)$$\\n\",\n    \"$$|\\\\Phi^-\\\\rangle = \\\\frac{1}{\\\\sqrt2}(|00\\\\rangle - |11\\\\rangle)$$\\n\",\n    \"$$|\\\\Psi^+\\\\rangle = \\\\frac{1}{\\\\sqrt2}(|01\\\\rangle + |10\\\\rangle)$$\\n\",\n    \"$$|\\\\Psi^-\\\\rangle = \\\\frac{1}{\\\\sqrt2}(|01\\\\rangle - |10\\\\rangle)$$\\n\",\n    \"\\n\",\n    \"### GHZ States (used in Quantum Error corrections):\\n\",\n    \"$$|GHZ_\\\\pm \\\\rangle = \\\\frac{1}{\\\\sqrt2}(|000\\\\rangle \\\\pm |111\\\\rangle)$$\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Multi-Qubit Gates\\n\",\n    \"\\n\",\n    \"### Controlled NOT Gate:  \\n\",\n    \"Analogue to Classical XOR gate $\\\\rightarrow$ CNOT Gate (Controlled NOT Gate)  \\n\",\n    \"CNOT Gate has two inputs: \\\"control\\\" qubit and \\\"target\\\" qubit  \\n\",\n    \"If control qubit is set to $|1\\\\rangle$, then flip target qubit, else do nothing (CNOT basically implements X gate on target qubit if controlled qubit is in state $|1\\\\rangle$)\\n\",\n    \"$$\\\\text{CNOT} := \\\\begin{bmatrix}1 & 0 & 0 & 0 \\\\\\\\ 0 & 1 & 0 & 0 \\\\\\\\ 0 & 0 & 0 & 1 \\\\\\\\ 0 & 0 & 1 & 0\\\\end{bmatrix}$$\\n\",\n    \"\\n\",\n    \"For $|\\\\psi \\\\rangle = \\\\alpha_0 |00\\\\rangle + \\\\alpha_1 |01\\\\rangle  + \\\\alpha_2 |10\\\\rangle  + \\\\alpha_3 |11\\\\rangle $, action of CNOT gate can be described as:\\n\",\n    \"$$\\\\text{CNOT}|\\\\psi \\\\rangle = \\\\alpha_0 |00\\\\rangle + \\\\alpha_1 |01\\\\rangle  + \\\\alpha_2 |11\\\\rangle  + \\\\alpha_3 |10\\\\rangle $$  \\n\",\n    \"We can state the action of the CNOT Gate in computational basis state of the individual qubits:\\n\",\n    \"$$\\\\text{CNOT}|a\\\\rangle |b\\\\rangle \\\\rightarrow |a\\\\rangle |a \\\\oplus b\\\\rangle$$  \\n\",\n    \"or, we can think of CNOT as a function that acts on two qubits:\\n\",\n    \"$$\\\\text{CNOT}(|a\\\\rangle, |b\\\\rangle) \\\\rightarrow (|a\\\\rangle, |a \\\\oplus b\\\\rangle)$$\\n\",\n    \"\\n\",\n    \"$\\\\text{CNOT} + \\\\text{all single qubit quantum gates} \\\\rightarrow \\\\text{can be used to construct any quantum gate}$  \\n\",\n    \"So, CNOT and all single qubit quantum gates are called universal quantum gates\\n\",\n    \"\\n\",\n    \"#### Controlled Hadamard Gate:\\n\",\n    \"$$C_H = \\\\begin{bmatrix}1 & 0 & 0 & 0 \\\\\\\\ 0 & 1 & 0 & 0 \\\\\\\\[6pt] 0 & 0 & \\\\frac{1}{\\\\sqrt2} & \\\\frac{1}{\\\\sqrt2} \\\\\\\\[6pt] 0 & 0 & \\\\frac{1}{\\\\sqrt2} & -\\\\frac{1}{\\\\sqrt2}\\\\end{bmatrix}$$\\n\",\n    \"\\n\",\n    \"#### Toffoli Gate (CCNOT):\\n\",\n    \"\\n\",\n    \"Extension of CNOT to three qubits, first two are control qubits and the 3rd is target qubit. Target qubit is flipped iff both control qubits are set to 1\\n\",\n    \"$$CCNOT |a \\\\rangle | b \\\\rangle |c\\\\rangle \\\\rightarrow |a\\\\rangle|b\\\\rangle|c \\\\oplus (a\\\\cdot b)\\\\rangle$$  \\n\",\n    \"Corresponding unitary matrix for CCNOT gate (operating on 3 qubits, so $8 \\\\times 8$ matrix)\\n\",\n    \"$$CCNOT := \\\\begin{bmatrix}1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\\\\\\n\",\n    \"                          0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\\\\\\n\",\n    \"                          0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\\\\\\n\",\n    \"                          0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\\\\\\n\",\n    \"                          0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\\\\\\\n\",\n    \"                          0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\\\\\\\n\",\n    \"                          0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\\\\\\\n\",\n    \"                          0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\\\\\\\\n\",\n    \"                            \\\\end{bmatrix}$$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<pre style=\\\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\\\">            \u250c\u2500\u2510   \\n\",\n       \"q89_0: \u2500\u2500\u25a0\u2500\u2500\u2524M\u251c\u2500\u2500\u2500\\n\",\n       \"       \u250c\u2500\u2534\u2500\u2510\u2514\u2565\u2518\u250c\u2500\u2510\\n\",\n       \"q89_1: \u2524 X \u251c\u2500\u256b\u2500\u2524M\u251c\\n\",\n       \"       \u2514\u2500\u2500\u2500\u2518 \u2551 \u2514\u2565\u2518\\n\",\n       \"c22: 2/\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550\\n\",\n       \"             0  1 </pre>\"\n      ],\n      \"text/plain\": [\n       \"            \u250c\u2500\u2510   \\n\",\n       \"q89_0: \u2500\u2500\u25a0\u2500\u2500\u2524M\u251c\u2500\u2500\u2500\\n\",\n       \"       \u250c\u2500\u2534\u2500\u2510\u2514\u2565\u2518\u250c\u2500\u2510\\n\",\n       \"q89_1: \u2524 X \u251c\u2500\u256b\u2500\u2524M\u251c\\n\",\n       \"       \u2514\u2500\u2500\u2500\u2518 \u2551 \u2514\u2565\u2518\\n\",\n       \"c22: 2/\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550\\n\",\n       \"             0  1 \"\n      ]\n     },\n     \"execution_count\": 27,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"q = QuantumRegister(2)\\n\",\n    \"c = ClassicalRegister(2)\\n\",\n    \"qc = QuantumCircuit(q, c)\\n\",\n    \"\\n\",\n    \"qc.cx(q[0], q[1])\\n\",\n    \"qc.measure(q, c)\\n\",\n    \"\\n\",\n    \"qc.draw()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 29,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<pre style=\\\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\\\">            \u250c\u2500\u2510      \\n\",\n       \"q91_0: \u2500\u2500\u25a0\u2500\u2500\u2524M\u251c\u2500\u2500\u2500\u2500\u2500\u2500\\n\",\n       \"         \u2502  \u2514\u2565\u2518\u250c\u2500\u2510   \\n\",\n       \"q91_1: \u2500\u2500\u25a0\u2500\u2500\u2500\u256b\u2500\u2524M\u251c\u2500\u2500\u2500\\n\",\n       \"       \u250c\u2500\u2534\u2500\u2510 \u2551 \u2514\u2565\u2518\u250c\u2500\u2510\\n\",\n       \"q91_2: \u2524 X \u251c\u2500\u256b\u2500\u2500\u256b\u2500\u2524M\u251c\\n\",\n       \"       \u2514\u2500\u2500\u2500\u2518 \u2551  \u2551 \u2514\u2565\u2518\\n\",\n       \"c24: 3/\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550\u2550\u2569\u2550\\n\",\n       \"             0  1  2 </pre>\"\n      ],\n      \"text/plain\": [\n       \"            \u250c\u2500\u2510      \\n\",\n       \"q91_0: \u2500\u2500\u25a0\u2500\u2500\u2524M\u251c\u2500\u2500\u2500\u2500\u2500\u2500\\n\",\n       \"         \u2502  \u2514\u2565\u2518\u250c\u2500\u2510   \\n\",\n       \"q91_1: \u2500\u2500\u25a0\u2500\u2500\u2500\u256b\u2500\u2524M\u251c\u2500\u2500\u2500\\n\",\n       \"       \u250c\u2500\u2534\u2500\u2510 \u2551 \u2514\u2565\u2518\u250c\u2500\u2510\\n\",\n       \"q91_2: \u2524 X \u251c\u2500\u256b\u2500\u2500\u256b\u2500\u2524M\u251c\\n\",\n       \"       \u2514\u2500\u2500\u2500\u2518 \u2551  \u2551 \u2514\u2565\u2518\\n\",\n       \"c24: 3/\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550\u2550\u2569\u2550\\n\",\n       \"             0  1  2 \"\n      ]\n     },\n     \"execution_count\": 29,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"q = QuantumRegister(3)\\n\",\n    \"c = ClassicalRegister(3)\\n\",\n    \"qc = QuantumCircuit(q, c)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"qc.ccx(q[0], q[1], q[2])\\n\",\n    \"qc.measure(q, c)\\n\",\n    \"qc.draw()\\n\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## No Cloning Theorem\\n\",\n    \"\\n\",\n    \"With multiple qubits of state $|\\\\psi \\\\rangle$, we can get an estimate of $\\\\alpha, \\\\beta$ but not with a single qubit because on measuring, it collapses to either one of its computational basis states $|0\\\\rangle$, or $|1\\\\rangle$\\n\",\n    \"\\n\",\n    \"Question is, can we clone a qubit to make mutliple copies of $|\\\\psi\\\\rangle$? (Need a circuit that takes a qubit and an ancillary qubit [Ancilla] as input and output two copies of $|\\\\psi\\\\rangle$) $\\\\rightarrow$ CNOT gate might be useful (due to the following copying action):\\n\",\n    \"\\n\",\n    \"$$CNOT|0\\\\rangle |0\\\\rangle \\\\rightarrow |0\\\\rangle |0\\\\rangle$$\\n\",\n    \"$$CNOT|1\\\\rangle |0\\\\rangle \\\\rightarrow |1\\\\rangle |1\\\\rangle$$\\n\",\n    \"\\n\",\n    \"But, for any given arbitary qubit state,\\n\",\n    \"$$CNOT(\\\\alpha |0\\\\rangle + \\\\beta|1\\\\rangle)\\\\rightarrow \\\\alpha |0\\\\rangle|0\\\\rangle+\\\\beta|1\\\\rangle|1\\\\rangle \\\\text{(Entanglement!)}$$\\n\",\n    \"We wanted:\\n\",\n    \"$$|\\\\psi\\\\rangle \\\\otimes |\\\\psi\\\\rangle = (\\\\alpha |0\\\\rangle + \\\\beta|1\\\\rangle)\\\\otimes(\\\\alpha |0\\\\rangle + \\\\beta|1\\\\rangle)$$\\n\",\n    \"\\n\",\n    \"Infact, no such circuit for copying can exist, i.e., no Unitary U exists for all unknown arbitrary states $|\\\\psi\\\\rangle$, $U|\\\\psi\\\\rangle|j\\\\rangle \\\\rightarrow |\\\\psi\\\\rangle|\\\\psi\\\\rangle$\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Code for creating Bell State $|\\\\phi^+\\\\rangle$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<pre style=\\\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\\\">      \u250c\u2500\u2500\u2500\u2510     \u250c\u2500\u2510   \\n\",\n       \"q0_0: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2524M\u251c\u2500\u2500\u2500\\n\",\n       \"      \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510\u2514\u2565\u2518\u250c\u2500\u2510\\n\",\n       \"q0_1: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u256b\u2500\u2524M\u251c\\n\",\n       \"           \u2514\u2500\u2500\u2500\u2518 \u2551 \u2514\u2565\u2518\\n\",\n       \"c0: 2/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550\\n\",\n       \"                 0  1 </pre>\"\n      ],\n      \"text/plain\": [\n       \"      \u250c\u2500\u2500\u2500\u2510     \u250c\u2500\u2510   \\n\",\n       \"q0_0: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2524M\u251c\u2500\u2500\u2500\\n\",\n       \"      \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510\u2514\u2565\u2518\u250c\u2500\u2510\\n\",\n       \"q0_1: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u256b\u2500\u2524M\u251c\\n\",\n       \"           \u2514\u2500\u2500\u2500\u2518 \u2551 \u2514\u2565\u2518\\n\",\n       \"c0: 2/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550\\n\",\n       \"                 0  1 \"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"q = QuantumRegister(2)\\n\",\n    \"c = ClassicalRegister(2)\\n\",\n    \"qc = QuantumCircuit(q, c)\\n\",\n    \"\\n\",\n    \"qc.h(q[0])\\n\",\n    \"qc.cx(q[0], q[1])\\n\",\n    \"qc.measure(q, c)\\n\",\n    \"\\n\",\n    \"qc.draw()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"{'11': 513, '00': 511}\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"backend = Aer.get_backend('qasm_simulator')\\n\",\n    \"qjob = execute(qc, backend)\\n\",\n    \"counts = qjob.result().get_counts()\\n\",\n    \"print(counts)\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Code for creating Bell State $|GHZ_{+}\\\\rangle$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<pre style=\\\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\\\">       \u250c\u2500\u2500\u2500\u2510          \u250c\u2500\u2510      \\n\",\n       \"q85_0: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524M\u251c\u2500\u2500\u2500\u2500\u2500\u2500\\n\",\n       \"       \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510     \u2514\u2565\u2518\u250c\u2500\u2510   \\n\",\n       \"q85_1: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u25a0\u2500\u2500\u2500\u256b\u2500\u2524M\u251c\u2500\u2500\u2500\\n\",\n       \"            \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510 \u2551 \u2514\u2565\u2518\u250c\u2500\u2510\\n\",\n       \"q85_2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u256b\u2500\u2500\u256b\u2500\u2524M\u251c\\n\",\n       \"                 \u2514\u2500\u2500\u2500\u2518 \u2551  \u2551 \u2514\u2565\u2518\\n\",\n       \"c21: 3/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550\u2550\u2569\u2550\\n\",\n       \"                       0  1  2 </pre>\"\n      ],\n      \"text/plain\": [\n       \"       \u250c\u2500\u2500\u2500\u2510          \u250c\u2500\u2510      \\n\",\n       \"q85_0: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524M\u251c\u2500\u2500\u2500\u2500\u2500\u2500\\n\",\n       \"       \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510     \u2514\u2565\u2518\u250c\u2500\u2510   \\n\",\n       \"q85_1: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u25a0\u2500\u2500\u2500\u256b\u2500\u2524M\u251c\u2500\u2500\u2500\\n\",\n       \"            \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510 \u2551 \u2514\u2565\u2518\u250c\u2500\u2510\\n\",\n       \"q85_2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u256b\u2500\u2500\u256b\u2500\u2524M\u251c\\n\",\n       \"                 \u2514\u2500\u2500\u2500\u2518 \u2551  \u2551 \u2514\u2565\u2518\\n\",\n       \"c21: 3/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550\u2550\u2569\u2550\\n\",\n       \"                       0  1  2 \"\n      ]\n     },\n     \"execution_count\": 25,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"q = QuantumRegister(3)\\n\",\n    \"c = ClassicalRegister(3)\\n\",\n    \"qc = QuantumCircuit(q, c)\\n\",\n    \"\\n\",\n    \"qc.h(q[0])\\n\",\n    \"qc.cx(q[0], q[1])\\n\",\n    \"qc.cx(q[1], q[2])\\n\",\n    \"qc.measure(q, c)\\n\",\n    \"qc.draw()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"{'111': 527, '000': 497}\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"backend = Aer.get_backend('qasm_simulator')\\n\",\n    \"qjob = execute(qc, backend)\\n\",\n    \"counts = qjob.result().get_counts()\\n\",\n    \"print(counts)\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Multi-Qubit Measurement\\n\",\n    \"\\n\",\n    \"Probability of obtaining $i$ as the measurement outcome for a system in state $|\\\\psi\\\\rangle$ is defined using the measurement operator $M_i$ as:\\n\",\n    \"$$Pr(i) = \\\\langle\\\\psi|M^{\\\\dagger}_i M_i |\\\\psi\\\\rangle$$\\n\",\n    \"And on obtaining the outcome $i$, the ssytem collapses to:\\n\",\n    \"$$|\\\\psi'\\\\rangle = \\\\frac{M_i|\\\\psi\\\\rangle}{\\\\sqrt{\\\\langle\\\\psi|M^{\\\\dagger}_i M_i |\\\\psi\\\\rangle}}$$ \\n\",\n    \"(Post measurement state is normalized)\\n\",\n    \"\\n\",\n    \"For eg., Probability of obtaining outcome $00$ upon measuring $|\\\\psi\\\\rangle$ is:\\n\",\n    \"$$Pr(00) = \\\\langle\\\\psi|(|00\\\\rangle\\\\langle 00|)^{\\\\dagger}(|00\\\\rangle\\\\langle 00|)|\\\\psi\\\\rangle$$\\n\",\n    \"Let $|\\\\psi \\\\rangle = \\\\frac{1}{2}(|00\\\\rangle + |01\\\\rangle + |10\\\\rangle + |11\\\\rangle)$, so\\n\",\n    \"\\n\",\n    \"$$\\\\begin{align*}(|00\\\\rangle\\\\langle 00|)|\\\\psi\\\\rangle &= (|00\\\\rangle\\\\langle 00|)\\\\bigg[\\\\frac{1}{2}(|00\\\\rangle + |01\\\\rangle + |10\\\\rangle + |11\\\\rangle)\\\\bigg] \\\\\\\\\\n\",\n    \"&=\\\\frac{1}{2}|00\\\\rangle \\\\bigg(\\\\langle 00|00\\\\rangle + \\\\langle 00|01\\\\rangle+\\\\langle 00|10\\\\rangle+\\\\langle 00|11\\\\rangle\\\\bigg) \\\\\\\\\\n\",\n    \"&=\\\\frac{1}{2}|00\\\\rangle \\\\end{align*}$$\\n\",\n    \"Now, \\n\",\n    \"$$ \\\\langle\\\\psi|(|00\\\\rangle\\\\langle 00|)^{\\\\dagger} = \\\\bigg((|00\\\\rangle \\\\langle 00|)|\\\\psi\\\\rangle\\\\bigg)^{\\\\dagger}$$\\n\",\n    \"$$\\\\implies Pr(00) = (\\\\frac{1}{2}\\\\langle 00|)(\\\\frac{1}{2}|00\\\\rangle) = \\\\frac{1}{4}\\\\langle 00 | 00\\\\rangle = \\\\frac{1}{4}$$\\n\",\n    \"\\n\",\n    \"On measuring just the of the first qubit of the state $|\\\\psi \\\\rangle$, the probability of obtaining outcome $0$ can be computed as $\\\\frac{1}{2}$, and post measurement, the state of the system on measuring the first qubit as $0$ can be given as \\n\",\n    \"$$|\\\\psi_0\\\\rangle = \\\\frac{1}{\\\\sqrt2}(|00\\\\rangle + |01\\\\rangle)$$\\n\",\n    \"\\n\",\n    \"Set of measurement operators must satisfy $$\\\\sum_i M_i^{\\\\dagger}M_i = I \\\\\\\\\\\\text{(Completeness Relation)}$$\\n\",\n    \"\\n\",\n    \"Projective measurements: Set of operators $P_i = M_i^{\\\\dagger}M_i$ satisfying completeness relation $\\\\sum_iP_i=1$ as well as that the operators are orthogonal, so $P_iP_{i'}=P_i$ only when $i'=i$\\n\",\n    \"\\n\",\n    \"Example of projective measurement is the following set of operators:\\n\",\n    \"$$\\\\bigg\\\\{|00\\\\rangle \\\\langle 00|, |01\\\\rangle \\\\langle 01|, |10\\\\rangle \\\\langle 10|, |11\\\\rangle \\\\langle 11|\\\\bigg\\\\}$$\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"quantum\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.3\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        "4_Quantum Teleportation.ipynb": {
            "code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from dotenv import load_dotenv\\n\",\n    \"import os\\n\",\n    \"from qiskit import *\\n\",\n    \"from qiskit_ibm_provider import IBMProvider\\n\",\n    \"from math import *\\n\",\n    \"import qiskit\\n\",\n    \"\\n\",\n    \"load_dotenv()\\n\",\n    \"IBM_KEY = os.getenv(\\\"API_KEY\\\")\\n\",\n    \"provider = IBMProvider()\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Quantum Teleportation\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<pre style=\\\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\\\">      \u250c\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2510 \u2591                                 \\n\",\n       \"q1_0: \u2524 H \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2524 H \u251c\u2524M\u251c\u2500\u2591\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\",\n       \"      \u251c\u2500\u2500\u2500\u2524     \u250c\u2500\u2534\u2500\u2510\u2514\u252c\u2500\u252c\u2518\u2514\u2565\u2518 \u2591                                 \\n\",\n       \"q1_1: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2524 X \u251c\u2500\u2524M\u251c\u2500\u2500\u256b\u2500\u2500\u2591\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\",\n       \"      \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510\u2514\u2500\u2500\u2500\u2518 \u2514\u2565\u2518  \u2551  \u2591    \u250c\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2510\\n\",\n       \"q1_2: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u256b\u2500\u2500\u2591\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 Z \u251c\u2500\u2500\u2500\u2500\u2524 H \u251c\u2524M\u251c\\n\",\n       \"           \u2514\u2500\u2500\u2500\u2518       \u2551   \u2551  \u2591    \u2514\u2500\u2565\u2500\u2518       \u2514\u2500\u2565\u2500\u2518    \u2514\u2500\u2500\u2500\u2518\u2514\u2565\u2518\\n\",\n       \"                       \u2551   \u2551    \u250c\u2500\u2500\u2500\u2500\u2568\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2568\u2500\u2500\u2500\u2500\u2500\u2510      \u2551 \\n\",\n       \"c2: 2/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2561 c2_1=0x1 \u255e\u2561 c2_0=0x1 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\\n\",\n       \"                       1   0    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2551 \\n\",\n       \"c3: 1/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\\n\",\n       \"                                                              0 </pre>\"\n      ],\n      \"text/plain\": [\n       \"      \u250c\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2510 \u2591                                 \\n\",\n       \"q1_0: \u2524 H \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2524 H \u251c\u2524M\u251c\u2500\u2591\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\",\n       \"      \u251c\u2500\u2500\u2500\u2524     \u250c\u2500\u2534\u2500\u2510\u2514\u252c\u2500\u252c\u2518\u2514\u2565\u2518 \u2591                                 \\n\",\n       \"q1_1: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2524 X \u251c\u2500\u2524M\u251c\u2500\u2500\u256b\u2500\u2500\u2591\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\",\n       \"      \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510\u2514\u2500\u2500\u2500\u2518 \u2514\u2565\u2518  \u2551  \u2591    \u250c\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2510\\n\",\n       \"q1_2: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u256b\u2500\u2500\u2591\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 Z \u251c\u2500\u2500\u2500\u2500\u2524 H \u251c\u2524M\u251c\\n\",\n       \"           \u2514\u2500\u2500\u2500\u2518       \u2551   \u2551  \u2591    \u2514\u2500\u2565\u2500\u2518       \u2514\u2500\u2565\u2500\u2518    \u2514\u2500\u2500\u2500\u2518\u2514\u2565\u2518\\n\",\n       \"                       \u2551   \u2551    \u250c\u2500\u2500\u2500\u2500\u2568\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2568\u2500\u2500\u2500\u2500\u2500\u2510      \u2551 \\n\",\n       \"c2: 2/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2561 c2_1=0x1 \u255e\u2561 c2_0=0x1 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\\n\",\n       \"                       1   0    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2551 \\n\",\n       \"c3: 1/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\\n\",\n       \"                                                              0 \"\n      ]\n     },\n     \"execution_count\": 4,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"q = QuantumRegister(3)\\n\",\n    \"ca = ClassicalRegister(2)\\n\",\n    \"cb = ClassicalRegister(1)\\n\",\n    \"\\n\",\n    \"qc = QuantumCircuit(q, ca, cb)\\n\",\n    \"# Creating entaglement\\n\",\n    \"qc.h(q[1])\\n\",\n    \"qc.cx(q[1], q[2])\\n\",\n    \"\\n\",\n    \"# Creating a dummy state that is to be teleported\\n\",\n    \"qc.h(q[0])\\n\",\n    \"qc.cx(q[0], q[1])\\n\",\n    \"qc.h(q[0])\\n\",\n    \"qc.measure(q[0], ca[0])\\n\",\n    \"qc.measure(q[1], ca[1])\\n\",\n    \"qc.barrier()\\n\",\n    \"\\n\",\n    \"# Controlled on the o/p receieved by Bob, he performs X gate and Z gate\\n\",\n    \"qc.x(q[2]).c_if(ca[1] ,1)\\n\",\n    \"qc.z(q[2]).c_if(ca[0] ,1)\\n\",\n    \"\\n\",\n    \"# Check if state obtained is same as one to be teleported (H^{dag} = H), So output on measuring q[2] should always be |0>\\n\",\n    \"qc.h(q[2])\\n\",\n    \"qc.measure(q[2], cb[0])\\n\",\n    \"\\n\",\n    \"qc.draw()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"{'0 11': 250, '0 00': 254, '0 01': 253, '0 10': 267}\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"backend = Aer.get_backend('qasm_simulator')\\n\",\n    \"qjob = execute(qc, backend)\\n\",\n    \"counts = qjob.result().get_counts()\\n\",\n    \"print(counts)\\n\",\n    \"# Output structure is cb[0] ca[0]ca[1]\\n\",\n    \"# Always get 0 for q[2] \"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"quantum\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.3\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        }
    },
    "SnapScribe": {
        "Backend_resources.md": {
            "code": "# Backend Development Resources\r\nThis file contains a comprehensive list of resources that can be valuable for backend development in the SnapScribe project. These resources cover various aspects such as backend frameworks and API development.\r\n\r\n## Backend Frameworks\r\nFor both of the suggested frameworks, basic familiarity with Python is necessary.  \r\n- [Flask](https://flask.palletsprojects.com/en/2.3.x/) - A lightweight and versatile Python web framework. Flask provides a simple yet powerful foundation for building web applications and APIs.  \r\n\r\n- [CS50 2020 lec 9 - Flask](https://youtu.be/x_c8pTW8ZUc) - Great tutorial for building a Flask web app. Holds your hand all the way through and explains all the basic concepts. Probably all the Flask you need to learn for this project. But remember that they use Jinja syntax which we won't be using or needing, it is old. We will need to connect it to a React frontend.\r\n\r\n- [Django](https://docs.djangoproject.com/en/4.2/) - A high-level Python web framework known for its \"batteries included\" approach. It offers robust features for building scalable and secure web applications.\r\n\r\nThe preferred method for this project is a Flask web server serving the ML model, but you can use Django if you're more comfortable with that. The high level concept remains the same with any of the two, which is that you will have to build routes in the web app to serve predictions.\r\n\r\n## HTTP Basics\r\n\r\n- [CS50 2020 Lec 8 - Web](https://youtu.be/5g0x2xv3aHU) - Great introduction to HTTP protocols and type of requests like GET and POST, their differences and when each one is used. Also gives an intro as to what headers are. Great starting point.\r\n\r\n- [HTTP MDN Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP) - Very in-depth. Do not need to learn all of this. Don't even try to remember or read through this whole thing. Use as and when needed as reference material.\r\n\r\n- [HTTP Headers MDN Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) - Same as above, use as reference material.\r\n\r\n## Sending Requests and Fetching Responses\r\n\r\n- [Requests in Python](https://docs.python-requests.org/en/latest/) - Requests is an elegant and simple HTTP library for Python. You might need to use this.\r\n\r\nFor sending and fetching requests in React, you'll need the following (basically the following will communicate between the frontend and backend - user uploads image to the frontend, that is sent to the backend and the backend responds with a caption that is then displayed by the frontend).  \r\n- [Form Handling - Net Ninja](https://www.youtube.com/playlist?list=PL4cUxeGkcC9gZD-Tvwfod2gaISzfRiP9d) - Videos #14-32 are essential. Won't take long. Definitely watch them.\r\n\r\n- [Axios](https://axios-http.com/docs/intro) - A popular JavaScript library for making HTTP requests from web browsers or Node.js. Axios is great for the handling of responses that it provides.\r\n\r\n- [Axios freeCodeCamp Tutorial](https://www.freecodecamp.org/news/how-to-use-axios-with-react/) - Guide to get started with Axios and React.\r\n\r\n- [Fetch API MDN Docs](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) - The MDN Web Docs guide to the Fetch API, a modern browser feature for making asynchronous HTTP requests.\r\n\r\n- [Asynchronous JavaScript](https://www.freecodecamp.org/news/asynchronous-javascript) - Lean about Promises, Callbacks, and asynchronous code handling in JavaScript. You will be able to apply this in React after that.\r\n\r\n## API Resources\r\nLearn about APIs, their types. Specifically the REST API design is very useful. Learn that by Googling. You will be building the API with Flask. But getting some theory in your head won't hurt, but don't spend much time on this.\r\n\r\n[Postman](https://www.postman.com/) - Good tool for testing API routes with various types of input. You can learn how to use this for API testing by Googling and YouTube."
        },
        "CODE_OF_CONDUCT.md": {
            "code": "# SnapScribe Code of Conduct for CSOC\r\n## Introduction\r\nSnapScribe is committed to creating an open and inclusive community where everyone feels welcome, respected, and valued. We expect all community members, including contributors, maintainers, and users, to adhere to this Code of Conduct when participating in any SnapScribe-related activities or contributing to the project. This Code of Conduct outlines our shared values and the behavior we expect from individuals within our community.\r\n\r\n## Our Values\r\n- Respect: Treat others with respect, kindness, and empathy. Be considerate of different perspectives and experiences.\r\n- Inclusivity: Foster an inclusive and diverse environment where everyone feels safe and valued, regardless of their race, ethnicity, gender, sexual orientation, age, ability, or any other personal attribute.\r\n- Collaboration: Encourage collaboration and constructive communication. Work together to achieve common goals and resolve conflicts in a respectful manner.\r\n- Openness: Embrace openness, transparency, and accountability in our interactions and decision-making processes.\r\n- Professionalism: Maintain a professional and courteous demeanor. Refrain from engaging in any form of harassment, discrimination, or disruptive behavior.\r\n## Expected Behavior\r\nAll community members are expected to:\r\n\r\n- Be respectful and considerate of others' opinions, ideas, and experiences.\r\n- Use inclusive language and avoid any offensive, discriminatory, or derogatory remarks or behavior.\r\n- Be open to constructive feedback and provide feedback in a respectful and constructive manner.\r\n- Exercise empathy and assume good intentions in all interactions.\r\n- Be mindful of the impact of your words and actions on others in the community.\r\n- Respect the privacy and confidentiality of others.\r\n- Be accountable for your actions and their consequences.\r\n## Unacceptable Behavior\r\nThe following behaviors are considered unacceptable within the SnapScribe community:\r\n\r\n- Harassment, bullying, or intimidation in any form.\r\n- Discrimination or offensive comments related to race, ethnicity, gender, sexual orientation, age, ability, or any other personal attribute.\r\n- Use of derogatory, offensive, or inappropriate language or imagery.\r\n- Personal attacks, insults, or trolling.\r\n- Disruptive or disrespectful behavior during community discussions or events.\r\n- Any other behavior that violates the principles outlined in this Code of Conduct."
        },
        "CONTRIBUTE.md": {
            "code": "# Contributing to SnapScribe\r\nThank you for your interest in contributing to SnapScribe! We appreciate your support in making this project even better. Before contributing, take a look at the following guidelines, which will help you get started with making your first PRs and resolving issues!\r\n\r\n## How to Contribute\r\n1.  Fork the repository to your GitHub account.\r\n2. Create a new branch from the main branch for your contributions.\r\n3. Make your changes and improvements in the branch you created.\r\n4. Ensure your code adheres to the project's coding style and follows best practices.\r\n5. Test your changes locally to ensure they function as expected.\r\n6. Commit your changes with descriptive commit messages.\r\n7. Push your branch to your forked repository.\r\n8. Open a pull request (PR) from your branch to the main branch of the main repository.\r\n9. Provide a clear and detailed description of the changes you made in the PR.\r\n10. Be responsive to any feedback or comments provided during the review process.\r\n\r\n## Making Your First Pull Request (PR)\r\n\r\n1. Find an issue labeled as \"good first issue\" among list of issues. These are great starting points.\r\n\r\n2. Comment on the issue to let others know that you're interested in working on it. This helps prevent duplicate efforts and allows for coordination if multiple contributors are interested in the same issue.\r\n\r\n3. Fork the repository to your GitHub account by clicking the \"Fork\" button on the top-right corner of the repository page.\r\n\r\n4. Clone your forked repository to your local machine using the following command:\r\n\r\n    `git clone https://github.com/your-username/SnapScribe.git`\r\n\r\n5. Create a new branch for your changes using a descriptive branch name:\r\n\r\n    `git checkout -b my-first-contribution`\r\n\r\n6. Make the necessary changes and improvements to the codebase.\r\n\r\n7. Test your changes locally to ensure they work as expected.\r\n\r\n8. Commit your changes with a clear and concise commit message:\r\n    `git commit -m \"Add feature XYZ\"`\r\n\r\n9. Push your changes to your forked repository:\r\n\r\n    `git push origin my-first-contribution`\r\n\r\n10. Visit the original repository on GitHub and click the \"New pull request\" button.\r\n\r\n11. Provide a descriptive title and detailed description for your pull request, explaining the changes you made.\r\n\r\n12. Submit the pull request and wait for the project maintainers to review your changes. Be patient and responsive to any feedback or suggestions provided.\r\n\r\n\r\n## Code Style and Guidelines\r\n- Follow the coding style and conventions used in the existing codebase.\r\n- Write clear and concise code with meaningful variable and function names.\r\n- Include comments in your code where necessary to enhance readability.\r\n- Ensure your code is well-documented, including inline comments and docstrings.\r\n- Write unit tests for new features or modifications to existing functionality.\r\n- Run existing tests to ensure you haven't introduced any regressions.\r\n## Reporting Issues\r\n- If you encounter any bugs, issues, or have suggestions for improvements, please submit an issue on the GitHub repository. When submitting an issue, please include the following information:\r\n\r\n    1. A clear and descriptive title.\r\n    2. A detailed description of the issue or suggestion.\r\n    3. Steps to reproduce the issue, if applicable.\r\n    4. Any relevant logs, error messages, or screenshots.\r\n\r\n## Documentation\r\nImprovements to the project's documentation are highly valuable. If you find any gaps or areas that need clarification, please feel free to submit documentation updates or create new documentation where needed.\r\n\r\n## Collaboration and Communication\r\nWe encourage collaboration and open communication among contributors. If you have any questions or need assistance, please use the CSOC Discord Server's relevant channel. You can also reach out through GitHub discussions or comments on the relevant PR or issue.\r\n\r\n"
        },
        "Deployment_resources.md": {
            "code": "# Deployment Resources\r\nThis file provides a collection of resources for deploying the SnapScribe web application. Below are various options and guides for deploying your project on different platforms.\r\n\r\n## GitHub Pages\r\n- [GitHub Pages](https://pages.github.com/) - Official documentation for deploying static websites directly from your GitHub repository to GitHub Pages. It provides step-by-step instructions to set up and configure your deployment.\r\n\r\n- [Deploying a React App to GitHub Pages](https://create-react-app.dev/docs/deployment/#github-pages) - A guide that demonstrates how to deploy a React application to GitHub Pages using the gh-pages package and the npm run deploy command.\r\n\r\n## Netlify\r\n- [Netlify](https://docs.netlify.com/) - A popular platform for deploying static websites, providing features like continuous deployment, custom domain support, and built-in CDN. Their official documentation provides detailed instructions on setting up and deploying your project.\r\n\r\n- [Deploying a React App to Netlify](https://create-react-app.dev/docs/deployment/#netlify) - A step-by-step guide on deploying a React application to Netlify. It covers configuring build settings, setting up environment variables, and connecting your repository.\r\n\r\n## PythonAnywhere\r\n- [PythonAnywhere](https://www.pythonanywhere.com/) - A cloud-based Python hosting service that allows you to deploy and run web applications. Their official documentation provides instructions for deploying Python web apps and configuring the necessary settings.\r\n\r\n- [Deploying a Flask App on PythonAnywhere](https://help.pythonanywhere.com/pages/Flask/) - A detailed tutorial on deploying a Flask application on PythonAnywhere. It covers setting up the virtual environment, configuring the web server, and deploying the application."
        },
        "Frontend_resources.md": {
            "code": "# Frontend Development Resources\r\nThe frontend for SnapScribe is meant to be a React.js web app styles with Tailwind CSS.  \r\nFor this part of the project, the most useful resource will probably be the documentations of the respective frameworks, along with a few YouTube guides here and there. The Art of Googling is *ESSENTIAL* for this part of the project specially. StackOverflow, YouTube, Reddit are your best friends.\r\n\r\nFirst you will have to come up with a rough overview of a design for the website. What kind of components are necessary, what pages will contain what, although a brief guideline for that will be provided soon. Styling will be totally upto the contributors.\r\n\r\n## Design and UI Inspiration\r\n- [Dribbble](https://dribbble.com/) - An online community of designers showcasing their work. Explore the platform for UI/UX inspiration, trends, and design ideas.\r\n- [Behance](https://www.behance.net/) - Discover creative projects and portfolios from designers around the world. Explore different design styles and layouts.\r\n\r\n## Frontend Frameworks and Libraries\r\n- [React.js](https://react.dev/learn) - A popular JavaScript library for building user interfaces. It offers a component-based approach and efficient rendering for creating interactive UIs.\r\n\r\n- [Tailwind CSS](https://tailwindcss.com/docs/installation) - A utility-first CSS framework that allows you to rapidly build custom user interfaces. It provides a set of pre-defined CSS classes to streamline styling.\r\n\r\n- [React Router](https://reactrouter.com/en/main) - For creating multi-page web apps in React.\r\n\r\n## Tutorials, YouTube Playlists\r\n- FreeCodeCamp - An online learning platform with interactive tutorials and projects for frontend development. It covers HTML, CSS, JavaScript, and popular frontend frameworks. Look at their website as well as YouTube channel for guided tutorials\r\n\r\n- Codecademy - Good place for learning Javascript, JSX and start with React.js. Before learning React.js, you must be comfortable with the basics of Javascript and JSX.\r\n\r\n- [Javascript Mastery](https://www.youtube.com/@javascriptmastery) - Great guided projects and will get you up and running with React very quick! Highly recommended. They describe a great project structure at the beginning of every video which would help to keep modularity of React.\r\n\r\n- [Net Ninja](https://www.youtube.com/@NetNinja) - Great playlists on more technical aspects of React like Form handling, submission handling, etc.\r\n\r\n- [React Tutorial by Net Ninja](https://www.youtube.com/playlist?list=PL4cUxeGkcC9gZD-Tvwfod2gaISzfRiP9d) - The definitive playlist for Form handling and explanation of a lot of parts in bite sized quick videos.\r\n\r\n- [React Router Example](https://youtu.be/xMNhDf5-hvk) - Example of how to create a multi page web app if you need it.\r\n\r\n## UI Component Libraries\r\n- [Material-UI](https://mui.com/material-ui/getting-started/overview/) - A popular React component library that follows Google's Material Design guidelines. It provides a wide range of pre-built UI components and styles.\r\n\r\n- [Chakra UI](https://chakra-ui.com/getting-started) - A simple and customizable UI component library for React. It focuses on accessibility, developer experience, and easy theming."
        }
    }
}