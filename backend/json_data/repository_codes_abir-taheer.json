{
    "2048": {
        "README.md": {
            "code": "# APCS - Final (2048)\r\nBy: Michael Borczuk, Khizer Shahid and Abir Taheer\r\n\r\n## Steps for running the app\r\n\r\n1. Download the repository either as a .zip file from GitHub or clone it with git\r\n    ```commandline\r\n    git clone https://github.com/abir-taheer/2048.git\r\n    ```\r\n2. change into the code source folder\r\n    ```commandline\r\n    cd src\r\n    ```\r\n3. Compile the Main.java class\r\n    ```commandline\r\n    javac Main.java\r\n    ```\r\n4. Run the Main.class file now:\r\n    ```commandline\r\n    java Main\r\n    ```\r\n"
        },
        "Main.java": {
            "code": "import info.gridworld.grid.UnboundedGrid;\nimport tiles.Tile;\nimport tiles.Tile2;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tWorld world = new World();\n\t\tworld.setup();\n\t\tworld.show();\n\t}\n}\n"
        },
        "World.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2005-2006 Cay S. Horstmann (http://horstmann.com)\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Cay Horstmann\n */\n\npackage info.gridworld.world;\n\nimport info.gridworld.grid.BoundedGrid;\nimport info.gridworld.grid.Grid;\nimport info.gridworld.grid.Location;\nimport info.gridworld.gui.WorldFrame;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport javax.swing.*;\n\n/**\n * A <code>World</code> is the mediator between a grid and the GridWorld GUI.\n * <br />\n * This class is not tested on the AP CS A and AB exams.\n */\npublic class World<T> {\n\tprivate static final int DEFAULT_ROWS = 4;\n\tprivate static final int DEFAULT_COLS = 4;\n\tprivate static final Random generator = new Random();\n\tprivate Grid<T> gr;\n\tprivate final Set<String> occupantClassNames;\n\tprivate final Set<String> gridClassNames;\n\tprivate String message;\n\tprivate JFrame frame;\n\n\tpublic World() {\n\t\tthis(new BoundedGrid<T>(DEFAULT_ROWS, DEFAULT_COLS));\n\t\tmessage = null;\n\t}\n\n\tpublic World(Grid<T> g) {\n\t\tgr = g;\n\t\tgridClassNames = new TreeSet<String>();\n\t\toccupantClassNames = new TreeSet<String>();\n\t\taddGridClass(\"info.gridworld.grid.BoundedGrid\");\n\t\taddGridClass(\"info.gridworld.grid.UnboundedGrid\");\n\t}\n\n\t/**\n\t * Constructs and shows a frame for this world.\n\t */\n\tpublic void show() {\n\t\tif (frame == null) {\n\t\t\tframe = new WorldFrame<T>(this);\n\t\t\tframe.setVisible(true);\n\t\t} else frame.repaint();\n\t}\n\n\tpublic void showDialog(String message) {\n\t\tJOptionPane.showMessageDialog(frame, message);\n\t}\n\n\tpublic boolean confirmDialog(String title, String message) {\n\t\treturn (\n\t\t\tJOptionPane.showConfirmDialog(\n\t\t\t\tframe,\n\t\t\t\tmessage,\n\t\t\t\ttitle,\n\t\t\t\tJOptionPane.YES_NO_OPTION\n\t\t\t) ==\n\t\t\t0\n\t\t);\n\t}\n\n\t/**\n\t * Gets the grid managed by this world.\n\t *\n\t * @return the grid\n\t */\n\tpublic Grid<T> getGrid() {\n\t\treturn gr;\n\t}\n\n\t/**\n\t * Sets the grid managed by this world.\n\t *\n\t * @param newGrid the new grid\n\t */\n\tpublic void setGrid(Grid<T> newGrid) {\n\t\tgr = newGrid;\n\t\trepaint();\n\t}\n\n\t/**\n\t * Gets the message to be displayed in the world frame above the grid.\n\t *\n\t * @return the message\n\t */\n\tpublic String getMessage() {\n\t\treturn message;\n\t}\n\n\t/**\n\t * Sets the message to be displayed in the world frame above the grid.\n\t *\n\t * @param newMessage the new message\n\t */\n\tpublic void setMessage(String newMessage) {\n\t\tmessage = newMessage;\n\t\trepaint();\n\t}\n\n\t/**\n\t * This method is called when the user clicks on the step button, or when\n\t * run mode has been activated by clicking the run button.\n\t */\n\tpublic void step() {\n\t\trepaint();\n\t}\n\n\t/**\n\t * This method is called when the user clicks on a location in the\n\t * WorldFrame.\n\t *\n\t * @param loc the grid location that the user selected\n\t * @return true if the world consumes the click, or false if the GUI should\n\t * invoke the Location->Edit menu action\n\t */\n\tpublic boolean locationClicked(Location loc) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * This method is called when a key was pressed. Override it if your world wants\n\t * to consume some keys (e.g. \"1\"-\"9\" for Sudoku). Don't consume plain arrow keys,\n\t * or the user loses the ability to move the selection square with the keyboard.\n\t *\n\t * @param description the string describing the key, in\n\t *                    <a href=\"http://java.sun.com/javase/6/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)\">this format</a>.\n\t * @param loc         the selected location in the grid at the time the key was pressed\n\t * @return true if the world consumes the key press, false if the GUI should\n\t * consume it.\n\t */\n\tpublic boolean keyPressed(String description, Location loc) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Gets a random empty location in this world.\n\t *\n\t * @return a random empty location\n\t */\n\tpublic Location getRandomEmptyLocation() {\n\t\tGrid<T> gr = getGrid();\n\t\tint rows = gr.getNumRows();\n\t\tint cols = gr.getNumCols();\n\n\t\tif (rows > 0 && cols > 0) { // bounded grid\n\t\t\t// get all valid empty locations and pick one at random\n\t\t\tArrayList<Location> emptyLocs = new ArrayList<Location>();\n\t\t\tfor (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) {\n\t\t\t\tLocation loc = new Location(i, j);\n\t\t\t\tif (gr.isValid(loc) && gr.get(loc) == null) emptyLocs.add(loc);\n\t\t\t}\n\t\t\tif (emptyLocs.size() == 0) return null;\n\t\t\tint r = generator.nextInt(emptyLocs.size());\n\t\t\treturn emptyLocs.get(r);\n\t\t} else { // unbounded grid\n\t\t\twhile (true) {\n\t\t\t\t// keep generating a random location until an empty one is found\n\t\t\t\tint r;\n\t\t\t\tif (rows < 0) r =\n\t\t\t\t\t(int) (DEFAULT_ROWS * generator.nextGaussian()); else r =\n\t\t\t\t\tgenerator.nextInt(rows);\n\t\t\t\tint c;\n\t\t\t\tif (cols < 0) c =\n\t\t\t\t\t(int) (DEFAULT_COLS * generator.nextGaussian()); else c =\n\t\t\t\t\tgenerator.nextInt(cols);\n\t\t\t\tLocation loc = new Location(r, c);\n\t\t\t\tif (gr.isValid(loc) && gr.get(loc) == null) return loc;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds an occupant at a given location.\n\t *\n\t * @param loc      the location\n\t * @param occupant the occupant to add\n\t */\n\tpublic void add(Location loc, T occupant) {\n\t\tgetGrid().put(loc, occupant);\n\t\trepaint();\n\t}\n\n\t/**\n\t * Removes an occupant from a given location.\n\t *\n\t * @param loc the location\n\t * @return the removed occupant, or null if the location was empty\n\t */\n\tpublic T remove(Location loc) {\n\t\tT r = getGrid().remove(loc);\n\t\trepaint();\n\t\treturn r;\n\t}\n\n\t/**\n\t * Adds a class to be shown in the \"Set grid\" menu.\n\t *\n\t * @param className the name of the grid class\n\t */\n\tpublic void addGridClass(String className) {\n\t\tgridClassNames.add(className);\n\t}\n\n\t/**\n\t * Adds a class to be shown when clicking on an empty location.\n\t *\n\t * @param className the name of the occupant class\n\t */\n\tpublic void addOccupantClass(String className) {\n\t\toccupantClassNames.add(className);\n\t}\n\n\t/**\n\t * Gets a set of grid classes that should be used by the world frame for\n\t * this world.\n\t *\n\t * @return the set of grid class names\n\t */\n\tpublic Set<String> getGridClasses() {\n\t\treturn gridClassNames;\n\t}\n\n\t/**\n\t * Gets a set of occupant classes that should be used by the world frame for\n\t * this world.\n\t *\n\t * @return the set of occupant class names\n\t */\n\tpublic Set<String> getOccupantClasses() {\n\t\treturn occupantClassNames;\n\t}\n\n\tprivate void repaint() {\n\t\tif (frame != null) frame.repaint();\n\t}\n\n\t/**\n\t * Returns a string that shows the positions of the grid occupants.\n\t */\n\tpublic String toString() {\n\t\tString s = \"\";\n\t\tGrid<?> gr = getGrid();\n\n\t\tint rmin = 0;\n\t\tint rmax = gr.getNumRows() - 1;\n\t\tint cmin = 0;\n\t\tint cmax = gr.getNumCols() - 1;\n\t\tif (rmax < 0 || cmax < 0) { // unbounded grid\n\t\t\tfor (Location loc : gr.getOccupiedLocations()) {\n\t\t\t\tint r = loc.getRow();\n\t\t\t\tint c = loc.getCol();\n\t\t\t\tif (r < rmin) rmin = r;\n\t\t\t\tif (r > rmax) rmax = r;\n\t\t\t\tif (c < cmin) cmin = c;\n\t\t\t\tif (c > cmax) cmax = c;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = rmin; i <= rmax; i++) {\n\t\t\tfor (int j = cmin; j < cmax; j++) {\n\t\t\t\tObject obj = gr.get(new Location(i, j));\n\t\t\t\tif (obj == null) s += \" \"; else s +=\n\t\t\t\t\tobj.toString().substring(0, 1);\n\t\t\t}\n\t\t\ts += \"\\n\";\n\t\t}\n\t\treturn s;\n\t}\n}\n"
        },
        "Actor.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2005-2006 Cay S. Horstmann (http://horstmann.com)\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Cay Horstmann\n */\n\npackage info.gridworld.actor;\n\nimport info.gridworld.grid.Grid;\nimport info.gridworld.grid.Location;\nimport java.awt.*;\n\n/**\n * An <code>Actor</code> is an entity with a color and direction that can act.\n * <br />\n * The API of this class is testable on the AP CS A and AB exams.\n */\npublic class Actor {\n\tprivate Grid<Actor> grid;\n\tprivate Location location;\n\tprivate int direction;\n\tprivate Color color;\n\n\t/**\n\t * Constructs a blue actor that is facing north.\n\t */\n\tpublic Actor() {\n\t\tcolor = Color.BLUE;\n\t\tdirection = Location.NORTH;\n\t\tgrid = null;\n\t\tlocation = null;\n\t}\n\n\t/**\n\t * Gets the color of this actor.\n\t *\n\t * @return the color of this actor\n\t */\n\tpublic Color getColor() {\n\t\treturn color;\n\t}\n\n\t/**\n\t * Sets the color of this actor.\n\t *\n\t * @param newColor the new color\n\t */\n\tpublic void setColor(Color newColor) {\n\t\tcolor = newColor;\n\t}\n\n\t/**\n\t * Gets the current direction of this actor.\n\t *\n\t * @return the direction of this actor, an angle between 0 and 359 degrees\n\t */\n\tpublic int getDirection() {\n\t\treturn direction;\n\t}\n\n\t/**\n\t * Sets the current direction of this actor.\n\t *\n\t * @param newDirection the new direction. The direction of this actor is set\n\t *                     to the angle between 0 and 359 degrees that is equivalent to\n\t *                     <code>newDirection</code>.\n\t */\n\tpublic void setDirection(int newDirection) {\n\t\tdirection = newDirection % Location.FULL_CIRCLE;\n\t\tif (direction < 0) direction += Location.FULL_CIRCLE;\n\t}\n\n\t/**\n\t * Gets the grid in which this actor is located.\n\t *\n\t * @return the grid of this actor, or <code>null</code> if this actor is\n\t * not contained in a grid\n\t */\n\tpublic Grid<Actor> getGrid() {\n\t\treturn grid;\n\t}\n\n\t/**\n\t * Gets the location of this actor.\n\t *\n\t * @return the location of this actor, or <code>null</code> if this actor is\n\t * not contained in a grid\n\t */\n\tpublic Location getLocation() {\n\t\treturn location;\n\t}\n\n\t/**\n\t * Puts this actor into a grid. If there is another actor at the given\n\t * location, it is removed. <br />\n\t * Precondition: (1) This actor is not contained in a grid (2)\n\t * <code>loc</code> is valid in <code>gr</code>\n\t *\n\t * @param gr  the grid into which this actor should be placed\n\t * @param loc the location into which the actor should be placed\n\t */\n\tpublic void putSelfInGrid(Grid<Actor> gr, Location loc) {\n\t\tif (grid != null) throw new IllegalStateException(\n\t\t\t\"This actor is already contained in a grid.\"\n\t\t);\n\n\t\tActor actor = gr.get(loc);\n\t\tif (actor != null) actor.removeSelfFromGrid();\n\t\tgr.put(loc, this);\n\t\tgrid = gr;\n\t\tlocation = loc;\n\t}\n\n\t/**\n\t * Removes this actor from its grid. <br />\n\t * Precondition: This actor is contained in a grid\n\t */\n\tpublic void removeSelfFromGrid() {\n\t\tif (grid == null) throw new IllegalStateException(\n\t\t\t\"This actor is not contained in a grid.\"\n\t\t);\n\t\tif (grid.get(location) != this) throw new IllegalStateException(\n\t\t\t\"The grid contains a different actor at location \" + location + \".\"\n\t\t);\n\n\t\tgrid.remove(location);\n\t\tgrid = null;\n\t\tlocation = null;\n\t}\n\n\t/**\n\t * Moves this actor to a new location. If there is another actor at the\n\t * given location, it is removed. <br />\n\t * Precondition: (1) This actor is contained in a grid (2)\n\t * <code>newLocation</code> is valid in the grid of this actor\n\t *\n\t * @param newLocation the new location\n\t */\n\tpublic void moveTo(Location newLocation) {\n\t\tif (grid == null) throw new IllegalStateException(\n\t\t\t\"This actor is not in a grid.\"\n\t\t);\n\t\tif (grid.get(location) != this) throw new IllegalStateException(\n\t\t\t\"The grid contains a different actor at location \" + location + \".\"\n\t\t);\n\t\tif (!grid.isValid(newLocation)) throw new IllegalArgumentException(\n\t\t\t\"Location \" + newLocation + \" is not valid.\"\n\t\t);\n\n\t\tif (newLocation.equals(location)) return;\n\t\tgrid.remove(location);\n\t\tActor other = grid.get(newLocation);\n\t\tif (other != null) other.removeSelfFromGrid();\n\t\tlocation = newLocation;\n\t\tgrid.put(location, this);\n\t}\n\n\t/**\n\t * Reverses the direction of this actor. Override this method in subclasses\n\t * of <code>Actor</code> to define types of actors with different behavior\n\t */\n\tpublic void act() {\n\t\tsetDirection(getDirection() + Location.HALF_CIRCLE);\n\t}\n\n\t/**\n\t * Creates a string that describes this actor.\n\t *\n\t * @return a string with the location, direction, and color of this actor\n\t */\n\tpublic String toString() {\n\t\treturn (\n\t\t\tgetClass().getName() +\n\t\t\t\"[location=\" +\n\t\t\tlocation +\n\t\t\t\",direction=\" +\n\t\t\tdirection +\n\t\t\t\",color=\" +\n\t\t\tcolor +\n\t\t\t\"]\"\n\t\t);\n\t}\n}\n"
        },
        "ActorWorld.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2005-2006 Cay S. Horstmann (http://horstmann.com)\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Cay Horstmann\n */\n\npackage info.gridworld.actor;\n\nimport info.gridworld.grid.Grid;\nimport info.gridworld.grid.Location;\nimport info.gridworld.world.World;\nimport java.util.ArrayList;\n\n/**\n * An <code>ActorWorld</code> is occupied by actors. <br />\n * This class is not tested on the AP CS A and AB exams.\n */\n\npublic class ActorWorld extends World<Actor> {\n\tprivate static final String DEFAULT_MESSAGE =\n\t\t\"Use the arrow keys on your keyboard to play.\";\n\n\t/**\n\t * Constructs an actor world with a default grid.\n\t */\n\tpublic ActorWorld() {}\n\n\t/**\n\t * Constructs an actor world with a given grid.\n\t *\n\t * @param grid the grid for this world.\n\t */\n\tpublic ActorWorld(Grid<Actor> grid) {\n\t\tsuper(grid);\n\t}\n\n\tpublic void show() {\n\t\tif (getMessage() == null) setMessage(DEFAULT_MESSAGE);\n\t\tsuper.show();\n\t}\n\n\tpublic void step() {\n\t\tGrid<Actor> gr = getGrid();\n\t\tArrayList<Actor> actors = new ArrayList<Actor>();\n\t\tfor (Location loc : gr.getOccupiedLocations()) actors.add(gr.get(loc));\n\n\t\tfor (Actor a : actors) {\n\t\t\t// only act if another actor hasn't removed a\n\t\t\tif (a.getGrid() == gr) a.act();\n\t\t}\n\t}\n\n\t/**\n\t * Adds an actor to this world at a given location.\n\t *\n\t * @param loc      the location at which to add the actor\n\t * @param occupant the actor to add\n\t */\n\tpublic void add(Location loc, Actor occupant) {\n\t\toccupant.putSelfInGrid(getGrid(), loc);\n\t}\n\n\t/**\n\t * Adds an occupant at a random empty location.\n\t *\n\t * @param occupant the occupant to add\n\t */\n\tpublic void add(Actor occupant) {\n\t\tLocation loc = getRandomEmptyLocation();\n\t\tif (loc != null) add(loc, occupant);\n\t}\n\n\t/**\n\t * Removes an actor from this world.\n\t *\n\t * @param loc the location from which to remove an actor\n\t * @return the removed actor, or null if there was no actor at the given\n\t * location.\n\t */\n\tpublic Actor remove(Location loc) {\n\t\tActor occupant = getGrid().get(loc);\n\t\tif (occupant == null) return null;\n\t\toccupant.removeSelfFromGrid();\n\t\treturn occupant;\n\t}\n}\n"
        },
        "AbstractGrid.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2005-2006 Cay S. Horstmann (http://horstmann.com)\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Cay Horstmann\n */\n\npackage info.gridworld.grid;\n\nimport java.util.ArrayList;\n\n/**\n * <code>AbstractGrid</code> contains the methods that are common to grid\n * implementations. <br />\n * The implementation of this class is testable on the AP CS AB exam.\n */\npublic abstract class AbstractGrid<E> implements Grid<E> {\n\n\tpublic ArrayList<E> getNeighbors(Location loc) {\n\t\tArrayList<E> neighbors = new ArrayList<E>();\n\t\tfor (Location neighborLoc : getOccupiedAdjacentLocations(\n\t\t\tloc\n\t\t)) neighbors.add(get(neighborLoc));\n\t\treturn neighbors;\n\t}\n\n\tpublic ArrayList<Location> getValidAdjacentLocations(Location loc) {\n\t\tArrayList<Location> locs = new ArrayList<Location>();\n\n\t\tint d = Location.NORTH;\n\t\tfor (int i = 0; i < Location.FULL_CIRCLE / Location.HALF_RIGHT; i++) {\n\t\t\tLocation neighborLoc = loc.getAdjacentLocation(d);\n\t\t\tif (isValid(neighborLoc)) locs.add(neighborLoc);\n\t\t\td = d + Location.HALF_RIGHT;\n\t\t}\n\t\treturn locs;\n\t}\n\n\tpublic ArrayList<Location> getEmptyAdjacentLocations(Location loc) {\n\t\tArrayList<Location> locs = new ArrayList<Location>();\n\t\tfor (Location neighborLoc : getValidAdjacentLocations(loc)) {\n\t\t\tif (get(neighborLoc) == null) locs.add(neighborLoc);\n\t\t}\n\t\treturn locs;\n\t}\n\n\tpublic ArrayList<Location> getOccupiedAdjacentLocations(Location loc) {\n\t\tArrayList<Location> locs = new ArrayList<Location>();\n\t\tfor (Location neighborLoc : getValidAdjacentLocations(loc)) {\n\t\t\tif (get(neighborLoc) != null) locs.add(neighborLoc);\n\t\t}\n\t\treturn locs;\n\t}\n\n\t/**\n\t * Creates a string that describes this grid.\n\t *\n\t * @return a string with descriptions of all objects in this grid (not\n\t * necessarily in any particular order), in the format {loc=obj, loc=obj,\n\t * ...}\n\t */\n\tpublic String toString() {\n\t\tString s = \"{\";\n\t\tfor (Location loc : getOccupiedLocations()) {\n\t\t\tif (s.length() > 1) s += \", \";\n\t\t\ts += loc + \"=\" + get(loc);\n\t\t}\n\t\treturn s + \"}\";\n\t}\n}\n"
        },
        "BoundedGrid.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2002-2006 College Entrance Examination Board\n * (http://www.collegeboard.com).\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Alyce Brady\n * @author APCS Development Committee\n * @author Cay Horstmann\n */\n\npackage info.gridworld.grid;\n\nimport java.util.ArrayList;\n\n/**\n * A <code>BoundedGrid</code> is a rectangular grid with a finite number of\n * rows and columns. <br />\n * The implementation of this class is testable on the AP CS AB exam.\n */\npublic class BoundedGrid<E> extends AbstractGrid<E> {\n\tprivate final Object[][] occupantArray; // the array storing the grid elements\n\n\t/**\n\t * Constructs an empty bounded grid with the given dimensions.\n\t * (Precondition: <code>rows > 0</code> and <code>cols > 0</code>.)\n\t *\n\t * @param rows number of rows in BoundedGrid\n\t * @param cols number of columns in BoundedGrid\n\t */\n\tpublic BoundedGrid(int rows, int cols) {\n\t\tif (rows <= 0) throw new IllegalArgumentException(\"rows <= 0\");\n\t\tif (cols <= 0) throw new IllegalArgumentException(\"cols <= 0\");\n\t\toccupantArray = new Object[rows][cols];\n\t}\n\n\tpublic int getNumRows() {\n\t\treturn occupantArray.length;\n\t}\n\n\tpublic int getNumCols() {\n\t\t// Note: according to the constructor precondition, numRows() > 0, so\n\t\t// theGrid[0] is non-null.\n\t\treturn occupantArray[0].length;\n\t}\n\n\tpublic boolean isValid(Location loc) {\n\t\treturn (\n\t\t\t0 <= loc.getRow() &&\n\t\t\tloc.getRow() < getNumRows() &&\n\t\t\t0 <= loc.getCol() &&\n\t\t\tloc.getCol() < getNumCols()\n\t\t);\n\t}\n\n\tpublic ArrayList<Location> getOccupiedLocations() {\n\t\tArrayList<Location> theLocations = new ArrayList<Location>();\n\n\t\t// Look at all grid locations.\n\t\tfor (int r = 0; r < getNumRows(); r++) {\n\t\t\tfor (int c = 0; c < getNumCols(); c++) {\n\t\t\t\t// If there's an object at this location, put it in the array.\n\t\t\t\tLocation loc = new Location(r, c);\n\t\t\t\tif (get(loc) != null) theLocations.add(loc);\n\t\t\t}\n\t\t}\n\n\t\treturn theLocations;\n\t}\n\n\tpublic E get(Location loc) {\n\t\tif (!isValid(loc)) throw new IllegalArgumentException(\n\t\t\t\"Location \" + loc + \" is not valid\"\n\t\t);\n\t\treturn (E) occupantArray[loc.getRow()][loc.getCol()]; // unavoidable warning\n\t}\n\n\tpublic E put(Location loc, E obj) {\n\t\tif (!isValid(loc)) throw new IllegalArgumentException(\n\t\t\t\"Location \" + loc + \" is not valid\"\n\t\t);\n\t\tif (obj == null) throw new NullPointerException(\"obj == null\");\n\n\t\t// Add the object to the grid.\n\t\tE oldOccupant = get(loc);\n\t\toccupantArray[loc.getRow()][loc.getCol()] = obj;\n\t\treturn oldOccupant;\n\t}\n\n\tpublic E remove(Location loc) {\n\t\tif (!isValid(loc)) throw new IllegalArgumentException(\n\t\t\t\"Location \" + loc + \" is not valid\"\n\t\t);\n\n\t\t// Remove the object from the grid.\n\t\tE r = get(loc);\n\t\toccupantArray[loc.getRow()][loc.getCol()] = null;\n\t\treturn r;\n\t}\n}\n"
        },
        "Grid.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2002-2006 College Entrance Examination Board\n * (http://www.collegeboard.com).\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Alyce Brady\n * @author APCS Development Committee\n * @author Cay Horstmann\n */\n\npackage info.gridworld.grid;\n\nimport java.util.ArrayList;\n\n/**\n * <code>Grid</code> provides an interface for a two-dimensional, grid-like\n * environment containing arbitrary objects. <br />\n * This interface is testable on the AP CS A and AB exams.\n */\npublic interface Grid<E> {\n\t/**\n\t * Returns the number of rows in this grid.\n\t *\n\t * @return the number of rows, or -1 if this grid is unbounded\n\t */\n\tint getNumRows();\n\n\t/**\n\t * Returns the number of columns in this grid.\n\t *\n\t * @return the number of columns, or -1 if this grid is unbounded\n\t */\n\tint getNumCols();\n\n\t/**\n\t * Checks whether a location is valid in this grid. <br />\n\t * Precondition: <code>loc</code> is not <code>null</code>\n\t *\n\t * @param loc the location to check\n\t * @return <code>true</code> if <code>loc</code> is valid in this grid,\n\t * <code>false</code> otherwise\n\t */\n\tboolean isValid(Location loc);\n\n\t/**\n\t * Puts an object at a given location in this grid. <br />\n\t * Precondition: (1) <code>loc</code> is valid in this grid (2)\n\t * <code>obj</code> is not <code>null</code>\n\t *\n\t * @param loc the location at which to put the object\n\t * @param obj the new object to be added\n\t * @return the object previously at <code>loc</code> (or <code>null</code>\n\t * if the location was previously unoccupied)\n\t */\n\tE put(Location loc, E obj);\n\n\t/**\n\t * Removes the object at a given location from this grid. <br />\n\t * Precondition: <code>loc</code> is valid in this grid\n\t *\n\t * @param loc the location of the object that is to be removed\n\t * @return the object that was removed (or <code>null<code> if the location\n\t * is unoccupied)\n\t */\n\tE remove(Location loc);\n\n\t/**\n\t * Returns the object at a given location in this grid. <br />\n\t * Precondition: <code>loc</code> is valid in this grid\n\t *\n\t * @param loc a location in this grid\n\t * @return the object at location <code>loc</code> (or <code>null<code>\n\t * if the location is unoccupied)\n\t */\n\tE get(Location loc);\n\n\t/**\n\t * Gets the locations in this grid that contain objects.\n\t *\n\t * @return an array list of all occupied locations in this grid\n\t */\n\tArrayList<Location> getOccupiedLocations();\n\n\t/**\n\t * Gets the valid locations adjacent to a given location in all eight\n\t * compass directions (north, northeast, east, southeast, south, southwest,\n\t * west, and northwest). <br />\n\t * Precondition: <code>loc</code> is valid in this grid\n\t *\n\t * @param loc a location in this grid\n\t * @return an array list of the valid locations adjacent to <code>loc</code>\n\t * in this grid\n\t */\n\tArrayList<Location> getValidAdjacentLocations(Location loc);\n\n\t/**\n\t * Gets the valid empty locations adjacent to a given location in all eight\n\t * compass directions (north, northeast, east, southeast, south, southwest,\n\t * west, and northwest). <br />\n\t * Precondition: <code>loc</code> is valid in this grid\n\t *\n\t * @param loc a location in this grid\n\t * @return an array list of the valid empty locations adjacent to\n\t * <code>loc</code> in this grid\n\t */\n\tArrayList<Location> getEmptyAdjacentLocations(Location loc);\n\n\t/**\n\t * Gets the valid occupied locations adjacent to a given location in all\n\t * eight compass directions (north, northeast, east, southeast, south,\n\t * southwest, west, and northwest). <br />\n\t * Precondition: <code>loc</code> is valid in this grid\n\t *\n\t * @param loc a location in this grid\n\t * @return an array list of the valid occupied locations adjacent to\n\t * <code>loc</code>\u00a0in this grid\n\t */\n\tArrayList<Location> getOccupiedAdjacentLocations(Location loc);\n\n\t/**\n\t * Gets the neighboring occupants in all eight compass directions (north,\n\t * northeast, east, southeast, south, southwest, west, and northwest).\n\t * <br />\n\t * Precondition: <code>loc</code> is valid in this grid\n\t *\n\t * @param loc a location in this grid\n\t * @return returns an array list of the objects in the occupied locations\n\t * adjacent to <code>loc</code> in this grid\n\t */\n\tArrayList<E> getNeighbors(Location loc);\n}\n"
        },
        "Location.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2002-2006 College Entrance Examination Board\n * (http://www.collegeboard.com).\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Alyce Brady\n * @author Chris Nevison\n * @author APCS Development Committee\n * @author Cay Horstmann\n */\n\npackage info.gridworld.grid;\n\n/**\n * A <code>Location</code> object represents the row and column of a location\n * in a two-dimensional grid. <br />\n * The API of this class is testable on the AP CS A and AB exams.\n */\npublic class Location implements Comparable {\n\t/**\n\t * The turn angle for turning 90 degrees to the left.\n\t */\n\tpublic static final int LEFT = -90;\n\t/**\n\t * The turn angle for turning 90 degrees to the right.\n\t */\n\tpublic static final int RIGHT = 90;\n\t/**\n\t * The turn angle for turning 45 degrees to the left.\n\t */\n\tpublic static final int HALF_LEFT = -45;\n\t/**\n\t * The turn angle for turning 45 degrees to the right.\n\t */\n\tpublic static final int HALF_RIGHT = 45;\n\t/**\n\t * The turn angle for turning a full circle.\n\t */\n\tpublic static final int FULL_CIRCLE = 360;\n\t/**\n\t * The turn angle for turning a half circle.\n\t */\n\tpublic static final int HALF_CIRCLE = 180;\n\t/**\n\t * The turn angle for making no turn.\n\t */\n\tpublic static final int AHEAD = 0;\n\t/**\n\t * The compass direction for north.\n\t */\n\tpublic static final int NORTH = 0;\n\t/**\n\t * The compass direction for northeast.\n\t */\n\tpublic static final int NORTHEAST = 45;\n\t/**\n\t * The compass direction for east.\n\t */\n\tpublic static final int EAST = 90;\n\t/**\n\t * The compass direction for southeast.\n\t */\n\tpublic static final int SOUTHEAST = 135;\n\t/**\n\t * The compass direction for south.\n\t */\n\tpublic static final int SOUTH = 180;\n\t/**\n\t * The compass direction for southwest.\n\t */\n\tpublic static final int SOUTHWEST = 225;\n\t/**\n\t * The compass direction for west.\n\t */\n\tpublic static final int WEST = 270;\n\t/**\n\t * The compass direction for northwest.\n\t */\n\tpublic static final int NORTHWEST = 315;\n\tprivate final int row; // row location in grid\n\tprivate final int col; // column location in grid\n\n\t/**\n\t * Constructs a location with given row and column coordinates.\n\t *\n\t * @param r the row\n\t * @param c the column\n\t */\n\tpublic Location(int r, int c) {\n\t\trow = r;\n\t\tcol = c;\n\t}\n\n\t/**\n\t * Gets the row coordinate.\n\t *\n\t * @return the row of this location\n\t */\n\tpublic int getRow() {\n\t\treturn row;\n\t}\n\n\t/**\n\t * Gets the column coordinate.\n\t *\n\t * @return the column of this location\n\t */\n\tpublic int getCol() {\n\t\treturn col;\n\t}\n\n\t/**\n\t * Gets the adjacent location in any one of the eight compass directions.\n\t *\n\t * @param direction the direction in which to find a neighbor location\n\t * @return the adjacent location in the direction that is closest to\n\t * <tt>direction</tt>\n\t */\n\tpublic Location getAdjacentLocation(int direction) {\n\t\t// reduce mod 360 and round to closest multiple of 45\n\t\tint adjustedDirection = (direction + HALF_RIGHT / 2) % FULL_CIRCLE;\n\t\tif (adjustedDirection < 0) adjustedDirection += FULL_CIRCLE;\n\n\t\tadjustedDirection = (adjustedDirection / HALF_RIGHT) * HALF_RIGHT;\n\t\tint dc = 0;\n\t\tint dr = 0;\n\t\tif (adjustedDirection == EAST) dc = 1; else if (\n\t\t\tadjustedDirection == SOUTHEAST\n\t\t) {\n\t\t\tdc = 1;\n\t\t\tdr = 1;\n\t\t} else if (adjustedDirection == SOUTH) dr = 1; else if (\n\t\t\tadjustedDirection == SOUTHWEST\n\t\t) {\n\t\t\tdc = -1;\n\t\t\tdr = 1;\n\t\t} else if (adjustedDirection == WEST) dc = -1; else if (\n\t\t\tadjustedDirection == NORTHWEST\n\t\t) {\n\t\t\tdc = -1;\n\t\t\tdr = -1;\n\t\t} else if (adjustedDirection == NORTH) dr = -1; else if (\n\t\t\tadjustedDirection == NORTHEAST\n\t\t) {\n\t\t\tdc = 1;\n\t\t\tdr = -1;\n\t\t}\n\t\treturn new Location(getRow() + dr, getCol() + dc);\n\t}\n\n\t/**\n\t * Returns the direction from this location toward another location. The\n\t * direction is rounded to the nearest compass direction.\n\t *\n\t * @param target a location that is different from this location\n\t * @return the closest compass direction from this location toward\n\t * <code>target</code>\n\t */\n\tpublic int getDirectionToward(Location target) {\n\t\tint dx = target.getCol() - getCol();\n\t\tint dy = target.getRow() - getRow();\n\t\t// y axis points opposite to mathematical orientation\n\t\tint angle = (int) Math.toDegrees(Math.atan2(-dy, dx));\n\n\t\t// mathematical angle is counterclockwise from x-axis,\n\t\t// compass angle is clockwise from y-axis\n\t\tint compassAngle = RIGHT - angle;\n\t\t// prepare for truncating division by 45 degrees\n\t\tcompassAngle += HALF_RIGHT / 2;\n\t\t// wrap negative angles\n\t\tif (compassAngle < 0) compassAngle += FULL_CIRCLE;\n\t\t// round to nearest multiple of 45\n\t\treturn (compassAngle / HALF_RIGHT) * HALF_RIGHT;\n\t}\n\n\t/**\n\t * Indicates whether some other <code>Location</code> object is \"equal to\"\n\t * this one.\n\t *\n\t * @param other the other location to test\n\t * @return <code>true</code> if <code>other</code> is a\n\t * <code>Location</code> with the same row and column as this location;\n\t * <code>false</code> otherwise\n\t */\n\tpublic boolean equals(Object other) {\n\t\tif (!(other instanceof Location)) return false;\n\n\t\tLocation otherLoc = (Location) other;\n\t\treturn getRow() == otherLoc.getRow() && getCol() == otherLoc.getCol();\n\t}\n\n\t/**\n\t * Generates a hash code.\n\t *\n\t * @return a hash code for this location\n\t */\n\tpublic int hashCode() {\n\t\treturn getRow() * 3737 + getCol();\n\t}\n\n\t/**\n\t * Compares this location to <code>other</code> for ordering. Returns a\n\t * negative integer, zero, or a positive integer as this location is less\n\t * than, equal to, or greater than <code>other</code>. Locations are\n\t * ordered in row-major order. <br />\n\t * (Precondition: <code>other</code> is a <code>Location</code> object.)\n\t *\n\t * @param other the other location to test\n\t * @return a negative integer if this location is less than\n\t * <code>other</code>, zero if the two locations are equal, or a positive\n\t * integer if this location is greater than <code>other</code>\n\t */\n\tpublic int compareTo(Object other) {\n\t\tLocation otherLoc = (Location) other;\n\t\tif (getRow() < otherLoc.getRow()) return -1;\n\t\tif (getRow() > otherLoc.getRow()) return 1;\n\t\tif (getCol() < otherLoc.getCol()) return -1;\n\t\tif (getCol() > otherLoc.getCol()) return 1;\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Creates a string that describes this location.\n\t *\n\t * @return a string with the row and column of this location, in the format\n\t * (row, col)\n\t */\n\tpublic String toString() {\n\t\treturn \"(\" + getRow() + \", \" + getCol() + \")\";\n\t}\n}\n"
        },
        "AbstractDisplay.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2002-2006 College Entrance Examination Board\n * (http://www.collegeboard.com).\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Julie Zelenski\n * @author Cay Horstmann\n */\n\npackage info.gridworld.gui;\n\nimport java.awt.*;\nimport java.beans.BeanInfo;\nimport java.beans.Introspector;\nimport java.beans.PropertyDescriptor;\nimport java.lang.reflect.Method;\n\n/**\n * This class provides common implementation code for drawing objects. It will\n * translate, scale, and rotate the graphics system as needed and then invoke\n * its abstract <code>draw</code> method. Subclasses of this abstract class\n * define <code>draw</code> to display an object in a fixed size and\n * orientation. <br />\n * This code is not tested on the AP CS A and AB exams. It contains GUI\n * implementation details that are not intended to be understood by AP CS\n * students.\n */\n\npublic abstract class AbstractDisplay implements Display {\n\n\tpublic static Object getProperty(Object obj, String propertyName) {\n\t\tif (obj == null) return null;\n\t\ttry {\n\t\t\tBeanInfo info = Introspector.getBeanInfo(obj.getClass());\n\t\t\tPropertyDescriptor[] descriptors = info.getPropertyDescriptors();\n\t\t\tfor (int i = 0; i < descriptors.length; i++) {\n\t\t\t\tif (descriptors[i].getName().equals(propertyName)) {\n\t\t\t\t\tMethod getter = descriptors[i].getReadMethod();\n\t\t\t\t\tif (getter == null) return null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn getter.invoke(obj);\n\t\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\t\tSystem.out.println(descriptors[i].getName());\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Draw the given object. Subclasses should implement this method to draw\n\t * the occupant facing North in a cell of size (1,1) centered around (0,0) on\n\t * the drawing surface. (All scaling/rotating has been done beforehand).\n\t *\n\t * @param obj  the occupant we want to draw\n\t * @param comp the component on which to draw\n\t * @param g2   the graphics context\n\t */\n\tpublic abstract void draw(Object obj, Component comp, Graphics2D g2);\n\n\t/**\n\t * Draw the given object. Scales and rotates the coordinate appropriately\n\t * then invokes the simple draw method above that is only responsible for\n\t * drawing a unit-length occupant facing North.\n\t *\n\t * @param obj  the occupant we want to draw\n\t * @param comp the component on which to draw\n\t * @param g2   the graphics context\n\t * @param rect rectangle in which to draw\n\t */\n\tpublic void draw(\n\t\tObject obj,\n\t\tComponent comp,\n\t\tGraphics2D g2,\n\t\tRectangle rect\n\t) {\n\t\tfloat scaleFactor = Math.min(rect.width, rect.height);\n\t\tg2 = (Graphics2D) g2.create();\n\n\t\t// Translate to center of the object\n\t\tg2.translate(rect.x + rect.width / 2.0, rect.y + rect.height / 2.0);\n\n\t\t// Rotate drawing surface before drawing to capture object's\n\t\t// orientation (direction).\n\t\tif (obj != null) {\n\t\t\tInteger direction = (Integer) getProperty(obj, \"direction\");\n\t\t\tint rotationInDegrees = direction == null\n\t\t\t\t? 0\n\t\t\t\t: direction.intValue();\n\t\t\tg2.rotate(Math.toRadians(rotationInDegrees));\n\t\t}\n\t\t// Scale to size of rectangle, adjust stroke back to 1-pixel wide\n\t\tg2.scale(scaleFactor, scaleFactor);\n\t\tg2.setStroke(new BasicStroke(1.0f / scaleFactor));\n\t\tdraw(obj, comp, g2);\n\t}\n}\n"
        },
        "ColorEditor.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2005-2006 Cay S. Horstmann (http://horstmann.com)\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Cay Horstmann\n */\n\npackage info.gridworld.gui;\n\nimport java.awt.*;\nimport java.beans.PropertyEditorSupport;\nimport javax.swing.*;\n\n/**\n * A property editor for the Color type. <br />\n * This code is not tested on the AP CS A and AB exams. It contains GUI\n * implementation details that are not intended to be understood by AP CS\n * students.\n */\npublic class ColorEditor extends PropertyEditorSupport {\n\tprivate static final Color[] colorValues = {\n\t\tColor.BLACK,\n\t\tColor.BLUE,\n\t\tColor.CYAN,\n\t\tColor.DARK_GRAY,\n\t\tColor.GRAY,\n\t\tColor.GREEN,\n\t\tColor.LIGHT_GRAY,\n\t\tColor.MAGENTA,\n\t\tColor.ORANGE,\n\t\tColor.PINK,\n\t\tColor.RED,\n\t\tColor.WHITE,\n\t\tColor.YELLOW,\n\t};\n\tprivate static final ColorIcon[] colorIcons;\n\n\tstatic {\n\t\tcolorIcons = new ColorIcon[colorValues.length + 1];\n\t\tcolorIcons[0] = new RandomColorIcon();\n\t\tfor (int i = 0; i < colorValues.length; i++) colorIcons[i + 1] =\n\t\t\tnew SolidColorIcon(colorValues[i]);\n\t}\n\n\tprivate final JComboBox combo;\n\n\tpublic ColorEditor() {\n\t\tcombo = new JComboBox(colorIcons);\n\t}\n\n\tpublic Object getValue() {\n\t\tColorIcon value = (ColorIcon) combo.getSelectedItem();\n\t\treturn value.getColor();\n\t}\n\n\tpublic boolean supportsCustomEditor() {\n\t\treturn true;\n\t}\n\n\tpublic Component getCustomEditor() {\n\t\tcombo.setSelectedItem(0);\n\t\treturn combo;\n\t}\n\n\tprivate interface ColorIcon extends Icon {\n\t\tint WIDTH = 120;\n\t\tint HEIGHT = 20;\n\n\t\tColor getColor();\n\t}\n\n\tprivate static class SolidColorIcon implements ColorIcon {\n\t\tprivate final Color color;\n\n\t\tpublic SolidColorIcon(Color c) {\n\t\t\tcolor = c;\n\t\t}\n\n\t\tpublic Color getColor() {\n\t\t\treturn color;\n\t\t}\n\n\t\tpublic int getIconWidth() {\n\t\t\treturn WIDTH;\n\t\t}\n\n\t\tpublic int getIconHeight() {\n\t\t\treturn HEIGHT;\n\t\t}\n\n\t\tpublic void paintIcon(Component c, Graphics g, int x, int y) {\n\t\t\tRectangle r = new Rectangle(x, y, WIDTH - 1, HEIGHT - 1);\n\t\t\tGraphics2D g2 = (Graphics2D) g;\n\t\t\tColor oldColor = g2.getColor();\n\t\t\tg2.setColor(color);\n\t\t\tg2.fill(r);\n\t\t\tg2.setColor(Color.BLACK);\n\t\t\tg2.draw(r);\n\t\t\tg2.setColor(oldColor);\n\t\t}\n\t}\n\n\tprivate static class RandomColorIcon implements ColorIcon {\n\n\t\tpublic Color getColor() {\n\t\t\treturn new Color((int) (Math.random() * 256 * 256 * 256));\n\t\t}\n\n\t\tpublic int getIconWidth() {\n\t\t\treturn WIDTH;\n\t\t}\n\n\t\tpublic int getIconHeight() {\n\t\t\treturn HEIGHT;\n\t\t}\n\n\t\tpublic void paintIcon(Component c, Graphics g, int x, int y) {\n\t\t\tRectangle r = new Rectangle(x, y, WIDTH - 1, HEIGHT - 1);\n\t\t\tGraphics2D g2 = (Graphics2D) g;\n\t\t\tColor oldColor = g2.getColor();\n\t\t\tRectangle r1 = new Rectangle(x, y, WIDTH / 4, HEIGHT - 1);\n\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\tg2.setColor(getColor());\n\t\t\t\tg2.fill(r1);\n\t\t\t\tr1.translate(WIDTH / 4, 0);\n\t\t\t}\n\t\t\tg2.setColor(Color.BLACK);\n\t\t\tg2.draw(r);\n\t\t\tg2.setColor(oldColor);\n\t\t}\n\t}\n}\n"
        },
        "DefaultDisplay.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2002-2006 College Entrance Examination Board\n * (http://www.collegeboard.com).\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Alyce Brady\n * @author Jeff Raab, Northeastern University\n * @author Cay Horstmann\n */\n\npackage info.gridworld.gui;\n\nimport java.awt.*;\nimport java.awt.font.FontRenderContext;\nimport java.awt.font.LineMetrics;\nimport java.awt.geom.Rectangle2D;\n\n/**\n * The DefaultDisplay draws the object's text property with a background color\n * given by the object's color property. <br />\n * This code is not tested on the AP CS A and AB exams. It contains GUI\n * implementation details that are not intended to be understood by AP CS\n * students.\n */\npublic class DefaultDisplay implements Display {\n\tprivate static final int MAX_TEXT_LENGTH = 8;\n\n\t/**\n\t * Draw the given object. This implementation draws a string with\n\t * a background color. The background color is the value\n\t * of the color property, or, if there is no such property\n\t * and the object is an instance of Color, the object itself.\n\t * The string is the text property, or if there is no such\n\t * property, the result of calling toString. The string\n\t * is clipped to 8 characters.\n\t *\n\t * @param obj  object we want to draw\n\t * @param comp component on which to draw\n\t * @param g2   drawing surface\n\t * @param rect rectangle in which to draw\n\t */\n\tpublic void draw(\n\t\tObject obj,\n\t\tComponent comp,\n\t\tGraphics2D g2,\n\t\tRectangle rect\n\t) {\n\t\tColor color = (Color) AbstractDisplay.getProperty(obj, \"color\");\n\t\tif (color == null && obj instanceof Color) color = (Color) obj;\n\t\tColor textColor = (Color) AbstractDisplay.getProperty(obj, \"textColor\");\n\t\tif (textColor == null) textColor = Color.BLACK;\n\t\tif (color != null) {\n\t\t\tg2.setPaint(color);\n\t\t\tg2.fill(rect);\n\n\t\t\tif (color.equals(textColor)) {\n\t\t\t\ttextColor =\n\t\t\t\t\tnew Color(\n\t\t\t\t\t\t255 - textColor.getRed(),\n\t\t\t\t\t\t255 - textColor.getGreen(),\n\t\t\t\t\t\t255 - textColor.getBlue()\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tString text = (String) AbstractDisplay.getProperty(obj, \"text\");\n\t\tif (text == null && !(obj instanceof Color)) {\n\t\t\ttext = \"\" + obj;\n\t\t}\n\t\tif (text == null) return;\n\t\tif (text.length() > MAX_TEXT_LENGTH) text =\n\t\t\ttext.substring(0, MAX_TEXT_LENGTH) + \"...\";\n\t\tpaintCenteredText(g2, text, rect, 2.5, textColor);\n\t}\n\n\t/**\n\t * Paint a horizontally and vertically-centered text string.\n\t *\n\t * @param g2         drawing surface\n\t * @param s          string to draw (centered)\n\t * @param rect       the bounding rectangle\n\t * @param fontHeight the desired height of the font. (The font will be\n\t *                   shrunk in increments of sqrt(2)/2 if the text is too large.)\n\t * @param color      the color in which to draw the text\n\t */\n\tprotected void paintCenteredText(\n\t\tGraphics2D g2,\n\t\tString s,\n\t\tRectangle rect,\n\t\tdouble fontHeight,\n\t\tColor color\n\t) {\n\t\tg2 = (Graphics2D) g2.create();\n\t\tg2.setRenderingHint(\n\t\t\tRenderingHints.KEY_ANTIALIASING,\n\t\t\tRenderingHints.VALUE_ANTIALIAS_ON\n\t\t);\n\t\tg2.setPaint(color);\n\t\tRectangle2D bounds = null;\n\t\tLineMetrics lm = null;\n\t\tboolean done = false;\n\t\t// shrink font in increments of sqrt(2)/2 until string fits\n\t\twhile (!done) {\n\t\t\tg2.setFont(\n\t\t\t\tnew Font(\n\t\t\t\t\t\"SansSerif\",\n\t\t\t\t\tFont.BOLD,\n\t\t\t\t\t(int) (fontHeight * rect.height)\n\t\t\t\t)\n\t\t\t);\n\t\t\tFontRenderContext frc = g2.getFontRenderContext();\n\t\t\tbounds = g2.getFont().getStringBounds(s, frc);\n\t\t\tif (bounds.getWidth() > rect.getWidth()) fontHeight =\n\t\t\t\tfontHeight * Math.sqrt(2) / 2; else {\n\t\t\t\tdone = true;\n\t\t\t\tlm = g2.getFont().getLineMetrics(s, frc);\n\t\t\t}\n\t\t}\n\t\tfloat centerX = rect.x + rect.width / 2;\n\t\tfloat centerY = rect.y + rect.height / 2;\n\t\tfloat leftX = centerX - (float) bounds.getWidth() / 2;\n\t\tfloat baselineY = centerY - lm.getHeight() / 2 + lm.getAscent();\n\t\tg2.drawString(s, leftX, baselineY);\n\t\tg2.dispose();\n\t}\n}\n"
        },
        "Display.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2002-2006 College Entrance Examination Board\n * (http://www.collegeboard.com).\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Alyce Brady\n * @author Cay Horstmann\n */\n\npackage info.gridworld.gui;\n\nimport java.awt.*;\n\n/**\n * The <code>Display</code> interface contains the method needed to display a\n * grid object. <br />\n * This code is not tested on the AP CS A and AB exams. It contains GUI\n * implementation details that are not intended to be understood by AP CS\n * students.\n */\npublic interface Display {\n\t/**\n\t * Method invoked to draw an object.\n\t *\n\t * @param obj  object we want to draw\n\t * @param comp component on which to draw\n\t * @param g2   drawing surface\n\t * @param rect rectangle in which to draw\n\t */\n\tvoid draw(Object obj, Component c, Graphics2D g2, Rectangle rect);\n}\n"
        },
        "DisplayMap.java": {
            "code": "/*\n * AP(r) Computer Science GridWorld Case Study:\n * Copyright(c) 2002-2006 College Entrance Examination Board\n * (http://www.collegeboard.com).\n *\n * This code is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * @author Alyce Brady\n * @author Jeff Raab, Northeastern University\n * @author Cay Horstmann\n */\n\npackage info.gridworld.gui;\n\nimport java.awt.*;\nimport java.awt.geom.AffineTransform;\nimport java.util.HashMap;\nimport javax.swing.*;\n\n/**\n * <code>DisplayMap</code> is a collection that maps grid occupant\n * classes to objects that know how to display them. <br />\n * This code is not tested on the AP CS A and AB exams. It contains GUI\n * implementation details that are not intended to be understood by AP CS\n * students.\n */\npublic class DisplayMap {\n\tprivate final HashMap<Class, Display> map = new HashMap<Class, Display>();\n\tprivate final Display defaultDisplay = new DefaultDisplay();\n\n\t/**\n\t * Associates a display object with a grid occupant class.\n\t *\n\t * @param the occupant class\n\t * @return the ImageDisplay or (classname)Display object to display it,\n\t * or null if none was found\n\t */\n\n\tprivate Display createDisplay(Class cl) {\n\t\ttry {\n\t\t\tString className = cl.getName();\n\t\t\tClass dcl = Class.forName(className + \"Display\");\n\t\t\tif (Display.class.isAssignableFrom(dcl)) {\n\t\t\t\tDisplay display = (Display) dcl.newInstance();\n\t\t\t\tmap.put(cl, display);\n\t\t\t\treturn display;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// oh well...\n\t\t}\n\n\t\ttry {\n\t\t\tImageDisplay display = new ImageDisplay(cl);\n\t\t\tmap.put(cl, display);\n\t\t\treturn display;\n\t\t} catch (Exception e) {\n\t\t\t// oh well...\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Finds a display class that knows how to display the given object.\n\t *\n\t * @param obj the object to display\n\t */\n\tpublic Display findDisplayFor(Class cl) {\n\t\t// Go up through the class hierarchy for obj and see\n\t\t// if there is a display for its class or superclasses.\n\n\t\tif (cl == Object.class) return defaultDisplay;\n\t\tDisplay display = map.get(cl);\n\t\tif (display != null) return display;\n\t\tdisplay = createDisplay(cl);\n\t\tif (display != null) {\n\t\t\tmap.put(cl, display);\n\t\t\treturn display;\n\t\t}\n\t\tdisplay = findDisplayFor(cl.getSuperclass());\n\t\tmap.put(cl, display);\n\t\treturn display;\n\t}\n\n\t/**\n\t * Gets an icon to display a class in a menu\n\t *\n\t * @param cl the class\n\t * @param w  the icon width\n\t * @param h  the icon height\n\t * @return the icon\n\t */\n\tpublic Icon getIcon(Class cl, int w, int h) {\n\t\treturn new DisplayIcon(cl, w, h);\n\t}\n\n\tprivate class DisplayIcon implements Icon {\n\t\tprivate final Display displayObj;\n\t\tprivate final int width;\n\t\tprivate final int height;\n\n\t\tpublic DisplayIcon(Class cl, int w, int h) {\n\t\t\tdisplayObj = findDisplayFor(cl);\n\t\t\twidth = w;\n\t\t\theight = h;\n\t\t}\n\n\t\tpublic int getIconWidth() {\n\t\t\treturn width;\n\t\t}\n\n\t\tpublic int getIconHeight() {\n\t\t\treturn height;\n\t\t}\n\n\t\tpublic void paintIcon(Component comp, Graphics g, int x, int y) {\n\t\t\tGraphics2D g2 = (Graphics2D) g;\n\t\t\tAffineTransform savedTransform = g2.getTransform(); // save current\n\t\t\tdisplayObj.draw(\n\t\t\t\tnull,\n\t\t\t\tcomp,\n\t\t\t\tg2,\n\t\t\t\tnew Rectangle(x, y, getIconWidth(), getIconHeight())\n\t\t\t);\n\t\t\tg2.setTransform(savedTransform); // restore coordinate system\n\t\t}\n\t}\n}\n"
        },
        "Tile.java": {
            "code": "package tiles;\n\nimport info.gridworld.actor.Actor;\n\npublic class Tile extends Actor {\n\tprotected int originalValue = 0;\n\tprotected int value;\n\n\tpublic Tile() {\n\t\tsuper();\n\t}\n\n\tpublic Tile getRefreshedTile() {\n\t\tif (originalValue == value) {\n\t\t\treturn this;\n\t\t}\n\n\t\tTile newTile = new Tile();\n\n\t\tif (value == 2) {\n\t\t\tnewTile = new Tile2();\n\t\t}\n\n\t\tif (value == 4) {\n\t\t\tnewTile = new Tile4();\n\t\t}\n\n\t\tif (value == 8) {\n\t\t\tnewTile = new Tile8();\n\t\t}\n\n\t\tif (value == 16) {\n\t\t\tnewTile = new Tile16();\n\t\t}\n\n\t\tif (value == 32) {\n\t\t\tnewTile = new Tile32();\n\t\t}\n\n\t\tif (value == 64) {\n\t\t\tnewTile = new Tile64();\n\t\t}\n\n\t\tif (value == 128) {\n\t\t\tnewTile = new Tile128();\n\t\t}\n\n\t\tif (value == 256) {\n\t\t\tnewTile = new Tile256();\n\t\t}\n\n\t\tif (value == 512) {\n\t\t\tnewTile = new Tile512();\n\t\t}\n\n\t\tif (value == 1024) {\n\t\t\tnewTile = new Tile1024();\n\t\t}\n\n\t\tif (value == 2048) {\n\t\t\tnewTile = new Tile2048();\n\t\t}\n\n\t\treturn newTile;\n\t}\n\n\tpublic int getValue() {\n\t\treturn value;\n\t}\n\n\tpublic void setValue(int value) {\n\t\tthis.value = value;\n\t}\n\n\tpublic boolean willChange() {\n\t\treturn originalValue != value;\n\t}\n}\n"
        },
        "Tile1024.java": {
            "code": "package tiles;\n\npublic class Tile1024 extends Tile {\n\n\tpublic Tile1024() {\n\t\tthis.originalValue = 1024;\n\t\tthis.value = originalValue;\n\t}\n}\n"
        }
    },
    "abir-taheer": {
        "README.md": {
            "code": "### Hi there \ud83d\udc4b\n\nI'm Abir and I do full-stack! You'll also find me taking [photos](https://abir.photos) from time to time :)\n\n![My GitHub stats](https://github-readme-stats.vercel.app/api?username=abir-taheer&count_private=true)\n"
        }
    },
    "abir.nyc": {
        "README.md": {
            "code": "# abir.nyc\n\nPersonal site\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.\n\n[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n"
        },
        "Experience.js": {
            "code": "import { forwardRef, useEffect, useRef, useState } from \"react\";\n\nimport ExperienceTabBar from \"./ExperienceTabBar\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport StuySU from \"./tabs/StuySU\";\nimport BlockchainsForSchools from \"./tabs/BlockchainsForSchools\";\nimport Slide from \"@mui/material/Slide\";\nimport ArrowDownward from \"@mui/icons-material/ArrowDownward\";\nimport StuyBOE from \"./tabs/StuyBOE\";\nimport StellarCellarDoors from \"./tabs/StellarCellarDoors\";\nimport styles from \"./../../styles/Home.module.css\";\n\nfunction ExperienceWithRef({ backdropRef, experienceRef }, ref) {\n  const [tab, setTab] = useState(\"stuysu\");\n  const containerRef = useRef();\n  const [display, setDisplay] = useState(false);\n  const [observing, setObserving] = useState(false);\n\n  useEffect(() => {\n    if (backdropRef && backdropRef.current && !observing) {\n      const options = {\n        threshold: 0.9,\n      };\n\n      const callback = (entries) => {\n        setDisplay(!entries[0].isIntersecting);\n      };\n\n      const observer = new IntersectionObserver(callback, options);\n      observer.observe(backdropRef.current);\n\n      setObserving(true);\n    }\n  }, [backdropRef, observing, containerRef]);\n\n  return (\n    <div\n      style={{\n        minHeight: 600,\n        transition: \"height 0.5s ease-in\",\n      }}\n      ref={ref}\n    >\n      <Typography\n        align={\"center\"}\n        variant={\"body1\"}\n        sx={{\n          opacity: display ? 0 : 1,\n          transition: \"opacity 0.5s ease-in\",\n          cursor: \"pointer\",\n        }}\n        className={styles.bouncingText}\n        onClick={() =>\n          window.scrollTo({\n            left: 0,\n            top: window.innerHeight * 0.8,\n            behavior: \"smooth\",\n          })\n        }\n      >\n        <ArrowDownward\n          sx={{\n            verticalAlign: \"middle\",\n            margin: 1,\n          }}\n        />\n        Keep Scrolling\n      </Typography>\n\n      <Slide\n        in={display}\n        direction={display ? \"up\" : \"left\"}\n        unmountOnExit\n        mountOnEnter\n        timeout={200}\n        container={experienceRef.current}\n      >\n        <div>\n          <Typography variant={\"h3\"} align={\"center\"}>\n            Experience\n          </Typography>\n          <Typography\n            variant={\"subtitle1\"}\n            color=\"text.secondary\"\n            align={\"center\"}\n            gutterBottom\n          >\n            I&apos;m known to dabble here and there\n          </Typography>\n\n          <Grid container sx={{ margin: \"1rem 0\" }}>\n            <Grid item xs={12} sm={4} md={3} lg={3} xl={3}>\n              <ExperienceTabBar value={tab} setValue={setTab} />\n            </Grid>\n\n            <Grid\n              item\n              xs={12}\n              sm={8}\n              md={9}\n              lg={9}\n              xl={9}\n              ref={containerRef}\n              sx={{ overflowY: \"clip\" }}\n            >\n              <StuySU container={containerRef.current} tab={tab} />\n              <StuyBOE tab={tab} container={containerRef.current} />\n              <BlockchainsForSchools\n                container={containerRef.current}\n                tab={tab}\n              />\n              <StellarCellarDoors tab={tab} container={containerRef.current} />\n            </Grid>\n          </Grid>\n        </div>\n      </Slide>\n    </div>\n  );\n}\n\nconst Experience = forwardRef(ExperienceWithRef);\n\nexport default Experience;\n"
        },
        "ExperienceCard.js": {
            "code": "import Card from \"@mui/material/Card\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardContent from \"@mui/material/CardContent\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\n\nimport GitHub from \"@mui/icons-material/GitHub\";\nimport Chip from \"@mui/material/Chip\";\nimport Star from \"@mui/icons-material/Star\";\nimport Link from \"@mui/material/Link\";\n\nexport default function ExperienceCard({\n  title,\n  image,\n  alt,\n  content,\n  tags = [],\n  url,\n  href,\n  github,\n}) {\n  return (\n    <Card>\n      <CardHeader\n        title={title}\n        subheader={\n          !!href && (\n            <Link\n              href={href}\n              rel={\"noopener noreferrer\"}\n              variant={\"subtitle2\"}\n              target={\"_blank\"}\n            >\n              {url || href}\n            </Link>\n          )\n        }\n        action={\n          !!github && (\n            <IconButton\n              href={github}\n              target={\"_blank\"}\n              rel={\"noopener noreferrer\"}\n            >\n              <GitHub />\n            </IconButton>\n          )\n        }\n      />\n      <CardMedia component=\"img\" height=\"250\" image={image} alt={alt} />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {content}\n        </Typography>\n\n        <div>\n          {tags.map((tag) => (\n            <Chip\n              label={tag}\n              key={tag}\n              variant={\"outlined\"}\n              icon={<Star sx={{ fontSize: 16 }} />}\n              color={\"secondary\"}\n              sx={{ margin: \"10px 10px 0 0\", fontSize: 12 }}\n            />\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"
        },
        "ExperienceTabBar.js": {
            "code": "import Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Box from \"@mui/material/Box\";\n\nexport default function ExperienceTabBar({ value, setValue }) {\n  return (\n    <Box\n      sx={{\n        bgcolor: \"background.paper\",\n        margin: \"10px 0\",\n      }}\n    >\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={value}\n        onChange={(_, t) => setValue(t)}\n        aria-label=\"Organizations\"\n        sx={{ borderRight: 1, borderColor: \"divider\", textAlign: \"right\" }}\n      >\n        <Tab label=\"Stuyvesant Student Union\" value={\"stuysu\"} />\n        <Tab label=\"Stuyvesant Board of Elections\" value={\"stuyboe\"} />\n        <Tab label=\"BlockChains for Schools\" value={\"bfs\"} />\n        <Tab label=\"Stellar Cellar Doors\" value={\"stellar-doors\"} />\n      </Tabs>\n    </Box>\n  );\n}\n"
        },
        "ExperienceTabPanel.js": {
            "code": "import Typography from \"@mui/material/Typography\";\nimport Slide from \"@mui/material/Slide\";\nimport { useEffect, useState } from \"react\";\nimport ExperienceCard from \"./ExperienceCard\";\nimport Grid from \"@mui/material/Grid\";\n\nexport default function ExperienceTabPanel({\n  container,\n  isActive,\n  name,\n  projects,\n}) {\n  const [display, setDisplay] = useState(false);\n\n  useEffect(() => {\n    if (isActive) {\n      const timeout = setTimeout(() => {\n        setDisplay(true);\n      }, 200);\n\n      return () => clearTimeout(timeout);\n    }\n\n    setDisplay(false);\n  }, [isActive]);\n\n  return (\n    <Slide\n      in={display}\n      mountOnEnter\n      unmountOnExit\n      direction={display ? \"up\" : \"left\"}\n      timeout={{ enter: 500, exit: 200, appear: 200 }}\n      container={container}\n    >\n      <div>\n        <Typography\n          variant={\"h4\"}\n          align={\"center\"}\n          color={\"primary\"}\n          gutterBottom\n        >\n          {name}\n        </Typography>\n\n        <Grid container padding={2} spacing={2}>\n          {projects.map((project, index) => (\n            <Grid item xs={12} sm={12} md={6} lg={6} xl={6} key={index}>\n              <ExperienceCard {...project} />\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    </Slide>\n  );\n}\n"
        },
        "BlockchainsForSchools.js": {
            "code": "import ExperienceTabPanel from \"../ExperienceTabPanel\";\n\nconst projects = [\n  {\n    title: \"HackBFS\",\n    image: \"/hackbfs.com_.png\",\n    alt: \"HackBFS Home\",\n    content:\n      \"Designed, created, and set up infrastructure to serve the hackathon website for thousands of visitors\",\n    tags: [\"ReactJS\"],\n    url: \"hackbfs.com\",\n    href: \"https://hackbfs.com\",\n    github: \"https://github.com/blockchainsforschools/ideation-challenge\",\n  },\n  {\n    title: \"Main Site\",\n    image: \"/blockchainsforschools.org_.png\",\n    alt: \"Blockchains for Schools Home\",\n    content:\n      \"Led a team of developers and designers to decrease bounce rates and improve session times on the main site.\",\n    tags: [\"ExpressJS\", \"PostgreSQL\"],\n    url: \"blockchainsforschools.org\",\n    href: \"https://blockchainsforschools.org\",\n    github: \"https://github.com/blockchainsforschools/main-site\",\n  },\n];\n\nexport default function BlockchainsForSchools({ container, tab }) {\n  const isActive = tab === \"bfs\";\n\n  return (\n    <ExperienceTabPanel\n      container={container}\n      isActive={isActive}\n      name={\"Blockchains for Schools\"}\n      projects={projects}\n    />\n  );\n}\n"
        },
        "StellarCellarDoors.js": {
            "code": "import ExperienceTabPanel from \"../ExperienceTabPanel\";\n\nconst projects = [\n  {\n    title: \"Stellar Doors Site\",\n    image: \"/stellarcellardoors.com_.png\",\n    alt: \"Stellar Cellar Doors home\",\n    content:\n      \"Designed and created a site for a cellar door business from scratch with a built in CMS for easy updates.\",\n    tags: [\"Next.JS\", \"GraphQL\", \"MongoDB\"],\n    url: \"stellarcellardoors.com\",\n    href: \"https://stellarcellardoors.com\",\n  },\n];\n\nexport default function StellarCellarDoors({ tab, container }) {\n  const isActive = tab === \"stellar-doors\";\n\n  return (\n    <ExperienceTabPanel\n      projects={projects}\n      isActive={isActive}\n      container={container}\n      name={\"Stellar Cellar Doors\"}\n    />\n  );\n}\n"
        },
        "StuyBOE.js": {
            "code": "import ExperienceTabPanel from \"../ExperienceTabPanel\";\n\nconst projects = [\n  {\n    title: \"Voting Site\",\n    image: \"/vote.stuysu.org_.png\",\n    alt: \"Voting Site Home\",\n    content:\n      \"Enabled Student Government elections to happen remotely while ensuring security, anonymity, and improving voter turnout by 107 percent in the first year. Also designed the new logo.\",\n    tags: [\"Next.JS\", \"GraphQL\", \"MongoDB\"],\n    url: \"vote.stuysu.org\",\n    href: \"https://vote.stuysu.org\",\n    github: \"https://github.com/abir-taheer/vote.stuysu.org\",\n  },\n];\n\nexport default function StuyBOE({ tab, container }) {\n  const isActive = tab === \"stuyboe\";\n\n  return (\n    <ExperienceTabPanel\n      projects={projects}\n      isActive={isActive}\n      container={container}\n      name={\"Stuyvesant Board of Elections\"}\n    />\n  );\n}\n"
        },
        "StuySU.js": {
            "code": "import ExperienceTabPanel from \"../ExperienceTabPanel\";\n\nconst projects = [\n  {\n    title: \"StuyActivities\",\n    image: \"/stuyactivities.org_.png\",\n    alt: \"StuyActivities Home\",\n    content:\n      \"Led the creation of one of the most powerful and scalable organization management systems at one of the largest high schools in the United States\",\n    tags: [\"NodeJS\", \"ReactJS\", \"GraphQL\", \"Google One Tap\"],\n    url: \"stuyactivities.org\",\n    href: \"https://stuyactivities.org\",\n    github: \"https://github.com/stuysu/stuyactivities.org\",\n  },\n  {\n    title: \"Student Union Applications\",\n    image: \"/applications.stuysu.org_.png\",\n    alt: \"Applications Site Home\",\n    content:\n      \"Developed the methodology and site for using modern cryptography and Google Drive APIs to allow students to anonymously apply for Student Union positions.\",\n    tags: [\n      \"WebCrypto API\",\n      \"Next.JS\",\n      \"GraphQL\",\n      \"Google Drive API\",\n      \"MongoDB\",\n    ],\n    url: \"applications.stuysu.org\",\n    href: \"https://applications.stuysu.org\",\n    github: \"https://github.com/stuysu/applications.stuysu.org\",\n  },\n  {\n    title: \"Valentines Day Letters\",\n    image: \"/valentines.stuysu.org_.png\",\n    alt: \"Valentines Letters Site Home\",\n    content:\n      \"A site to let students send each other valentines day cards virtually with the option of anonymity, all implemented alongside a toxicity filter\",\n    tags: [\"Next.JS\", \"GraphQL\", \"MongoDB\", \"Google Drive API\"],\n    href: \"https://valentines.stuysu.org\",\n    url: \"valentines.stuysu.org\",\n    github: \"https://github.com/stuysu/valentines.stuysu.org\",\n  },\n];\n\nexport default function StuySU({ container, tab }) {\n  const isActive = tab === \"stuysu\";\n\n  return (\n    <ExperienceTabPanel\n      container={container}\n      isActive={isActive}\n      name={\"Stuyvesant Student Union\"}\n      projects={projects}\n    />\n  );\n}\n"
        },
        "Devpost.js": {
            "code": "import SvgIcon from \"@mui/material/SvgIcon\";\n\nexport default function Devpost() {\n  return (\n    <SvgIcon\n      x=\"0px\"\n      y=\"0px\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 222 192.22\"\n    >\n      <path\n        className=\"cls-1\"\n        d=\"M135,85.67H122.69V157h11.48c24.47,0,35.72-14.34,35.72-35.72C170,97.55,159.75,85.67,135,85.67Z\"\n        transform=\"translate(-29.15 -25.24)\"\n      />\n      <path\n        className=\"cls-1\"\n        d=\"M195.63,25.24h-111L29.15,121.39l55.52,96.07h111l55.52-96.07ZM134.25,179.68H99.4V63h36.51C169.26,63,194,78.7,194,121.39,194,162.42,164.27,179.68,134.25,179.68Z\"\n        transform=\"translate(-29.15 -25.24)\"\n      />\n    </SvgIcon>\n  );\n}\n"
        },
        "StackOverflow.js": {
            "code": "import SvgIcon from \"@mui/material/SvgIcon\";\n\nexport default function StackOverflow() {\n  return (\n    <SvgIcon x=\"0px\" y=\"0px\" viewBox=\"0 0 8192 8192\">\n      <path\n        className=\"st0\"\n        d=\"M7157.3,2982.8l-493.6,643.1l0,0l-342.3,734.4l-0.1,0l-175.5,791.1l-3956.4-877.1l0,0l175.5-791.3l3954.8,876.6\n\tL2648.5,2647.7v0l342.5-734.7l3670.9,1711.6L3448.3,1158.7l356.6-464.8h368.9L7157.3,2982.8L7157.3,2982.8z M2093.3,5151.8h4052.5\n\tv810.5l-4052.5-0.1V5151.8z\"\n      />\n      <path\n        className=\"st0\"\n        d=\"M7338.5,5440.2V7872h-6485V5440.2h810.6v1621.2h4863.8V5440.2H7338.5z\"\n      />\n    </SvgIcon>\n  );\n}\n"
        },
        "Icons.js": {
            "code": "import styles from \"./Icons.module.css\";\nimport IconButton from \"@mui/material/IconButton\";\nimport GitHub from \"@mui/icons-material/GitHub\";\nimport LinkedIn from \"@mui/icons-material/LinkedIn\";\nimport StackOverflow from \"../icons/StackOverflow\";\nimport Devpost from \"../icons/Devpost\";\nimport { Instagram } from \"@mui/icons-material\";\n\nconst icons = [\n  {\n    icon: <Devpost />,\n    platform: \"Devpost\",\n    url: \"https://devpost.com/abir-taheer\",\n  },\n  {\n    icon: <StackOverflow />,\n    platform: \"StackOverflow\",\n    url: \"https://stackoverflow.com/users/10237430/abir-taheer\",\n  },\n  {\n    icon: <GitHub />,\n    platform: \"GitHub\",\n    url: \"https://github.com/abir-taheer\",\n  },\n  {\n    icon: <LinkedIn />,\n    platform: \"LinkedIn\",\n    url: \"https://linkedin.com/in/AbirTaheer\",\n  },\n  {\n    icon: <Instagram />,\n    platform: \"Instagram\",\n    url: \"https://instagram.com/abir.taheer\",\n  },\n];\n\nexport default function Icons() {\n  return (\n    <div className={styles.container}>\n      {icons.map(({ url, platform, icon }) => (\n        <IconButton\n          key={platform}\n          sx={{\n            color: \"rgba(255, 255, 255, 0.6)\",\n            margin: \"1rem\",\n            \":hover\": {\n              color: \"white\",\n            },\n            \"@media (max-width: 500px)\": {\n              margin: \"0.5rem\",\n            },\n          }}\n          href={url}\n          target={\"_blank\"}\n          rel={\"noopener noreferrer\"}\n          aria-label={platform + \" Profile\"}\n        >\n          {icon}\n        </IconButton>\n      ))}\n    </div>\n  );\n}\n"
        },
        "Icons.module.css": {
            "code": ".container {\n  display: flex;\n  align-content: center;\n  justify-content: center;\n  align-items: center;\n}\n"
        },
        "LightroomSlideshow.js": {
            "code": "import Typography from \"@mui/material/Typography\";\nimport { useEffect, useState } from \"react\";\nimport Slide from \"@mui/material/Slide\";\n\nexport default function LightroomSlideshow({ slideshowRef }) {\n  const [display, setDisplay] = useState(false);\n  const [observing, setObserving] = useState(false);\n\n  useEffect(() => {\n    if (slideshowRef && slideshowRef.current && !observing) {\n      const options = {\n        threshold: 0.1,\n      };\n\n      const callback = (entries) => {\n        const entry = entries[0];\n        setDisplay(entry.isIntersecting);\n      };\n\n      const observer = new IntersectionObserver(callback, options);\n      observer.observe(slideshowRef.current);\n\n      setObserving(true);\n    }\n  }, [slideshowRef, observing]);\n\n  return (\n    <Slide\n      in={display}\n      mountOnEnter\n      unmountOnExit\n      direction={display ? \"up\" : \"left\"}\n      timeout={{ enter: 500, exit: 200, appear: 200 }}\n      container={slideshowRef.current}\n    >\n      <div>\n        <Typography variant={\"h3\"} align={\"center\"} gutterBottom>\n          Photography\n        </Typography>\n        <Typography\n          variant={\"subtitle1\"}\n          align={\"center\"}\n          color={\"text.secondary\"}\n        >\n          I&apos;m working on making a better gallery component but for the time\n          being here&apos;s a lightroom slideshow of my photos instead\n        </Typography>\n        <iframe\n          id=\"iframe\"\n          src=\"https://lightroom.adobe.com/embed/shares/bf5594d5c8394001a7e972c1b03f2379/slideshow?background_color=%232D2D2D&color=%23999999\"\n          frameBorder={0}\n          style={{\n            width: \"100%\",\n            height: \"570px\",\n          }}\n        />\n      </div>\n    </Slide>\n  );\n}\n"
        },
        "ThemeProvider.js": {
            "code": "import theme from \"./theme\";\nimport { ThemeProvider as Provider } from \"@mui/material/styles\";\n\nexport default function ThemeProvider({ children }) {\n  return <Provider theme={theme}>{children}</Provider>;\n}\n"
        },
        "theme.js": {
            "code": "import { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: `\"Poppins\", sans-serif`,\n  },\n});\n\nexport default theme;\n"
        }
    },
    "abir.taheer.me-old": {
        "README.md": {
            "code": "This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.\n\n[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/import?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n"
        },
        "PictureGrid.js": {
            "code": "import $ from \"jquery\";\nimport \"justifiedGallery\";\nimport { createRef, useEffect } from \"react\";\nimport \"justifiedGallery/dist/css/justifiedGallery.min.css\";\n\nconst PictureGrid = ({ pictures }) => {\n  const galleryRef = createRef();\n\n  useEffect(() => {\n    if (galleryRef.current) {\n      $(galleryRef.current).justifiedGallery({\n        maxRowHeight: 500,\n        rowHeight: 250,\n        margins: 5,\n        randomize: false,\n        lastRow: \"justify\",\n        captions: false,\n        justifyThreshold: 0.6,\n      });\n    }\n  });\n\n  return (\n    <div ref={galleryRef}>\n      {pictures.map(picture => (\n        <a key={picture.id}>\n          <img\n            alt={picture.resource.tags.join(\", \")}\n            src={picture.resource.url}\n            height={picture.resource.height}\n            width={picture.resource.width}\n          />\n        </a>\n      ))}\n    </div>\n  );\n};\n\nexport default PictureGrid;\n"
        },
        "graphQLClient.js": {
            "code": "import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nexport const cache = new InMemoryCache();\n\nexport const graphQLClient = new ApolloClient({\n  uri: \"/api/graphql\",\n  cache,\n});\n\nexport default graphQLClient;\n"
        },
        "cover.js": {
            "code": "import CloudinaryResource from \"../../../models/cloudinaryResource\";\n\nexport default album => CloudinaryResource.idLoader.load(album.coverPicId);\n"
        },
        "index.js": {
            "code": "import albums from \"./albums\";\nimport albumById from \"./albumById\";\nimport albumByUrl from \"./albumByUrl\";\nimport people from \"./people\";\nimport personById from \"./personById\";\nimport pictureById from \"./pictureById\";\nimport picturesByAlbumId from \"./picturesByAlbumId\";\nimport picturesByAlbumUrl from \"./picturesByAlbumUrl\";\n\nconst Query = {\n  albumById,\n  albumByUrl,\n  albums,\n  people,\n  personById,\n  pictureById,\n  picturesByAlbumId,\n  picturesByAlbumUrl,\n};\n\nexport default Query;\n"
        },
        "pictures.js": {
            "code": "import Picture from \"../../../models/picture\";\n\nexport default album =>\n  Promise.all(album.pictureIds.map(id => Picture.idLoader.load(id)));\n"
        },
        "url.js": {
            "code": "import { v2 as cloudinary } from \"cloudinary\";\n\nexport default (resource, { preset }) => {\n  if (preset === \"previewLarge\") {\n    return cloudinary.url(resource._id, {\n      secure: true,\n      sign_url: true,\n      height: 800,\n      quality: 80,\n    });\n  }\n\n  if (preset === \"thumbnailMedium\") {\n    return cloudinary.url(resource._id, {\n      secure: true,\n      sign_url: true,\n      height: 540,\n    });\n  }\n\n  if (preset === \"thumbnailSmall\") {\n    return cloudinary.url(resource._id, {\n      secure: true,\n      sign_url: true,\n      height: 260,\n      quality: 90,\n    });\n  }\n};\n"
        },
        "name.js": {
            "code": "export default person => person.firstName + \" \" + person.lastName;\n"
        },
        "picture.js": {
            "code": "import CloudinaryResource from \"../../../models/cloudinaryResource\";\n\nexport default person => CloudinaryResource.idLoader.load(person.pictureId);\n"
        },
        "albums.js": {
            "code": "import Album from \"../../../models/album\";\n\nexport default () => Album.find();\n"
        },
        "people.js": {
            "code": "import Person from \"../../../models/person\";\n\nexport default () => Person.find();\n"
        },
        "resource.js": {
            "code": "import CloudinaryResource from \"../../../models/cloudinaryResource\";\n\nexport default picture => CloudinaryResource.idLoader.load(picture.resourceId);\n"
        },
        "albumById.js": {
            "code": "import Album from \"../../../models/album\";\n\nexport default (_, { id }) => Album.findById(id);\n"
        },
        "albumByUrl.js": {
            "code": "import Album from \"../../../models/album\";\n\nexport default (_, { url }) => Album.findOne({ url });\n"
        },
        "Album.js": {
            "code": "import { gql } from \"apollo-server-micro\";\n\nexport default gql`\n  type Album {\n    id: ObjectId!\n    url: String\n    title: String\n    description: String\n\n    # Dynamic Props\n    cover: CloudinaryResource\n    pictures: [Picture]\n  }\n`;\n"
        },
        "CloudinaryResource.js": {
            "code": "import { gql } from \"apollo-server-micro\";\n\nexport default gql`\n  enum UrlPresets {\n    thumbnailSmall\n    thumbnailMedium\n    previewLarge\n  }\n\n  type CloudinaryResource {\n    id: String\n    width: Int\n    height: Int\n    format: String\n    resourceType: String\n    createdAt: DateTime\n    tags: [String]\n\n    # Dynamic props\n    url(preset: UrlPresets!): String\n  }\n`;\n"
        },
        "Person.js": {
            "code": "import { gql } from \"apollo-server-micro\";\n\nexport default gql`\n  type SocialMedia {\n    facebook: String\n    twitter: String\n    email: String\n    instagram: String\n    linkedIn: String\n    github: String\n  }\n\n  type Person {\n    id: ObjectId\n    firstName: String\n    lastName: String\n    social: SocialMedia\n\n    # Dynamic props\n    name: String\n    picture: CloudinaryResource\n  }\n`;\n"
        },
        "Picture.js": {
            "code": "import { gql } from \"apollo-server-micro\";\n\nexport default gql`\n  type Picture {\n    id: ObjectId!\n    title: String\n    description: String\n    takenAt: DateTime\n\n    # Dynamic Props ----\n    # Cloudinary Resource Object to facilitate access\n    resource: CloudinaryResource\n    # The people in the photo\n    people: [Person]\n\n    # Albums that contain this photo\n    albums: [Album]\n  }\n`;\n"
        },
        "Query.js": {
            "code": "import { gql } from \"apollo-server-micro\";\n\nexport default gql`\n  type Query {\n    albums: [Album]\n    albumById(id: ObjectId!): Album\n    albumByUrl(url: String!): Album\n\n    picturesByAlbumId(albumId: ObjectId!): [Picture]\n    picturesByAlbumUrl(albumUrl: String!): [Picture]\n    pictureById(id: ObjectId!): Picture\n\n    people: [Person]\n    personById(id: ObjectId!): Person\n  }\n`;\n"
        }
    },
    "adhan-pi": {
        "app.py": {
            "code": "import json\nimport os\nimport re\nimport time\nimport sys\nimport psutil\nimport logging\nfrom datetime import datetime\n\n\ndef update_times():\n    import requests\n    api_data = requests.get(\n        \"http://api.aladhan.com/v1/timingsByCity?city=New+York&country=United+States&method=2\").json()\n    ptime = api_data[\"data\"][\"timings\"]\n    stored_data = {\n        \"date\": today,\n        \"times\": {\n            \"Fajr\": {\n                \"time\": ptime[\"Fajr\"],\n                \"done\": False\n            },\n            \"Dhuhr\": {\n                \"time\": ptime[\"Dhuhr\"],\n                \"done\": False\n            },\n            \"Asr\": {\n                \"time\": ptime[\"Asr\"],\n                \"done\": False\n            },\n            \"Maghrib\": {\n                \"time\": ptime[\"Maghrib\"],\n                \"done\": False\n            },\n            \"Isha\": {\n                \"time\": ptime[\"Isha\"],\n                \"done\": False\n            },\n        }\n    }\n    f = open(\"times.json\", \"w\")\n    f.write(json.dumps(stored_data))\n    f.close()\n    return stored_data\n\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\nwhile not time.sleep(60):\n\n    today = datetime.today().strftime('%Y-%m-%d')\n    try:\n        time_json = open(\"times.json\", \"r\").read()\n        times = json.loads(time_json)\n        assert (times[\"date\"] == today), \"Prayer times are not up to date\"\n    except:\n        times = update_times()\n\n    adhan_made = True\n    max_time = None\n\n    for prayer in times[\"times\"]:\n        prayer_time = datetime.strptime(times[\"times\"][prayer][\"time\"], '%H:%M').time()\n        if prayer_time < datetime.today().time() and (max_time is None or prayer_time > max_time):\n            current_prayer = prayer\n            adhan_made = times[\"times\"][prayer][\"done\"]\n            max_time = prayer_time\n\n    if not adhan_made:\n        is_fajr = current_prayer == \"Fajr\"\n        times[\"times\"][current_prayer][\"done\"] = True\n        f = open(\"times.json\", \"w\")\n        f.write(json.dumps(times))\n        f.close()\n\n        cec_resp = os.popen('echo pow 0 | cec-client -s -d 1').read()\n        status_search = re.finditer(r\"(?<=\\b(power\\sstatus:)\\s)(\\w+)\", cec_resp)\n        for x in status_search:\n            start = int(x.start())\n            end = int(x.end())\n\n        status = cec_resp[start:end]\n        is_on = status == \"on\"\n\n        if not is_on:\n            os.system(\"echo on 0 | cec-client -s -d 1\")\n            time.sleep(3)\n\n        os.system('echo \"as\" | cec-client RPI -s -d 1')\n        time.sleep(2)\n\n        adhan_name = \"fajr_adhan.mp3\" if is_fajr else \"standard_adhan.mp3\"\n        adhan_length = 185\n        os.system(\"omxplayer --no-keys \" + adhan_name + \" &\")\n\n        time.sleep(adhan_length)\n\n        os.system(\"omxplayer --no-keys after_adhan.mp3 &\")\n\n        os.system(\"clear\")\n        if not is_on:\n            time.sleep(20)\n            os.system(\"echo standby 0 | cec-client -s -d 1\")\n"
        }
    },
    "advent-of-code-2021": {
        "README.md": {
            "code": "# advent-of-code-2021"
        },
        "day1.js": {
            "code": "const getInput = require(\"./getInput\");\n\nasync function parseInput() {\n  const input = await getInput(1);\n  return input.map(Number);\n}\n\nasync function part1() {\n  const input = await parseInput();\n\n  let count = 0;\n\n  input.forEach((num, i) => {\n    if (i && num > input[i - 1]) {\n      count++;\n    }\n  });\n\n  return count;\n}\n\nasync function part2() {\n  const input = await parseInput();\n\n  let count = 0;\n\n  input.forEach((num, i) => {\n    let first = input.slice(i - 3, i);\n    let second = input.slice(i - 2, i + 1);\n\n    if (first.length && second.length) {\n      const firstSum = first.reduce((a, b) => a + b);\n      const secondSum = second.reduce((a, b) => a + b);\n\n      if (secondSum > firstSum) {\n        count++;\n      }\n    }\n  });\n\n  return count;\n}\n"
        },
        "day2.js": {
            "code": "const getInput = require(\"./getInput\");\n\nasync function parseInput() {\n  const input = await getInput(2);\n\n  return input.map((i) => {\n    const a = i.split(\" \");\n\n    a[1] = Number(a[i]);\n  });\n}\n\nasync function part1() {\n  const input = await parseInput();\n\n  let depth = 0;\n  let horizontal = 0;\n\n  input.forEach((a) => {\n    if (a[0] === \"forward\") {\n      horizontal += a[1];\n    }\n\n    if (a[0] === \"down\") {\n      depth += a[1];\n    }\n\n    if (a[0] === \"up\") {\n      depth -= a[1];\n    }\n  });\n\n  return depth * horizontal;\n}\n\nasync function part2() {\n  const input = await getInput(2);\n\n  let h = 0;\n  let d = 0;\n  let a = 0;\n\n  input.forEach((i) => {\n    if (i[0] === \"forward\") {\n      h += i[1];\n      d += a * i[1];\n    }\n\n    if (i[0] === \"down\") {\n      a += i[1];\n    }\n\n    if (i[1] === \"up\") {\n      a -= i[1];\n    }\n  });\n\n  return h * d;\n}\n"
        }
    },
    "advent-of-code-2022": {
        "README.md": {
            "code": "# Advent of Code 2022\n\nWelcome to my repository for the 2022 Advent of Code challenge! Advent of Code is an annual event where programmers around the world attempt to solve a series of small programming challenges, one for each day in the month of December leading up to Christmas.\n\nThis repository contains my solutions to the Advent of Code challenges, written in TypeScript. I chose to use TypeScript for these solutions because I wanted to prioritize code readability and structure in my solutions rather than leaderboard performance. \n\nEach solution is contained in its own file in the `src/days/` directory, named according to the day of the Advent of Code challenge it corresponds to. Within each file, you will find the TypeScript source code for my solutions to both parts. There's also a `utils` directory with accompanying tools and helper functions that I wrote to make it easier for me to solve the challenges. \n\nThere's also a helper function in the `utils` directory called [`getInput`](https://github.com/abir-taheer/advent-of-code-2022/blob/main/src/utils/getInput.ts) that automatically fetches your problem input for the day that you provide as an argument from the Advent of Code website. \n1. It uses the value of your session cookie to authenticate as you and fetch the correct input. \n2. You can find your session cookie by [inspecting the network requests](https://superuser.com/questions/1486002/how-do-i-see-request-cookies-in-chrome) made by your browser when you visit the Advent of Code website. \n3. Once you find it, set it as the value of the `SESSION_COOKIE` environment variable. You can add a `.env` file to the root of the project and set the value there.\n\nI hope that my solutions will be helpful to you as you work on the Advent of Code challenges, or as you simply try to improve your skills in programming. If you have any questions or comments, feel free to reach out to me through the repository's issue tracker.\n\nHappy coding!\n\n\n\n"
        },
        "constants.ts": {
            "code": "import { config } from \"dotenv\";\n\nconfig();\nexport const AOC_SESSION_ID = process.env.AOC_SESSION_ID || \"\";\n"
        },
        "day1.ts": {
            "code": "import { getInput } from \"../utils/getInput\";\nimport { sum } from \"../utils/sum\";\n\nconst parseInput = async () => {\n  const raw = await getInput(1);\n  return raw.split(\"\\n\\n\").map((a) => a.split(\"\\n\").map(Number));\n};\n\nconst part1 = async () => {\n  const input = await parseInput();\n\n  return Math.max(...input.map((elf) => sum(elf)));\n};\n\nconst part2 = async () => {\n  const input = await parseInput();\n\n  return sum(\n    input\n      .map((elf) => sum(elf))\n      .sort((a, b) => b - a)\n      .slice(0, 3)\n  );\n};\n\npart1().then((p1) => console.log({ p1 }));\npart2().then((p2) => console.log({ p2 }));\n"
        },
        "day2.ts": {
            "code": "import { getInput } from \"../utils/getInput\";\n\nconst parseInput = async () => {\n  const raw = await getInput(2);\n\n  return raw\n    .split(\"\\n\")\n    .filter(Boolean)\n    .map((a) => a.split(\" \"));\n};\n\nconst part1 = async () => {\n  const input = await parseInput();\n\n  let score = 0;\n\n  input.forEach(([opponent, you]) => {\n    if (you === \"X\") {\n      score += 1;\n\n      if (opponent === \"A\") {\n        score += 3;\n      } else if (opponent === \"C\") {\n        score += 6;\n      }\n    }\n\n    if (you === \"Y\") {\n      score += 2;\n\n      if (opponent === \"B\") {\n        score += 3;\n      } else if (opponent === \"A\") {\n        score += 6;\n      }\n    }\n\n    if (you === \"Z\") {\n      score += 3;\n\n      if (opponent === \"C\") {\n        score += 3;\n      } else if (opponent === \"B\") {\n        score += 6;\n      }\n    }\n  });\n\n  return score;\n};\n\nconst part2 = async () => {\n  const input = await parseInput();\n\n  let score = 0;\n\n  input.forEach(([opponent, you]) => {\n    if (you === \"X\") {\n      // you lost\n      score += opponent === \"A\" ? 3 : opponent === \"B\" ? 1 : 2;\n    } else if (you === \"Y\") {\n      score += 3;\n\n      score += opponent === \"A\" ? 1 : opponent === \"B\" ? 2 : 3;\n    } else if (you === \"Z\") {\n      score += 6;\n\n      score += opponent === \"A\" ? 2 : opponent === \"B\" ? 3 : 1;\n    }\n  });\n\n  return score;\n};\n\npart1().then((p1) => console.log({ p1 }));\npart2().then((p2) => console.log({ p2 }));\n"
        },
        "day3.ts": {
            "code": "import { getInput } from \"../utils/getInput\";\nimport { groupItems } from \"../utils/groupItems\";\n\nconst day = 3;\n\nconst parseInput = async (numSacks: number) => {\n  const raw = await getInput(day);\n\n  return raw\n    .split(\"\\n\")\n    .filter(Boolean)\n    .map((row) =>\n      Array.from(Array(numSacks), (_, i) =>\n        row.slice(\n          Math.ceil((row.length * i) / numSacks),\n          Math.ceil((row.length * (i + 1)) / numSacks)\n        )\n      )\n    );\n};\n\nconst getLetterScore = (letter: string) => {\n  let bonus = 0;\n  if (letter.toUpperCase() === letter) {\n    bonus += 26;\n  }\n\n  return letter.toLowerCase().charCodeAt(0) - 96 + bonus;\n};\n\nconst part1 = async () => {\n  const input = await parseInput(2);\n\n  let sum = 0;\n  input.forEach(([left, right]) => {\n    const leftCharSet = new Set(left);\n    const rightCharSet = new Set(right);\n    const common = Array.from(leftCharSet).filter((char) =>\n      rightCharSet.has(char)\n    );\n\n    sum += getLetterScore(common[0]);\n  });\n\n  return sum;\n};\n\nconst part2 = async () => {\n  const input = await parseInput(1);\n\n  let sum = 0;\n  groupItems(input, 3).forEach(([[first], [second], [third]]) => {\n    const firstCharSet = new Set(first);\n    const secondCharSet = new Set(second);\n    const thirdCharSet = new Set(third);\n\n    const common = Array.from(firstCharSet).filter(\n      (char) => secondCharSet.has(char) && thirdCharSet.has(char)\n    );\n\n    sum += getLetterScore(common[0]);\n  });\n\n  return sum;\n};\n\npart1().then((p1) =>\n  console.log({\n    p1,\n  })\n);\npart2().then((p2) => console.log({ p2 }));\n"
        },
        "day4.ts": {
            "code": "import { getInput } from \"../utils/getInput\";\nimport { oneRangeContainsAnther, rangeHasOverlap } from \"../utils/range\";\n\nconst day = 4;\n\nconst parseInput = async () => {\n  const raw = await getInput(day);\n  return raw\n    .split(\"\\n\")\n    .filter(Boolean)\n    .map((a) => a.split(\",\").map((b) => b.split(\"-\").map(Number) as Range));\n};\n\ntype Range = [number, number];\n\nconst part1 = async () => {\n  const input = await parseInput();\n  const onesWithOverlap = input.filter((row) =>\n    oneRangeContainsAnther(row[0], row[1])\n  );\n  return onesWithOverlap.length;\n};\n\nconst part2 = async () => {\n  const input = await parseInput();\n\n  const onesWithOverlap = input.filter((row) =>\n    rangeHasOverlap(row[0], row[1])\n  );\n\n  return onesWithOverlap.length;\n};\n\npart1().then((p1) => console.log({ p1 }));\npart2().then((p2) => console.log({ p2 }));\n"
        },
        "day5.ts": {
            "code": "import { getInput } from \"../utils/getInput\";\n\nconst day = 5;\n\nconst parseInput = async () => {\n  const raw = await getInput(day);\n\n  const [rawChart, rawInstructions] = raw.split(\"\\n\\n\");\n  const horizontalChart = rawChart\n    .split(\"\\n\")\n    .map((line) => line.replace(/[0-9]/g, \"\").trim())\n    .filter(Boolean)\n    .map((line) => line.trim().split(/ {1,4}/g));\n\n  const chart = Array.from(Array(10), (_, i) =>\n    horizontalChart.map((a) => a[i - 1]).filter(Boolean)\n  );\n\n  const instructions = rawInstructions\n    .split(\"\\n\")\n    .filter(Boolean)\n    .map((a) =>\n      a\n        .split(\" \")\n        .map(Number)\n        .filter((a) => !Number.isNaN(a))\n    );\n\n  return { chart, instructions };\n};\n\nconst part1 = async () => {\n  const { chart, instructions } = await parseInput();\n\n  const chartCopy = JSON.parse(JSON.stringify(chart)) as typeof chart;\n\n  instructions.forEach(([amount, from, to]) => {\n    const items = chartCopy[from].splice(0, amount).reverse();\n\n    chartCopy[to].unshift(...items);\n  });\n\n  return chartCopy.map((a) => a[0]).filter(Boolean);\n};\n\nconst part2 = async () => {\n  const { chart, instructions } = await parseInput();\n\n  const chartCopy = JSON.parse(JSON.stringify(chart)) as typeof chart;\n\n  instructions.forEach(([amount, from, to]) => {\n    const items = chartCopy[from].splice(0, amount);\n\n    chartCopy[to].unshift(...items);\n  });\n\n  return chartCopy.map((a) => a[0]).filter(Boolean);\n};\n\npart1().then((p1) => console.log({ p1 }));\npart2().then((p2) => console.log({ p2 }));\n"
        },
        "Grid.ts": {
            "code": "export type Direction = \"up\" | \"down\" | \"left\" | \"right\";\nexport type RotationDegree = 0 | 90 | 180 | 270;\n\nexport class Grid<T extends Cell<any>> {\n  private rows: T[][] = [];\n\n  getRows(): T[][] {\n    return this.rows;\n  }\n\n  get(row: number, col: number) {\n    const rowArr = this.rows[row];\n\n    if (!rowArr) {\n      return null;\n    }\n\n    return this.rows[row][col] || null;\n  }\n\n  getColumns(): T[][] {\n    return this.rows.map((row, rowIndex) =>\n      row.map((_, colIndex) => this.get(colIndex, rowIndex)!)\n    );\n  }\n\n  addCell(row: number, cell: T) {\n    if (!this.rows[row]) {\n      this.rows[row] = [];\n    }\n\n    this.rows[row].push(cell);\n  }\n\n  updateCellLoci() {\n    this.rows.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => cell.setLocation(rowIndex, colIndex));\n    });\n  }\n\n  rotate(degrees: RotationDegree) {\n    if (degrees === 90) {\n      this.rows = this.getColumns().map((col) => col.reverse());\n    }\n\n    if (degrees === 180) {\n      this.rows = this.rows.reverse().map((row) => row.reverse());\n    }\n\n    if (degrees === 270) {\n      this.rows = this.getColumns().reverse();\n    }\n\n    this.updateCellLoci();\n\n    return this.rows;\n  }\n}\n\nexport type CellProps<T> = {\n  value: T;\n  row: number;\n  col: number;\n  grid: Grid<Cell<T>>;\n};\n\nexport class Cell<T> {\n  private value: T | null = null;\n  private row: number = 0;\n  private col: number = 0;\n  private grid: Grid<Cell<T>> | null = null;\n\n  constructor({ value, row, col, grid }: CellProps<T>) {\n    this.value = value;\n    this.row = row;\n    this.col = col;\n    this.grid = grid;\n  }\n\n  setLocation(row: number, col: number) {\n    this.row = row;\n    this.col = col;\n  }\n\n  getValue() {\n    return this.value!;\n  }\n\n  setValue(val: T) {\n    this.value = val;\n  }\n\n  getAdjacent(dir: Direction) {\n    const row =\n      dir === \"up\" ? this.row - 1 : dir === \"down\" ? this.row + 1 : this.row;\n    const col =\n      dir === \"right\" ? this.col + 1 : dir === \"left\" ? this.col - 1 : this.col;\n\n    return this.grid!.get(row, col);\n  }\n}\n"
        },
        "filesystem.ts": {
            "code": "import { sum } from \"./sum\";\n\nexport type Item = File | Directory;\n\nexport class Directory {\n  private size: number = 0;\n  private sizeInitialized: boolean = false;\n\n  readonly items: { [name: string]: Item } = {};\n\n  name: string = \"\";\n  parent: Directory | null = null;\n\n  constructor({ name, parent }: { name: string; parent: Directory | null }) {\n    this.name = name;\n    this.parent = parent;\n  }\n\n  addItem(file: Item) {\n    this.items[file.name] = file;\n  }\n\n  getSize(): number {\n    if (!this.sizeInitialized) {\n      this.size = this.calculateSize();\n      this.sizeInitialized = true;\n    }\n\n    return this.size;\n  }\n\n  calculateSize(): number {\n    return (\n      sum(this.getFiles().map((file) => file.size)) +\n      sum(this.getDirectories().map((dir) => dir.getSize()))\n    );\n  }\n\n  getDirectories(): Directory[] {\n    return Object.keys(this.items)\n      .map((name) => this.items[name])\n      .filter((item) => item instanceof Directory) as Directory[];\n  }\n\n  getFiles(): File[] {\n    return Object.keys(this.items)\n      .map((name) => this.items[name])\n      .filter((item) => item instanceof File) as File[];\n  }\n}\n\nexport class File {\n  readonly size: number = 0;\n  readonly name: string = \"\";\n  readonly parent: Directory | null = null;\n\n  constructor({\n    name,\n    size,\n    parent,\n  }: {\n    name: string;\n    size: number;\n    parent: Directory;\n  }) {\n    this.size = size;\n    this.name = name;\n    this.parent = parent;\n  }\n}\n\nexport class Terminal {\n  private path: string = \"/\";\n  private root: Directory = new Directory({ name: \"/\", parent: null });\n  private head: Directory = this.root;\n\n  constructor() {}\n\n  cd(dir: string) {\n    if (dir === \"/\") {\n      this.path = \"/\";\n      this.head = this.root;\n    } else if (dir === \"..\") {\n      if (!this.head.parent) {\n        throw new Error(\"Cannot go up from root\");\n      }\n\n      this.path = this.path.split(\"/\").slice(0, -1).join(\"/\");\n      this.head = this.head.parent;\n    } else {\n      const newHead = this.head.items[dir];\n      if (!newHead) {\n        throw new Error(`No such directory: ${dir}`);\n      }\n\n      if (newHead instanceof File) {\n        throw new Error(`Not a directory: ${dir}`);\n      }\n\n      this.path = `${this.path}/${dir}`;\n      this.head = newHead;\n    }\n  }\n\n  getHead(): Directory {\n    return this.head;\n  }\n\n  getRoot(): Directory {\n    return this.root;\n  }\n\n  getPath(): string {\n    return this.path;\n  }\n}\n"
        },
        "getInput.ts": {
            "code": "import axios from \"axios\";\nimport { AOC_SESSION_ID } from \"../constants\";\n\nconst cache: {\n  [day: number]: string;\n} = {};\n\nexport const getInput = async (day: number) => {\n  if (cache[day]) {\n    return cache[day];\n  }\n\n  const { data } = await axios<string>(\n    `https://adventofcode.com/2022/day/${day}/input`,\n    {\n      headers: {\n        Cookie: `session=${AOC_SESSION_ID}`,\n      },\n    }\n  );\n\n  cache[day] = data;\n\n  return data;\n};\n"
        },
        "groupItems.ts": {
            "code": "export const groupItems = <T>(items: T[], numPerGroup: number) => {\n  const result: T[][] = [];\n\n  items.forEach((item, index) => {\n    const bucket = Math.floor(index / numPerGroup);\n    if (!result[bucket]) {\n      result[bucket] = [];\n    }\n\n    result[bucket].push(item);\n  });\n\n  return result;\n};\n"
        },
        "range.ts": {
            "code": "export type Range = [number, number];\n\nexport const rangeHasOverlap = (a: Range, b: Range) => {\n  const aContainsBStart = a[0] <= b[0] && a[1] >= b[0];\n  const aContainsBEnd = a[0] <= b[1] && a[1] >= b[1];\n  const bContainsAStart = b[0] <= a[0] && b[1] >= a[0];\n  const bContainsAEnd = b[0] <= a[1] && b[1] >= a[1];\n\n  return aContainsBStart || aContainsBEnd || bContainsAStart || bContainsAEnd;\n};\n\nexport const oneRangeContainsAnther = (a: Range, b: Range) => {\n  const aContainsB = a[0] <= b[0] && a[1] >= b[1];\n  const bContainsA = b[0] <= a[0] && b[1] >= a[1];\n\n  return aContainsB || bContainsA;\n};\n"
        }
    },
    "algorithmic-playground": {
        "README.md": {
            "code": "# algorithmic-playground\n"
        },
        "base64.py": {
            "code": "# My own module that attempts to encode strings in base64\nimport copy\n\n\ndef int_to_binary(number: int, min_len=8) -> str:\n    completed_string = \"\"\n    # Make a copy so as not to affect the original element\n    num_copy = copy.copy(number)\n\n    # The factor is the largest power of two that fits into our number\n    # It is essentially the value of the largest binary place\n    factor = 1\n    while num_copy >= factor * 2:\n        factor *= 2\n\n    # We're building up our string from the left side to the right\n    while factor > 0:\n        # This will always be 1 or 0\n        # 1 means the factor is less than or equal to the current value of num_copy\n        # 0 means the factor is greater than the value of num_copy\n        completed_string += str(num_copy // factor)\n\n        # This accounts for the current factor and reduces num_copy appropriately for the next binary place check\n        num_copy = num_copy % factor\n\n        # Divide the factor by two to get the next value of the next binary place\n        factor = factor // 2\n\n    # Return the completed string after all of the 0's and 1's have been added\n    # Pad the string with extra beginning 0's if it's shorter than the needed length\n    return completed_string.rjust(min_len, '0')\n\n\n# This string contains all characters used to encode in base64, in increasing order\nbase_64_chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n\n\ndef to_base_64(content: str) -> str:\n    current_index = -1\n    current_counter = 0\n    binary_list = []\n    base_64_string = \"\"\n    for letter in str(content):\n        if current_counter == 0:\n            current_index += 1\n            binary_list.append([])\n        current_counter = (current_counter + 1) % 3\n        binary_list[current_index].append(int_to_binary(ord(letter)))\n\n    for x in range(3 - len(binary_list[current_index])):\n        binary_list[current_index].append(\"00000000\")\n\n    for triplet_index in range(len(binary_list)):\n        complete_string = binary_list[triplet_index][0] + binary_list[triplet_index][1] + binary_list[triplet_index][2]\n        twenty_four_bits = [\n            complete_string[:6],\n            complete_string[6:12],\n            complete_string[12:18],\n            complete_string[18:],\n        ]\n\n        for bit_index in range(len(twenty_four_bits)):\n            base_64_char_bin = twenty_four_bits[bit_index]\n            char_index = bin_to_int(base_64_char_bin)\n            if triplet_index == len(binary_list) - 1 and bit_index >= 2 and char_index == 0:\n                base_64_string += \"=\"\n            else:\n                base_64_string += base_64_chars[char_index]\n    return base_64_string\n\n\ndef bin_to_int(b0: str) -> int:\n    factor = 1\n    num = 0\n    for x in b0[::-1]:\n        num += int(x) * factor\n        factor *= 2\n    return num\n\n\nprint(to_base_64('ABBBc cdsfsd'))\n\n# TODO MAKE A TRANSLATOR THAT CONVERTS BASE64 BACK TO A STRING\n"
        }
    },
    "async-rate-limit": {
        "README.md": {
            "code": "# async-rate-limit\n\nQueue setup for limiting things like api calls and other asynchronous tasks like api calls that may take unpredictable amounts of time. Works with TypeScript.\n\n## Usage: \n\n### Importing \nES6 imports\n```javascript\nimport RateLimit from \"async-rate-limit\";\n```\n\nCommonJS: \n```javascript\nconst RateLimit = require(\"async-rate-limit\");\n```\n\n### Using In practice\n```javascript\n// Pretending to have an API with a limit of 10 requests per second\nconst limiter = new RateLimit({limit: 10, timespan: 1000});\n\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nfor(let x = 0; x < 100; x++){    \n    limiter.perform(async () => {\n        const requestTime = Math.floor(Math.random() * 2000);\n        await sleep(requestTime);\n        return requestTime;\n    }).then(time => {\n    \tconsole.log(`Completed Request ${x} in ${time}ms`);\n    });\n}\n```\n\n## Documentation\n\n### Creating an instance of RateLimit:\n```javascript\nconst limiter = new RateLimit(options);\n```\n### Options\n| Name:    | Description:                                                                                                                  |\n|----------|-------------------------------------------------------------------------------------------------------------------------------|\n| limit    | The maximum number of actions that can be performed in a given timespan. Also the max number of concurrent events. Default: 5 |\n| timespan | How long to wait before freeing up an action slot. Given in milliseconds. Default: 1000.                                      |\n\n### Methods\n\n#### perform(action)\nTakes in a function and returns a Promise. \n\nThe promise resolves to the value that is returned by calling the provided function. If the provided function returns a promise then it will wait for the promise to resolve first.\n\n```javascript\n\nconst return5 = async () => 5;\n\nlimiter\n    .perform(return5)\n    .then(result => {\n        console.log(\"Expected: 5; Result: \" + result);\n    });\n```"
        },
        "index.ts": {
            "code": "const { queue } = require(\"async\");\n\ninterface Props {\n  limit?: number;\n  timespan?: number;\n}\n\nclass RateLimit {\n  private readonly limit: number;\n  private readonly timespan: number;\n  private queue: any;\n  static default: any;\n\n  constructor({ limit, timespan }: Props) {\n    this.limit = limit || 5;\n    this.timespan = timespan || 1000;\n\n    this.queue = queue((action: Function, cb: Function) => {\n      action().then(() => setTimeout(cb, this.timespan));\n    }, this.limit);\n\n    this.perform = this.perform.bind(this);\n  }\n\n  perform(action: Function): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.queue.push(async () => {\n        try {\n          const result = await action();\n          resolve(result);\n        } catch (er) {\n          reject(er);\n        }\n      });\n    });\n  }\n}\n\nRateLimit.default = RateLimit;\nexport = RateLimit;\n"
        }
    },
    "athan": {
        "README.md": {
            "code": "# athan\n\nplays the athan on local cast-enabled devices\n\n[![Coverage Status](https://coveralls.io/repos/github/abir-taheer/athan/badge.svg?branch=main)](https://coveralls.io/github/abir-taheer/athan?branch=main)\n"
        }
    },
    "athan-pi": {
        "getDevices.js": {
            "code": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs_1 = __importDefault(require(\"fs\"));\nfunction getDevices() {\n    var devices = JSON.parse(fs_1.default.readFileSync(\"./devices.json\", \"utf8\"));\n    return devices.map(function (row) {\n        return {\n            id: row.id,\n            name: row.name,\n            friendlyName: row.friendlyName,\n            host: row.host,\n            enabled: row.enabled,\n            volume: row.volume,\n            prayers: row.prayers,\n        };\n    });\n}\nexports.default = getDevices;\n//# sourceMappingURL=getDevices.js.map"
        },
        "getPrayerTimesFromServer.js": {
            "code": "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar axios_1 = __importDefault(require(\"axios\"));\nvar fs_1 = __importDefault(require(\"fs\"));\nfunction getPrayerTimesFromServer(date, city) {\n    return __awaiter(this, void 0, void 0, function () {\n        var timestamp, response, times;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    timestamp = Math.round(date.getTime() / 1000);\n                    return [4 /*yield*/, axios_1.default.get(\"http://api.aladhan.com/v1/timingsByCity/\" + timestamp, {\n                            params: {\n                                city: city,\n                                country: \"US\",\n                                iso8601: true,\n                            },\n                        })];\n                case 1:\n                    response = _a.sent();\n                    times = {\n                        date: date.toDateString(),\n                        fajr: new Date(response.data.data.timings.Fajr),\n                        dhuhr: new Date(response.data.data.timings.Dhuhr),\n                        asr: new Date(response.data.data.timings.Asr),\n                        maghrib: new Date(response.data.data.timings.Maghrib),\n                        isha: new Date(response.data.data.timings.Isha),\n                    };\n                    fs_1.default.writeFileSync(\"./prayerTimes.json\", JSON.stringify([times]));\n                    return [2 /*return*/, times];\n            }\n        });\n    });\n}\nexports.default = getPrayerTimesFromServer;\n//# sourceMappingURL=getPrayerTimesFromServer.js.map"
        },
        "initTables.js": {
            "code": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs_1 = __importDefault(require(\"fs\"));\nfunction initTables() {\n    if (!fs_1.default.existsSync(\"./settings.json\")) {\n        fs_1.default.writeFileSync(\"./settings.json\", \"{ }\");\n    }\n    if (!fs_1.default.existsSync(\"./devices.json\")) {\n        fs_1.default.writeFileSync(\"./devices.json\", \"[]\");\n    }\n    if (!fs_1.default.existsSync(\"./prayerTimes.json\")) {\n        fs_1.default.writeFileSync(\"./prayerTimes.json\", \"[]\");\n    }\n    console.log(\"initialized\");\n}\nexports.default = initTables;\n//# sourceMappingURL=initTables.js.map"
        },
        "home.js": {
            "code": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      .switch {\\n        position: relative;\\n        display: inline-block;\\n        width: 60px;\\n        height: 34px;\\n        transform: scale(0.8);\\n      }\\n\\n      .switch input {\\n        opacity: 0;\\n        width: 0;\\n        height: 0;\\n      }\\n\\n      .slider {\\n        position: absolute;\\n        cursor: pointer;\\n        top: 0;\\n        left: 0;\\n        right: 0;\\n        bottom: 0;\\n        background-color: #ccc;\\n        -webkit-transition: 0.4s;\\n        transition: 0.4s;\\n      }\\n\\n      .slider:before {\\n        position: absolute;\\n        content: \\\"\\\";\\n        height: 26px;\\n        width: 26px;\\n        left: 4px;\\n        bottom: 4px;\\n        background-color: white;\\n        -webkit-transition: 0.4s;\\n        transition: 0.4s;\\n      }\\n\\n      input:checked + .slider {\\n        background-color: #2196f3;\\n      }\\n\\n      input:focus + .slider {\\n        box-shadow: 0 0 1px #2196f3;\\n      }\\n\\n      input:checked + .slider:before {\\n        -webkit-transform: translateX(26px);\\n        -ms-transform: translateX(26px);\\n        transform: translateX(26px);\\n      }\\n\\n      /* Rounded sliders */\\n      .slider.round {\\n        border-radius: 34px;\\n      }\\n\\n      .slider.round:before {\\n        border-radius: 50%;\\n      }\\n      body {\\n        padding: 20px;\\n      }\\n      .center {\\n        text-align: center;\\n      }\\n      .loader {\\n        font-size: 10px;\\n        margin: 50px auto;\\n        text-indent: -9999em;\\n        width: 11em;\\n        height: 11em;\\n        border-radius: 50%;\\n        background: #ffffff;\\n        background: -moz-linear-gradient(\\n          left,\\n          #ffffff 10%,\\n          rgba(255, 255, 255, 0) 42%\\n        );\\n        background: -webkit-linear-gradient(\\n          left,\\n          #ffffff 10%,\\n          rgba(255, 255, 255, 0) 42%\\n        );\\n        background: -o-linear-gradient(\\n          left,\\n          #ffffff 10%,\\n          rgba(255, 255, 255, 0) 42%\\n        );\\n        background: -ms-linear-gradient(\\n          left,\\n          #ffffff 10%,\\n          rgba(255, 255, 255, 0) 42%\\n        );\\n        background: linear-gradient(\\n          to right,\\n          #ffffff 10%,\\n          rgba(255, 255, 255, 0) 42%\\n        );\\n        position: relative;\\n        -webkit-animation: load3 1.4s infinite linear;\\n        animation: load3 1.4s infinite linear;\\n        -webkit-transform: translateZ(0);\\n        -ms-transform: translateZ(0);\\n        transform: translateZ(0);\\n      }\\n      .loader:before {\\n        width: 50%;\\n        height: 50%;\\n        background: #ffffff;\\n        border-radius: 100% 0 0 0;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        content: \\\"\\\";\\n      }\\n      .loader:after {\\n        background: #0dc5c1;\\n        width: 75%;\\n        height: 75%;\\n        border-radius: 50%;\\n        content: \\\"\\\";\\n        margin: auto;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @-webkit-keyframes load3 {\\n        0% {\\n          -webkit-transform: rotate(0deg);\\n          transform: rotate(0deg);\\n        }\\n        100% {\\n          -webkit-transform: rotate(360deg);\\n          transform: rotate(360deg);\\n        }\\n      }\\n      @keyframes load3 {\\n        0% {\\n          -webkit-transform: rotate(0deg);\\n          transform: rotate(0deg);\\n        }\\n        100% {\\n          -webkit-transform: rotate(360deg);\\n          transform: rotate(360deg);\\n        }\\n      }\\n    </style>\\n    <title>Set Up Athan</title>\\n    <link\\n      rel=\\\"stylesheet\\\"\\n      href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\"\\n    />\\n    <link\\n      rel=\\\"stylesheet\\\"\\n      href=\\\"https://code.getmdl.io/1.3.0/material.indigo-pink.min.css\\\"\\n    />\\n    <script defer src=\\\"https://code.getmdl.io/1.3.0/material.min.js\\\"></script>\\n    <script\\n      src=\\\"https://unpkg.com/react@18/umd/react.production.min.js\\\"\\n      crossorigin\\n    ></script>\\n    <script\\n      src=\\\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\\\"\\n      crossorigin\\n    ></script>\\n    <script src=\\\"https://unpkg.com/babel-standalone@6/babel.min.js\\\"></script>\\n    <script>\\n      function postApi(url, body) {\\n        return fetch(url, {\\n          method: \\\"POST\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n          },\\n          body: JSON.stringify(body),\\n        }).then((response) => response.json());\\n      }\\n    </script>\\n  </head>\\n\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n\\n    <script type=\\\"text/babel\\\">\\n      const allPrayers = [\\\"fajr\\\", \\\"dhuhr\\\", \\\"asr\\\", \\\"maghrib\\\", \\\"isha\\\"];\\n\\n      const useState = React.useState;\\n      const useEffect = React.useEffect;\\n\\n      function useApi(url) {\\n        const [data, setData] = useState(null);\\n        const [error, setError] = useState(null);\\n        const [loading, setLoading] = useState(false);\\n\\n        const refetch = React.useCallback(() => {\\n          setLoading(true);\\n          fetch(url)\\n            .then((response) => response.json())\\n            .then((data) => {\\n              setData(data);\\n              setLoading(false);\\n            })\\n            .catch((error) => {\\n              setError(error);\\n              setLoading(false);\\n            });\\n        }, [url]);\\n\\n        useEffect(() => {\\n          refetch();\\n        }, [refetch]);\\n\\n        return { data, error, loading, refetch };\\n      }\\n\\n      function App() {\\n        return (\\n          <div>\\n            <h2 className=\\\"center\\\">Manage Athan Settings</h2>\\n\\n            <CityInput />\\n            <AllDevices />\\n          </div>\\n        );\\n      }\\n\\n      function PrayerTimes() {\\n        const { data, loading, error, refetch } = useApi(\\\"/api/prayertimes\\\");\\n\\n        if (loading) {\\n          return <div className=\\\"loader\\\"></div>;\\n        }\\n\\n        if (error) {\\n          return <div>Error: {error.message}</div>;\\n        }\\n\\n        if (!data) {\\n          return <div>No data</div>;\\n        }\\n\\n        return (\\n          <div>\\n            <p className=\\\"center\\\">Prayer Times:</p>\\n\\n            {Object.keys(data).map((p) => (\\n              <p>\\n                {p}: {new Date(data[p]).toLocaleTimeString()}\\n              </p>\\n            ))}\\n          </div>\\n        );\\n      }\\n\\n      function CityInput() {\\n        const { data, error, loading, refetch } = useApi(\\\"/api/settings/list\\\");\\n\\n        const [city, setCity] = useState(\\\"\\\");\\n        useEffect(() => {\\n          if (data && data.city) {\\n            setCity(data.city);\\n          }\\n        }, [data]);\\n\\n        function save() {\\n          postApi(\\\"/api/settings/update/city\\\", {\\n            value: city,\\n          }).then(() => {\\n            refetch();\\n          });\\n        }\\n\\n        return (\\n          <div className=\\\"center\\\">\\n            {data && data.city && <PrayerTimes />}\\n            <br />\\n            <div className=\\\"center\\\">\\n              City:{\\\" \\\"}\\n              <input\\n                type=\\\"text\\\"\\n                value={city}\\n                onChange={(e) => setCity(e.target.value)}\\n              />\\n              <br />\\n              <button\\n                style={{\\n                  backgroundColor: \\\"#0dc5c1\\\",\\n                  color: \\\"white\\\",\\n                  border: \\\"none\\\",\\n                  padding: \\\"10px 20px\\\",\\n                  borderRadius: \\\"4px\\\",\\n                  cursor: \\\"pointer\\\",\\n                  marginTop: \\\"10px\\\",\\n                }}\\n                onClick={save}\\n              >\\n                Save City\\n              </button>\\n            </div>\\n          </div>\\n        );\\n      }\\n\\n      function ScanButton({ refetch }) {\\n        const [scanning, setScanning] = useState(false);\\n\\n        function handleClick() {\\n          setScanning(true);\\n          fetch(\\\"/api/devices/scan\\\")\\n            .then((response) => response.json())\\n            .then((data) => {\\n              setScanning(false);\\n              refetch();\\n            });\\n        }\\n\\n        if (scanning) {\\n          return (\\n            <div>\\n              <p className=\\\"center\\\">Scanning</p>\\n              <div className=\\\"loader center\\\">Scanning...</div>\\n            </div>\\n          );\\n        }\\n\\n        return (\\n          <button\\n            onClick={handleClick}\\n            style={{\\n              fontSize: 18,\\n              background: \\\"purple\\\",\\n              color: \\\"white\\\",\\n              padding: 10,\\n              borderRadius: 20,\\n              marginBottom: 20,\\n            }}\\n          >\\n            Scan for New Devices\\n          </button>\\n        );\\n      }\\n\\n      function AllDevices() {\\n        const { data, error, loading, refetch } = useApi(\\\"/api/devices/list\\\");\\n\\n        if (loading) {\\n          return <div>Loading...</div>;\\n        }\\n\\n        if (error) {\\n          return <div>Error: {error.message}</div>;\\n        }\\n\\n        if (!data) {\\n          return <div>No devices found</div>;\\n        }\\n\\n        return (\\n          <div>\\n            <h3 className=\\\"center\\\">Devices</h3>\\n            <div className=\\\"center\\\">\\n              <ScanButton refetch={refetch} />\\n\\n              {data && !data.length && (\\n                <div className=\\\"center\\\">No devices found</div>\\n              )}\\n            </div>\\n\\n            {data.map((device) => (\\n              <Device {...device} key={device.name} refetch={refetch} />\\n            ))}\\n          </div>\\n        );\\n      }\\n\\n      function Device({\\n        id,\\n        name,\\n        friendlyName,\\n        volume,\\n        enabled,\\n        prayers,\\n        refetch,\\n      }) {\\n        const [newPrayers, setNewPrayers] = useState(prayers);\\n        const [newVolume, setNewVolume] = useState(volume);\\n        const [newEnabled, setNewEnabled] = useState(enabled);\\n\\n        const changesMade =\\n          newPrayers.toString() !== prayers.toString() ||\\n          volume !== newVolume ||\\n          newEnabled !== enabled;\\n\\n        function togglePrayer(prayer) {\\n          const newerPrayers = [...newPrayers];\\n          const index = newerPrayers.indexOf(prayer);\\n          if (index === -1) {\\n            newerPrayers.push(prayer);\\n          } else {\\n            newerPrayers.splice(index, 1);\\n          }\\n          setNewPrayers(newerPrayers);\\n        }\\n\\n        function save() {\\n          postApi(\\\"/api/devices/update/\\\" + id, {\\n            prayers: newPrayers,\\n            volume: newVolume,\\n            enabled: newEnabled,\\n          }).then(() => {\\n            refetch();\\n          });\\n        }\\n\\n        return (\\n          <div>\\n            <div\\n              style={{\\n                border: \\\"1px solid grey\\\",\\n                borderRadius: 20,\\n                padding: 20,\\n                maxWidth: \\\"calc(90vw - 20px)\\\",\\n              }}\\n            >\\n              <p>\\n                {changesMade && (\\n                  <p style={{ color: \\\"red\\\" }}>You have unsaved changes</p>\\n                )}\\n              </p>\\n              <h5>Friendly Name: {friendlyName}</h5>\\n              <p>Full Name: {name}</p>\\n              <h6>Enabled: </h6>\\n\\n              <label class=\\\"switch\\\">\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  checked={newEnabled}\\n                  onChange={() => setNewEnabled(!newEnabled)}\\n                />\\n                <span class=\\\"slider round\\\"></span>\\n              </label>\\n              <br />\\n\\n              <h6>Volume: </h6>\\n              <input\\n                type=\\\"number\\\"\\n                min=\\\"0\\\"\\n                max=\\\"1\\\"\\n                pattern=\\\"[0-1].[0-9]+*\\\"\\n                style={{ width: 50 }}\\n                step=\\\"0.1\\\"\\n                value={newVolume}\\n                onChange={(e) => setNewVolume(e.target.value)}\\n              />\\n              <br />\\n\\n              <p>Prayers:</p>\\n              <p>Select which prayers you want to be played on this device</p>\\n\\n              {allPrayers.map((p) => (\\n                <div key={p}>\\n                  <input\\n                    type=\\\"checkbox\\\"\\n                    checked={newPrayers.includes(p)}\\n                    onChange={() => togglePrayer(p)}\\n                  />{\\\" \\\"}\\n                  {p}\\n                </div>\\n              ))}\\n\\n              <br />\\n\\n              {changesMade && (\\n                <button\\n                  style={{\\n                    backgroundColor: \\\"#0dc5c1\\\",\\n                    color: \\\"white\\\",\\n                    border: \\\"none\\\",\\n                    padding: \\\"10px 20px\\\",\\n                    borderRadius: \\\"4px\\\",\\n                    cursor: \\\"pointer\\\",\\n                    marginTop: \\\"10px\\\",\\n                  }}\\n                  onClick={save}\\n                >\\n                  Save Changes\\n                </button>\\n              )}\\n            </div>\\n            <br />\\n            <hr />\\n          </div>\\n        );\\n      }\\n\\n      ReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n    </script>\\n  </body>\\n</html>\\n\";\n//# sourceMappingURL=home.js.map"
        },
        "index.js": {
            "code": "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar node_cluster_1 = __importDefault(require(\"node:cluster\"));\nvar runApp_1 = __importDefault(require(\"./runApp\"));\nvar sleep = function (ms) { return new Promise(function (res) { return setTimeout(res, ms); }); };\nif (node_cluster_1.default.isPrimary) {\n    node_cluster_1.default.fork();\n    // If for some reason the app shuts down, restart it\n    // Wait 20s to prevent an infinite restart that kills the pi\n    node_cluster_1.default.on(\"exit\", function (workerId, code, signal) { return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    console.log(\"Worker \".concat(workerId, \" died with code \").concat(code, \" and signal \").concat(signal));\n                    return [4 /*yield*/, sleep(20 * 1000)];\n                case 1:\n                    _a.sent();\n                    node_cluster_1.default.fork();\n                    return [2 /*return*/];\n            }\n        });\n    }); });\n    node_cluster_1.default.on(\"online\", function (worker) {\n        console.log(\"Worker \".concat(worker.process.pid, \" is online\"));\n    });\n}\nelse {\n    (0, runApp_1.default)();\n}\n//# sourceMappingURL=index.js.map"
        }
    },
    "auto-calendar-sharing": {
        "README.md": {
            "code": "This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\n[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n"
        },
        "01_create-user.ts": {
            "code": "import { DataTypes, QueryInterface } from \"sequelize\";\nimport { MigrationFn } from \"umzug\";\n\nconst up: MigrationFn<QueryInterface> = async function ({\n  context: queryInterface,\n}) {\n  await queryInterface.createTable(\"User\", {\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    firstName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    lastName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    createdAt: {\n      type: DataTypes.DATE,\n      allowNull: false,\n    },\n    updatedAt: {\n      type: DataTypes.DATE,\n      allowNull: false,\n    },\n    deletedAt: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n  });\n};\n\nconst down: MigrationFn<QueryInterface> = async function ({\n  context: queryInterface,\n}) {\n  await queryInterface.dropTable(\"User\");\n};\n\nexport { up, down };\n"
        },
        "02_add-email-to-user.ts": {
            "code": "import { DataTypes, QueryInterface } from \"sequelize\";\nimport { MigrationFn } from \"umzug\";\n\nconst up: MigrationFn<QueryInterface> = async function ({\n  context: queryInterface,\n}) {\n  await queryInterface.addColumn(\"User\", \"email\", {\n    type: DataTypes.STRING,\n    allowNull: false,\n  });\n};\n\nconst down: MigrationFn<QueryInterface> = async function ({\n  context: queryInterface,\n}) {\n  await queryInterface.removeColumn(\"User\", \"email\");\n};\n\nexport { up, down };\n"
        },
        "User.ts": {
            "code": "import { gql } from \"apollo-server-micro\";\nexport default gql`\n  type User {\n    id: Int!\n    email: EmailAddress!\n    firstName: String!\n    lastName: String!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n`;\n"
        },
        "sequelize.ts": {
            "code": "import path from \"path\";\nimport { Options, Sequelize } from \"sequelize\";\n\nconst sqlitePath = path.resolve(__dirname, \"./../app.db\");\n\nconst logsDisabled = process.env.SEQUELIZE_NO_LOG === \"true\";\n\nconst sequelize_url: string = process.env.SEQUELIZE_URL || \"\";\n\nconst url: string = sequelize_url || `sqlite::${sqlitePath}`;\n\nconst env: string = process.env.NODE_ENV || \"development\";\n\nconst configMap: { [key: string]: Options } = {\n  development: {\n    dialect: sequelize_url ? undefined : \"sqlite\",\n    storage: sequelize_url ? undefined : \"app.db\",\n    define: {\n      charset: \"utf8\",\n      collate: \"utf8_unicode_ci\",\n    },\n    ssl: true,\n    native: true,\n    logging: logsDisabled ? false : console.log,\n  },\n  production: {\n    pool: {\n      max: 5,\n      min: 0,\n      acquire: 30000,\n      idle: 10000,\n    },\n    define: {\n      charset: \"utf8\",\n      collate: \"utf8_unicode_ci\",\n    },\n    native: true,\n    ssl: true,\n    logging: false,\n  },\n};\n\nconst config = configMap[env];\n\nconst sequelize = new Sequelize(url, config);\n\nexport default sequelize;\n"
        },
        "umzug.ts": {
            "code": "import path from \"path\";\nimport { SequelizeStorage, Umzug } from \"umzug\";\nimport sequelize from \"./sequelize\";\n\nconst migrationsPath = path.resolve(__dirname, \"migrations\");\n\n// Umzug is responsible for running Migrations\nconst umzug = new Umzug({\n  migrations: {\n    glob: migrationsPath + \"/*.ts\",\n  },\n  context: sequelize.getQueryInterface(),\n  storage: new SequelizeStorage({ sequelize }),\n  logger: console,\n});\n\nexport default umzug;\n"
        },
        "index.ts": {
            "code": "import Mutation from \"./Mutation\";\nimport Query from \"./Query\";\nimport scalars from \"./scalars\";\nimport User from \"./User\";\n\nconst typeDefs = [Mutation, User, Query, scalars];\n\nexport default typeDefs;\n"
        },
        "createUser.ts": {
            "code": "import User from \"../../../database/models/User\";\n\ntype CreateUserArgs = {\n  email: string;\n  firstName: string;\n  lastName: string;\n};\n\nconst createUser = (\n  parent: null,\n  { email, firstName, lastName }: CreateUserArgs\n): Promise<User> => User.create({ email, firstName, lastName });\n\nexport default createUser;\n"
        },
        "userById.ts": {
            "code": "import User from \"../../../database/models/User\";\n\ntype UserByIdArgs = {\n  id: number;\n};\n\nconst userById = (parent: null, { id }: UserByIdArgs): Promise<User | null> =>\n  User.findOne({ where: { id } });\n\nexport default userById;\n"
        },
        "Mutation.ts": {
            "code": "import { gql } from \"apollo-server-micro\";\n\nexport default gql`\n  type Mutation {\n    createUser(\n      email: EmailAddress!\n      firstName: NonEmptyString!\n      lastName: NonEmptyString!\n    ): User!\n  }\n`;\n"
        },
        "Query.ts": {
            "code": "import { gql } from \"apollo-server-micro\";\n\nexport default gql`\n  type Query {\n    userById(id: Int!): User\n  }\n`;\n"
        },
        "scalars.ts": {
            "code": "import { gql } from \"apollo-server-micro\";\n\nexport default gql`\n  # Defined in graphql-scalars\n  scalar Date\n  scalar Time\n  scalar DateTime\n  scalar Timestamp\n  scalar UtcOffset\n  scalar Duration\n  scalar ISO8601Duration\n  scalar LocalDate\n  scalar LocalTime\n  scalar LocalEndTime\n  scalar EmailAddress\n  scalar NegativeFloat\n  scalar NegativeInt\n  scalar NonEmptyString\n  scalar NonNegativeFloat\n  scalar NonNegativeInt\n  scalar NonPositiveFloat\n  scalar NonPositiveInt\n  scalar PhoneNumber\n  scalar PositiveFloat\n  scalar PositiveInt\n  scalar PostalCode\n  scalar UnsignedFloat\n  scalar UnsignedInt\n  scalar URL\n  scalar BigInt\n  scalar Long\n  scalar Byte\n  scalar UUID\n  scalar GUID\n  scalar Hexadecimal\n  scalar HexColorCode\n  scalar HSL\n  scalar HSLA\n  scalar IPv4\n  scalar IPv6\n  scalar ISBN\n  scalar JWT\n  scalar Latitude\n  scalar Longitude\n  scalar MAC\n  scalar Port\n  scalar RGB\n  scalar RGBA\n  scalar SafeInt\n  scalar USCurrency\n  scalar Currency\n  scalar JSON\n  scalar JSONObject\n  scalar IBAN\n  scalar ObjectID\n  scalar Void\n  scalar DID\n  scalar CountryCode\n`;\n"
        }
    },
    "auto-prettify": {
        "README.md": {
            "code": "# quicker-picker-upper\n\nTemplate for quick NodeJS prototyping and development\n\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n\n## Quick Start\n\n1. Instal NodeJS on your computer if you haven't done so already: https://nodejs.org/en/download/\n2. Click the \"Use this template\" button on GitHub, right of the \"Clone or download\" button and give your repository a name.\n3. Clone your new repository to your computer.\n4. `cd` into your repository's directory and install dependencies:\n\n```shell\nnpm install\n```\n\n5. That's it, you can start developing!\n\n- If you want your app to automatically restart upon file changes, run it with the following command:\n  ```shell\n  npm run dev\n  ```\n\n## Why use it?\n\n- [x] Has the things you'll need, less time setting up\n  - Rolling sessions, connected to the database, with signed cookies\n  - Simple, modular routing structure\n  - Body and cookie parsers\n- [x] Stop worrying about configuring a database\n  - Uses [Sequelize ORM](https://sequelize.org/).\n  - Define your schema once and have it work with `mysql`, `postgres`, `sqlite`, or `mariadb` out of the box\n  - The app will automatically create a sqlite3 database with the name `app.db` if you don't provide a database\n- [x] Continuous integration.\n  - Encourages unit-testing\n  - GitHub workflow, with caching, already set up\n  - Tests your code, in parallel on NodeJS 10.x and 12.x, as well as with every database type, on every commit or pull request\n- [x] [Prettier](https://prettier.io/)-ready\n  - Automatically format your code with `npm run prettier`\n  - Spend more time writing code and less time worrying about formatting\n- [x] Production Ready\n  - Creates clusters to distribute load across cpu cores\n  - Instantly revives child processes if they die. Your entire app won't go offline if something crashes in production.\n  - Pooling of database connections allows for quicker access to data\n- [x] PaaS Ready (Platform as a Service)\n  - Instantly deploy on Heroku or AWS Elastic Beanstalk with ease\n  - Most configuration happens using environment variables\n\n## Databases\n\nDefine your schema using [Sequelize CLI](https://github.com/sequelize/cli)\n\nHave a database already? You can use it with the app by setting the `SEQUELIZE_URL` environment varible. You can do this in a .env file like so:\n\n```dotenv\nSEQUELIZE_URL=mysql://user:password@localhost/my_db\n```\n\n## Testing\n\nTesting happens with the [mocha](https://mochajs.org/) and [chai](https://www.chaijs.com/) libraries.\nBy default, mocha will look for tests inside of the `test/` directory. You can alter the mocha configuration in the `package.json` file/\n"
        }
    }
}